# generated by datamodel-codegen:
#   filename:  PSA_OpenAPI_schema.json

from __future__ import annotations

from datetime import date as date_aliased
from datetime import datetime
from enum import Enum
from typing import Annotated
from typing import Any as Any_aliased
from uuid import UUID

from pydantic import Field
from sparkdantic import SparkModel


class AccountingBatch(SparkModel):
    id: int | None
    batchIdentifier: str | None
    exportInvoicesFlag: bool | None
    exportExpensesFlag: bool | None
    exportProductsFlag: bool | None
    closedFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class AccountingPackage(SparkModel):
    id: int | None
    identifier: str | None
    name: str | None


class AccountingPackageReference(SparkModel):
    id: int | None
    identifier: AccountingPackageReferenceIdentifier | None
    name: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class AccountingPackageReferenceIdentifier(str, Enum):
    QB99 = 'QB99'
    Mas200 = 'Mas200'
    GPlains = 'GPlains'
    SBA = 'SBA'
    Mas200v4 = 'Mas200v4'
    Other = 'Other'


class AccountingPackageSetup(SparkModel):
    id: int | None
    accountingPackage: AccountingPackageReference
    directTransferFlag: bool | None
    includeInvoicesFlag: bool | None
    invoiceFormat: AccountingPackageSetupInvoiceFormat | None
    includeExpensesFlag: bool | None
    transferExpensesAsBillFlag: bool | None
    expenseFormat: AccountingPackageSetupExpenseFormat | None
    suppressMemoFlag: bool | None
    syncPaymentInfoFlag: bool | None
    syncWisePayPaymentInfoFlag: bool | None
    includeSalesTaxFlag: bool | None
    enableTaxGroupsFlag: bool | None
    zeroDollarTaxAmountsFlag: bool | None
    includeItemsFlag: bool | None
    inventorySOHFlag: bool | None
    sendComponentAmountFlag: bool | None
    sendUomFlag: bool | None
    includeCogsEntriesFlag: bool | None
    includeCogsDropShipFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class AccountingPackageSetupExpenseFormat(str, Enum):
    Default = 'Default'
    Condensed = 'Condensed'


class AccountingPackageSetupInvoiceFormat(str, Enum):
    Default = 'Default'
    Condensed = 'Condensed'
    Detailed = 'Detailed'


class Activity(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 100;')]
    type: ActivityTypeReference | None
    company: CompanyReference | None
    contact: ContactReference | None
    phoneNumber: Annotated[str | None, Field(description=' Max length: 30;')]
    email: Annotated[str | None, Field(description=' Max length: 250;')]
    status: ActivityStatusReference | None
    opportunity: OpportunityReference | None
    ticket: TicketReference | None
    agreement: AgreementReference | None
    campaign: CampaignReference | None
    notes: str | None
    dateStart: datetime | None
    dateEnd: datetime | None
    assignedBy: MemberReference | None
    assignTo: MemberReference
    scheduleStatus: ScheduleStatusReference | None
    reminder: ReminderReference | None
    where: ServiceLocationReference | None
    notifyFlag: bool | None
    mobileGuid: UUID | None
    currency: CurrencyReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    customFields: list[CustomFieldValue] | None


class ActivityReference(SparkModel):
    id: int | None
    name: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ActivityStatus(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 30;')]
    defaultFlag: bool | None
    inactiveFlag: bool | None
    spawnFollowupFlag: bool | None
    closedFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ActivityStatusInfo(SparkModel):
    id: int | None
    name: str | None
    inactiveFlag: bool | None
    closedFlag: bool | None
    defaultFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ActivityStatusReference(ActivityReference):
    pass


class ActivityStopwatch(SparkModel):
    activityId: int
    activityMobileGuid: UUID | None
    agreement: AgreementReference | None
    billableOption: ActivityStopwatchBillableOption | None
    businessUnitId: int | None
    dateEntered: datetime | None
    endTime: datetime | None
    id: int | None
    internalNotes: str | None
    locationId: int | None
    member: MemberReference
    mobileGuid: UUID | None
    notes: Annotated[str | None, Field(description=' Max length: 4000;')]
    startTime: datetime | None
    status: ActivityStopwatchStatus
    totalPauseTime: int | None
    workRole: WorkRoleReference | None
    workType: WorkTypeReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ActivityStopwatchBillableOption(str, Enum):
    Billable = 'Billable'
    DoNotBill = 'DoNotBill'
    NoCharge = 'NoCharge'
    NoDefault = 'NoDefault'


class ActivityStopwatchStatus(str, Enum):
    Reset = 'Reset'
    Running = 'Running'
    Paused = 'Paused'
    Stopped = 'Stopped'


class ActivityType(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    points: int | None
    defaultFlag: bool | None
    inactiveFlag: bool | None
    emailFlag: bool | None
    memoFlag: bool | None
    historyFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ActivityTypeReference(ActivityReference):
    pass


class Addition(SparkModel):
    id: int | None
    product: IvItemReference
    quantity: float | None
    lessIncluded: float | None
    unitPrice: float | None
    unitCost: float | None
    billCustomer: AdditionBillCustomer
    effectiveDate: datetime | None
    cancelledDate: datetime | None
    taxableFlag: bool | None
    serialNumber: Annotated[str | None, Field(description=' Max length: 50;')]
    invoiceDescription: Annotated[str | None, Field(description=' Max length: 6000;')]
    purchaseItemFlag: bool | None
    specialOrderFlag: bool | None
    agreementId: int | None
    description: str | None
    billedQuantity: float | None
    uom: str | None
    extPrice: float | None
    extCost: float | None
    sequenceNumber: float | None
    margin: float | None
    prorateCost: float | None
    proratePrice: float | None
    extendedProrateCost: float | None
    extendedProratePrice: float | None
    prorateCurrentPeriodFlag: bool | None
    opportunity: OpportunityReference | None
    agreementStatus: AdditionAgreementStatus | None
    invoiceGrouping: InvoiceGroupingReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    customFields: list[CustomFieldValue] | None


class AdditionAgreementStatus(str, Enum):
    Active = 'Active'
    Cancelled = 'Cancelled'
    Expired = 'Expired'
    Inactive = 'Inactive'


class AdditionBillCustomer(str, Enum):
    Billable = 'Billable'
    DoNotBill = 'DoNotBill'
    NoCharge = 'NoCharge'


class AddressFormat(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    format: Annotated[str, Field(description=' Max length: 250;')]
    defaultFlag: bool | None
    countryIds: list[int] | None
    addAllCountries: bool | None
    removeAllCountries: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class AddressFormatInfo(SparkModel):
    id: int | None
    name: str | None
    defaultFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class AddressFormatReference(ActivityReference):
    pass


class AdjustmentDetail(SparkModel):
    id: int | None
    catalogItem: CatalogItemReference
    description: Annotated[str | None, Field(description=' Max length: 50;')]
    quantityOnHand: float | None
    unitCost: float | None
    warehouse: WarehouseReference
    warehouseBin: WarehouseBinReference
    quantityAdjusted: int
    serialNumber: Annotated[str | None, Field(description=' Max length: 1000;')]
    adjustment: AdjustmentReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class AdjustmentDetailReference(ActivityReference):
    pass


class AdjustmentReference(ActivityReference):
    pass


class AdjustmentType(SparkModel):
    id: int | None
    identifier: Annotated[str, Field(description=' Max length: 50;')]
    name: Annotated[str | None, Field(description=' Max length: 100;')]
    auditTrailFlag: bool | None
    dateCreated: datetime | None
    createdBy: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class AdjustmentTypeInfo(ActivityReference):
    pass


class AdjustmentTypeReference(SparkModel):
    id: int | None
    identifier: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class Agreement(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 100;')]
    type: AgreementTypeReference
    company: CompanyReference
    contact: ContactReference
    site: SiteReference | None
    subContractCompany: CompanyReference | None
    subContractContact: ContactReference | None
    parentAgreement: AgreementReference | None
    customerPO: Annotated[str | None, Field(description=' Max length: 50;')]
    location: SystemLocationReference | None
    department: SystemDepartmentReference | None
    restrictLocationFlag: bool | None
    restrictDepartmentFlag: bool | None
    startDate: datetime | None
    endDate: datetime | None
    noEndingDateFlag: bool | None
    opportunity: OpportunityReference | None
    cancelledFlag: bool | None
    dateCancelled: datetime | None
    reasonCancelled: Annotated[str | None, Field(description=' Max length: 100;')]
    sla: SLAReference | None
    workOrder: Annotated[str | None, Field(description=' Max length: 20;')]
    internalNotes: str | None
    applicationUnits: AgreementApplicationUnits | None
    applicationLimit: float | None
    applicationCycle: AgreementApplicationCycle | None
    applicationUnlimitedFlag: bool | None
    oneTimeFlag: bool | None
    coverAgreementTime: bool | None
    coverAgreementProduct: bool | None
    coverAgreementExpense: bool | None
    coverSalesTax: bool | None
    carryOverUnused: bool | None
    allowOverruns: bool | None
    expiredDays: int | None
    limit: int | None
    expireWhenZero: bool | None
    chargeToFirm: bool | None
    employeeCompRate: Annotated[
        AgreementEmployeeCompRate | None, Field(description=' Required On Updates;')
    ]
    employeeCompNotExceed: AgreementEmployeeCompNotExceed | None
    compHourlyRate: float | None
    compLimitAmount: float | None
    billingCycle: BillingCycleReference | None
    billOneTimeFlag: bool | None
    billingTerms: BillingTermsReference | None
    invoicingCycle: Annotated[
        AgreementInvoicingCycle | None, Field(description=' Required On Updates;')
    ]
    billToCompany: CompanyReference | None
    billToContact: ContactReference | None
    billToSite: SiteReference | None
    billAmount: float | None
    taxable: bool | None
    prorateFirstBill: float | None
    billStartDate: datetime | None
    taxCode: TaxCodeReference | None
    restrictDownPayment: bool | None
    prorateFlag: bool | None
    invoiceProratedAdditionsFlag: bool | None
    invoiceDescription: str | None
    topComment: bool | None
    bottomComment: bool | None
    workRole: WorkRoleReference | None
    workType: WorkTypeReference | None
    projectType: ProjectTypeReference | None
    invoiceTemplate: InvoiceTemplateReference | None
    billTime: Annotated[
        ActivityStopwatchBillableOption | None,
        Field(description=' Required On Updates;'),
    ]
    billExpenses: Annotated[
        ActivityStopwatchBillableOption | None,
        Field(description=' Required On Updates;'),
    ]
    billProducts: Annotated[
        ActivityStopwatchBillableOption | None,
        Field(description=' Required On Updates;'),
    ]
    billableTimeInvoice: bool | None
    billableExpenseInvoice: bool | None
    billableProductInvoice: bool | None
    currency: CurrencyReference | None
    periodType: AgreementPeriodType | None
    autoInvoiceFlag: bool | None
    nextInvoiceDate: str | None
    companyLocation: SystemLocationReference | None
    shipToCompany: CompanyReference | None
    shipToContact: ContactReference | None
    shipToSite: SiteReference | None
    agreementStatus: AdditionAgreementStatus | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    customFields: list[CustomFieldValue] | None


class AgreementApplicationAviablePer(SparkModel):
    id: int | None
    tag: str | None
    name: str | None


class AgreementApplicationBillingCycle(AgreementApplicationAviablePer):
    pass


class AgreementApplicationCycle(str, Enum):
    Contract2Weeks = 'Contract2Weeks'
    Contract4Weeks = 'Contract4Weeks'
    ContractYear = 'ContractYear'
    CalendarMonth = 'CalendarMonth'
    CalendarQuarter = 'CalendarQuarter'
    CalendarWeek = 'CalendarWeek'
    ContractQuarter = 'ContractQuarter'
    CalendarYear = 'CalendarYear'


class AgreementApplicationLimit(AgreementApplicationAviablePer):
    pass


class AgreementApplicationParameters(SparkModel):
    applicationUnit: AgreementApplicationUnit | None
    applicationLimit: AgreementApplicationLimit | None
    applicationLimitAmount: float | None
    availablePer: AgreementApplicationAviablePer | None
    coversTimeFlag: bool | None
    coversExpensesFlag: bool | None
    coversProductsFlag: bool | None
    coversTaxFlag: bool | None
    carryoverUnusedFlag: bool | None
    carryOverDays: int | None
    allowOverrunsFlag: bool | None
    overrunLimit: int | None
    agreementExpiresFlag: bool | None
    chargeAdjustmentsFlag: bool | None
    prepayFlag: bool | None
    agrBillingCycle: AgreementApplicationBillingCycle | None
    userDefinedFieldValues: list[UserDefinedFieldValueModel] | None


class AgreementApplicationUnit(AgreementApplicationAviablePer):
    pass


class AgreementApplicationUnits(str, Enum):
    Amount = 'Amount'
    Hours = 'Hours'
    Incidents = 'Incidents'


class AgreementBatchSetup(SparkModel):
    id: int | None
    nextRunDate: datetime
    daysInAdvance: int
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class AgreementBillingInfo(SparkModel):
    agreementName: str | None
    agreementType: str | None
    agreementAmount: float | None
    agreementRecId: int | None
    parentRecId: int | None


class AgreementEmployeeCompNotExceed(str, Enum):
    Billing = 'Billing'
    Amount = 'Amount'
    Percent = 'Percent'


class AgreementEmployeeCompRate(str, Enum):
    Actual = 'Actual'
    Hourly = 'Hourly'


class AgreementInvoicingCycle(str, Enum):
    ContractYear = 'ContractYear'
    CalendarYear = 'CalendarYear'


class AgreementPeriodType(str, Enum):
    Current = 'Current'
    Future = 'Future'
    Both = 'Both'
    Undefined = 'Undefined'


class AgreementRecap(SparkModel):
    id: int | None
    adjustmentAmount: float | None
    agreementStatus: str | None
    name: str | None
    availableAmount: float | None
    companyName: str | None
    isUnlimited: str | None
    lastInvoiceAmount: str | None
    lastInvoiceDate: str | None
    lastInvoiceNumber: str | None
    nextInvoiceAmount: float | None
    nextInvoiceDate: str | None
    overrunAmount: float | None
    remainingAmount: float | None
    startingAmount: float | None
    unbilledOverageAmount: float | None
    unbilledPeriods: int | None
    usedAmount: float | None


class AgreementRecurringParameters(SparkModel):
    billingCycle: GenericNameIdDTO | None
    cycleBase: GenericNameIdDTO | None
    aGRAmount: float | None
    taxable: bool | None
    childrenAmount: float | None
    additionsAmount: float | None
    totalAmount: float | None
    aGRProrate: float | None
    billStartDate: str | None
    taxCode: GenericNameIdDTO | None
    terms: GenericNameIdDTO | None
    prorateFlag: bool | None
    invoiceProratedAdditionsFlag: bool | None
    restrictDownpayment: bool | None
    currency: GenericNameIdDTO | None
    autoInvoiceFlag: bool | None
    userDefinedFieldValues: list[UserDefinedFieldValueModel] | None


class AgreementReference(SparkModel):
    id: int | None
    name: str | None
    type: str | None
    chargeFirmFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class AgreementRevenueReference(SparkModel):
    id: int | None
    revenue: float | None
    cost: float | None
    margin: float | None
    percentage: float | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class AgreementSite(SparkModel):
    id: int | None
    company: CompanyReference
    site: SiteReference | None
    agreementId: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    customFields: list[CustomFieldValue] | None


class AgreementTabsCount(SparkModel):
    pass


class AgreementType(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    prefixSuffixOption: AgreementTypePrefixSuffixOption | None
    defaultFlag: bool | None
    inactiveFlag: bool | None
    prePaymentFlag: bool | None
    invoicePreSuffix: Annotated[str | None, Field(description=' Max length: 5;')]
    location: SystemLocationReference | None
    department: SystemDepartmentReference | None
    restrictLocationFlag: bool | None
    restrictDepartmentFlag: bool | None
    sla: SLAReference | None
    applicationUnits: AgreementApplicationUnits | None
    applicationLimit: float | None
    applicationCycle: AgreementApplicationCycle | None
    applicationUnlimitedFlag: bool | None
    oneTimeFlag: bool | None
    coverAgreementTimeFlag: bool | None
    coverAgreementProductFlag: bool | None
    coverAgreementExpenseFlag: bool | None
    coverSalesTaxFlag: bool | None
    carryOverUnusedFlag: bool | None
    allowOverrunsFlag: bool | None
    expiredDays: int | None
    limit: int | None
    expireWhenZero: bool | None
    chargeToFirmFlag: bool | None
    employeeCompRate: AgreementEmployeeCompRate
    employeeCompNotExceed: AgreementEmployeeCompNotExceed
    compHourlyRate: float | None
    compLimitAmount: float | None
    billingCycle: BillingCycleReference | None
    billOneTimeFlag: bool | None
    billingTerms: BillingTermsReference | None
    invoicingCycle: AgreementInvoicingCycle
    billAmount: float | None
    taxableFlag: bool | None
    restrictDownPaymentFlag: bool | None
    invoiceDescription: Annotated[str | None, Field(description=' Max length: 4000;')]
    topCommentFlag: bool | None
    bottomCommentFlag: bool | None
    workRole: WorkRoleReference | None
    workType: WorkTypeReference | None
    projectType: ProjectTypeReference | None
    invoiceTemplate: InvoiceTemplateReference | None
    billTime: ActivityStopwatchBillableOption
    billExpenses: ActivityStopwatchBillableOption
    billProducts: ActivityStopwatchBillableOption
    billableTimeInvoiceFlag: bool | None
    billableExpenseInvoiceFlag: bool | None
    billableProductInvoiceFlag: bool | None
    copyWorkRolesFlag: bool | None
    copyWorkTypesFlag: bool | None
    exclusionWorkRoleIds: list[int] | None
    addAllWorkRoleExclusions: bool | None
    removeAllWorkRoleExclusions: bool | None
    exclusionWorkTypeIds: list[int] | None
    addAllWorkTypeExclusions: bool | None
    removeAllWorkTypeExclusions: bool | None
    integrationXRef: Annotated[str | None, Field(description=' Max length: 50;')]
    prorateFlag: bool | None
    emailTemplate: EmailTemplateReference | None
    autoInvoiceFlag: bool | None
    invoiceProratedAdditionsFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class AgreementTypeBoardDefault(SparkModel):
    id: int | None
    type: AgreementTypeReference | None
    location: SystemLocationReference
    department: SystemDepartmentReference | None
    board: BoardReference | None
    serviceType: ServiceTypeReference | None
    defaultFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class AgreementTypeInfo(SparkModel):
    id: int | None
    name: str | None
    inactiveFlag: bool | None
    applicationUnits: AgreementApplicationUnits | None
    billingTerms: BillingTermsReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class AgreementTypePrefixSuffixOption(str, Enum):
    Prefix = 'Prefix'
    Suffix = 'Suffix'


class AgreementTypeReference(ActivityReference):
    pass


class AgreementTypeWorkRole(SparkModel):
    id: int | None
    type: AgreementTypeReference | None
    workRole: WorkRoleReference | None
    effectiveDate: datetime | None
    endingDate: datetime | None
    rate: float | None
    rateType: AgreementTypeWorkRoleRateType
    limitTo: float | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class AgreementTypeWorkRoleExclusion(SparkModel):
    id: int | None
    type: AgreementTypeReference | None
    workRole: WorkRoleReference
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class AgreementTypeWorkRoleInfo(SparkModel):
    id: int | None
    type: AgreementTypeReference | None
    workRole: WorkRoleReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class AgreementTypeWorkRoleRateType(str, Enum):
    AdjAmount = 'AdjAmount'
    Custom = 'Custom'
    Multiplier = 'Multiplier'


class AgreementTypeWorkType(SparkModel):
    id: int | None
    type: AgreementTypeReference | None
    workType: WorkTypeReference | None
    effectiveDate: datetime | None
    endingDate: datetime | None
    rate: float | None
    rateType: AgreementTypeWorkRoleRateType
    billTime: ActivityStopwatchBillableOption
    hoursMin: float | None
    hoursMax: float | None
    roundBillHours: float | None
    overageRate: float | None
    overageRateType: AgreementTypeWorkRoleRateType
    limitTo: float | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class AgreementTypeWorkTypeExclusion(SparkModel):
    id: int | None
    type: AgreementTypeReference | None
    workType: WorkTypeReference
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class AgreementWorkRole(SparkModel):
    id: int | None
    workRole: WorkRoleReference | None
    locationId: int | None
    location: OwnerLevelReference | None
    rateType: AgreementTypeWorkRoleRateType
    rate: float | None
    limitTo: float | None
    effectiveDate: datetime | None
    endingDate: datetime | None
    agreementId: int | None
    agreement: AgreementReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class AgreementWorkRoleExclusion(SparkModel):
    id: int | None
    workRole: WorkRoleReference
    agreementId: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class AgreementWorkType(SparkModel):
    id: int | None
    workType: WorkTypeReference | None
    location: OwnerLevelReference | None
    locationId: int | None
    rateType: AgreementTypeWorkRoleRateType
    billTime: ActivityStopwatchBillableOption
    rate: float | None
    hoursMax: float | None
    hoursMin: float | None
    roundBillHours: float | None
    overageRate: float | None
    overageRateType: AgreementTypeWorkRoleRateType | None
    agreementLimit: float | None
    site: SiteReference | None
    effectiveDate: datetime | None
    endingDate: datetime | None
    agreement: AgreementReference | None
    agreementId: int | None
    company: CompanyReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class AgreementWorkTypeExclusion(SparkModel):
    id: int | None
    workType: WorkTypeReference
    agreementId: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class AllowedFileType(SparkModel):
    id: int | None
    fileType: str
    sizeLimit: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class AllowedOrigin(SparkModel):
    id: int | None
    origin: Annotated[str, Field(description=' Max length: 2000;')]
    description: Annotated[str, Field(description=' Max length: 2000;')]
    lastUpdateUtc: datetime | None
    updatedBy: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ApiMember(SparkModel):
    id: int | None
    identifier: Annotated[str, Field(description=' Max length: 15;')]
    name: Annotated[
        str | None, Field(description=' Max length: 30; Required On Updates;')
    ]
    emailAddress: Annotated[str | None, Field(description=' Max length: 250;')]
    inactiveFlag: bool | None
    inactiveDate: datetime | None
    timeZone: TimeZoneSetupReference | None
    securityRole: SecurityRoleReference | None
    structureLevel: StructureReference | None
    securityLocation: SystemLocationReference | None
    defaultLocation: SystemLocationReference | None
    defaultDepartment: SystemDepartmentReference | None
    salesDefaultLocation: SystemLocationReference | None
    serviceDefaultBoard: BoardReference | None
    notes: str | None
    excludedServiceBoardIds: list[int] | None
    blockPriceFlag: bool | None
    blockCostFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ApiRequest(SparkModel):
    id: int | None
    externalId: str | None
    parentId: int | None
    grandParentId: int | None
    entity: IRestIdentifiedItem | None
    filters: FilterValues | None
    page: PageValues | None
    fields: str | None
    miscProperties: dict[str, dict[str, Any_aliased]] | None
    memberContext: str | None
    updateOnlyCesProperties: bool | None


class AuditTrailEntry(SparkModel):
    text: str | None
    enteredDate: str | None
    enteredBy: str | None
    auditType: str | None
    auditSubType: str | None
    auditSource: str | None


class AuthAnvil(SparkModel):
    id: int | None
    serverLocationUrl: str
    siteId: int
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class AutoSyncTime(SparkModel):
    id: int | None
    syncTime: str
    timeZone: TimeZoneSetupReference
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class AutomateScriptReference(ActivityReference):
    pass


class BatchEntry(SparkModel):
    id: int | None
    accountType: str | None
    name: str | None
    accountNumber: str | None
    debit: float | None
    credit: float | None
    cost: float | None
    item: str | None
    salesCode: str | None
    costOfGoodsSoldAccountNumber: str | None
    invoice: InvoiceReference | None
    purchaseOrder: PurchaseOrderReference | None
    lineItem: PurchaseOrderLineItemReference | None
    transfer: str | None
    expense: ExpenseDetailReference | None
    adjustmentDetail: AdjustmentDetailReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class BatchReference(ActivityReference):
    pass


class BillableOptionsInfo(SparkModel):
    id: int | None
    optionId: str | None
    billableFlag: bool | None
    invoiceFlag: bool | None
    timeFlag: bool | None
    expenseFlag: bool | None
    productFlag: bool | None
    defaultFlag: bool | None
    includeNoDefaultFlag: bool | None
    name: str | None
    enumId: str | None


class BillingCycle(SparkModel):
    id: int | None
    identifier: Annotated[str, Field(description=' Max length: 5;')]
    name: Annotated[str, Field(description=' Max length: 50;')]
    defaultFlag: bool | None
    billingOptions: BillingCycleBillingOptions
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class BillingCycleBillingOptions(str, Enum):
    BiMonthly = 'BiMonthly'
    BiWeekly = 'BiWeekly'
    Monthly = 'Monthly'
    NotRecurring = 'NotRecurring'
    Quarterly = 'Quarterly'
    SemiAnnual = 'SemiAnnual'
    Weekly = 'Weekly'
    Yearly = 'Yearly'


class BillingCycleInfo(AddressFormatInfo):
    pass


class BillingCycleReference(ActivityReference):
    pass


class BillingDeliveryReference(ActivityReference):
    pass


class BillingSetup(SparkModel):
    id: int | None
    remitName: Annotated[str, Field(description=' Max length: 50;')]
    location: SystemLocationReference
    addressOne: Annotated[str | None, Field(description=' Max length: 50;')]
    addressTwo: Annotated[str | None, Field(description=' Max length: 50;')]
    city: Annotated[str | None, Field(description=' Max length: 50;')]
    state: StateReference | None
    zip: Annotated[str | None, Field(description=' Max length: 12;')]
    country: CountryReference | None
    phone: Annotated[str | None, Field(description=' Max length: 15;')]
    invoiceTitle: Annotated[str, Field(description=' Max length: 50;')]
    payableName: Annotated[str, Field(description=' Max length: 50;')]
    topcomment: Annotated[str | None, Field(description=' Max length: 4000;')]
    invoiceFooter: Annotated[str | None, Field(description=' Max length: 500;')]
    quoteFooter: Annotated[str | None, Field(description=' Max length: 1000;')]
    overallInvoiceDefault: InvoiceTemplateReference
    standardInvoiceActual: InvoiceTemplateReference | None
    standardInvoiceFixed: InvoiceTemplateReference | None
    progressInvoice: InvoiceTemplateReference | None
    agreementInvoice: InvoiceTemplateReference | None
    creditMemoInvoice: InvoiceTemplateReference | None
    downPaymentInvoice: InvoiceTemplateReference | None
    miscInvoice: InvoiceTemplateReference | None
    salesOrderInvoice: InvoiceTemplateReference | None
    excludeDoNotBillTimeFlag: bool | None
    excludeDoNotBillExpenseFlag: bool | None
    excludeDoNotBillProductFlag: bool | None
    prefixSuffixFlag: AgreementTypePrefixSuffixOption | None
    prefixSuffixText: Annotated[str | None, Field(description=' Max length: 5;')]
    chargeAdjToFirmFlag: bool | None
    noWatermarkFlag: bool | None
    displayTaxFlag: bool | None
    allowRestrictedDeptOnRoutingFlag: bool | None
    billTicketSeparatelyFlag: bool | None
    billTicketCompleteFlag: bool | None
    billTicketUnapprovedFlag: bool | None
    billProjectCompleteFlag: bool | None
    billProjectUnapprovedFlag: bool | None
    progressTimeFlag: bool | None
    restrictProjectDownpaymentFlag: bool | None
    billSalesOrderCompleteFlag: bool | None
    billProductAfterShipFlag: bool | None
    restrictDownpaymentFlag: bool | None
    copyNonServiceProductsFlag: bool | None
    copyServiceProductsFlag: bool | None
    copyAgreementProductsFlag: bool | None
    printLogoFlag: bool | None
    readReceiptFlag: bool | None
    deliveryReceiptFlag: bool | None
    attachXmlInvoiceFlag: bool | None
    disableRoutingEmailFlag: bool | None
    emailTemplate: EmailTemplateReference
    localizedCountry: CountryReference | None
    businessNumber: Annotated[str | None, Field(description=' Max length: 50;')]
    currency: CurrencyReference | None
    customLabel: Annotated[str | None, Field(description=' Max length: 50;')]
    customText: Annotated[str | None, Field(description=' Max length: 500;')]
    companyCode: Annotated[str | None, Field(description=' Max length: 250;')]
    excludeAvalaraFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class BillingSetupInfo(SparkModel):
    id: int | None
    remitName: str | None
    location: SystemLocationReference | None
    currency: CurrencyReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class BillingSetupReference(ActivityReference):
    pass


class BillingSetupRouting(SparkModel):
    id: int | None
    sequenceNumber: int
    invoiceRule: BillingSetupRoutingInvoiceRule
    routingRule: BillingSetupRoutingRoutingRule
    member: MemberReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class BillingSetupRoutingInvoiceRule(str, Enum):
    All = 'All'
    Standard = 'Standard'
    Project = 'Project'
    Agreement = 'Agreement'


class BillingSetupRoutingRoutingRule(str, Enum):
    Account = 'Account'
    Territory = 'Territory'
    Creator = 'Creator'
    Department = 'Department'
    Location = 'Location'
    Member = 'Member'
    Project = 'Project'
    Sales = 'Sales'


class BillingStatus(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 30;')]
    sortOrder: int | None
    defaultFlag: bool | None
    closedFlag: bool | None
    inactiveFlag: bool | None
    sentFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class BillingStatusInfo(SparkModel):
    id: int | None
    name: str | None
    sortOrder: int | None
    inactiveFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class BillingStatusReference(SparkModel):
    id: int | None
    name: str | None
    isClosed: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class BillingTerm(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    defaultFlag: bool | None
    dueDays: int
    termsXref: Annotated[str | None, Field(description=' Max length: 50;')]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class BillingTermInfo(AddressFormatInfo):
    pass


class BillingTermsReference(ActivityReference):
    pass


class BillingUnitReference(ActivityReference):
    pass


class Board(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    location: SystemLocationReference
    department: SystemDepartmentReference
    inactiveFlag: bool | None
    signOffTemplate: ServiceSignoffReference | None
    sendToContactFlag: bool | None
    contactTemplate: ServiceEmailTemplateReference | None
    sendToResourceFlag: bool | None
    resourceTemplate: ServiceEmailTemplateReference | None
    projectFlag: bool | None
    showDependenciesFlag: Annotated[
        bool | None, Field(description='This field only shows if it is Project Board.')
    ]
    showEstimatesFlag: Annotated[
        bool | None, Field(description='This field only shows if it is Project Board.')
    ]
    boardIcon: DocumentReference | None
    billTicketsAfterClosedFlag: bool | None
    billTicketSeparatelyFlag: bool | None
    billUnapprovedTimeExpenseFlag: bool | None
    overrideBillingSetupFlag: bool | None
    dispatchMember: MemberReference | None
    serviceManagerMember: MemberReference | None
    dutyManagerMember: MemberReference | None
    oncallMember: MemberReference | None
    workRole: WorkRoleReference | None
    workType: WorkTypeReference | None
    billTime: ActivityStopwatchBillableOption | None
    billExpense: ActivityStopwatchBillableOption | None
    billProduct: ActivityStopwatchBillableOption | None
    autoCloseStatus: ServiceStatusReference | None
    autoAssignNewTicketsFlag: bool | None
    autoAssignNewECTicketsFlag: bool | None
    autoAssignNewPortalTicketsFlag: bool | None
    discussionsLockedFlag: bool | None
    timeEntryLockedFlag: bool | None
    notifyEmailFrom: Annotated[str | None, Field(description=' Max length: 50;')]
    notifyEmailFromName: Annotated[str | None, Field(description=' Max length: 60;')]
    closedLoopDiscussionsFlag: bool | None
    closedLoopResolutionFlag: bool | None
    closedLoopInternalAnalysisFlag: bool | None
    timeEntryDiscussionFlag: bool | None
    timeEntryResolutionFlag: bool | None
    timeEntryInternalAnalysisFlag: bool | None
    problemSort: BoardProblemSort | None
    resolutionSort: BoardProblemSort | None
    internalAnalysisSort: BoardProblemSort | None
    emailConnectorAllowReopenClosedFlag: bool | None
    emailConnectorReopenStatus: ServiceStatusReference | None
    emailConnectorReopenResourcesFlag: Annotated[
        bool | None,
        Field(
            description='This field can only be set when emailConnectorAllowReopenClosed is true.'
        ),
    ]
    emailConnectorNewTicketNoMatchFlag: Annotated[
        bool | None,
        Field(
            description='This field can only be set when emailConnectorAllowReopenClosed is true.'
        ),
    ]
    emailConnectorNeverReopenByDaysFlag: Annotated[
        bool | None,
        Field(
            description='This field can only be set when emailConnectorAllowReopenClosed is true.'
        ),
    ]
    emailConnectorReopenDaysLimit: Annotated[
        int | None,
        Field(
            description='This field can only be set when emailConnectorNeverReopenByDaysFlag and emailConnectorAllowReopenClosed are both true\n            This field is required when emailConnectorNeverReopenByDaysFlag is true.'
        ),
    ]
    emailConnectorNeverReopenByDaysClosedFlag: Annotated[
        bool | None,
        Field(
            description='This field can only be set when emailConnectorAllowReopenClosed is true.'
        ),
    ]
    emailConnectorReopenDaysClosedLimit: Annotated[
        int | None,
        Field(
            description='This field can only be set when emailConnectorNeverReopenByDaysClosedFlag and emailConnectorAllowReopenClosed are both true\n            This field is required when emailConnectorNeverReopenByDaysClosedFlag is true.'
        ),
    ]
    useMemberDisplayNameFlag: bool | None
    sendToCCFlag: bool | None
    autoAssignTicketOwnerFlag: bool | None
    autoAssignLimitFlag: bool | None
    autoAssignLimitAmount: Annotated[
        int | None,
        Field(
            description='This field can only be set when autoAssignLimitFlag is true'
        ),
    ]
    closedLoopAllFlag: bool | None
    percentageCalculation: BoardPercentageCalculation | None
    allSort: BoardProblemSort | None
    markFirstNoteIssueFlag: bool | None
    restrictBoardByDefaultFlag: bool | None
    sendToBundledFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class BoardAutoAssignResource(SparkModel):
    id: int | None
    notifyWho: NotificationRecipientReference
    member: MemberReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class BoardAutoTemplate(SparkModel):
    id: int | None
    type: ServiceTypeReference
    subtype: ServiceSubTypeReference
    item: ServiceItemReference
    serviceTemplate: ServiceTemplateReference
    board: BoardReference | None
    summarySetting: BoardAutoTemplateSummarySetting | None
    discussionSetting: BoardAutoTemplateSummarySetting | None
    internalAnalysisSetting: BoardAutoTemplateSummarySetting | None
    resolutionSetting: BoardAutoTemplateSummarySetting | None
    tasksSetting: BoardAutoTemplateSummarySetting | None
    documentsSetting: BoardAutoTemplateSummarySetting | None
    resourcesSetting: BoardAutoTemplateSummarySetting | None
    budgetHoursSetting: BoardAutoTemplateSummarySetting | None
    financeInformationSetting: BoardAutoTemplateSummarySetting | None
    sendNotesAsEmailSetting: BoardAutoTemplateSummarySetting | None
    impactUrgencySetting: BoardAutoTemplateSummarySetting | None
    templatePrioritySetting: BoardAutoTemplateSummarySetting | None
    autoApplyFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class BoardAutoTemplateSummarySetting(str, Enum):
    Append = 'Append'
    Overwrite = 'Overwrite'
    Ignore = 'Ignore'


class BoardCopy(SparkModel):
    id: int
    name: Annotated[str, Field(description=' Max length: 50;')]


class BoardDefault(SparkModel):
    id: int | None
    board: BoardReference
    serviceType: ServiceTypeReference | None
    defaultFlag: bool | None
    agreementId: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class BoardExcludedMember(SparkModel):
    id: int | None
    memberId: int | None
    boardId: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class BoardInfo(SparkModel):
    id: int | None
    name: str | None
    location: SystemLocationReference | None
    department: SystemDepartmentReference | None
    projectFlag: bool | None
    inactiveFlag: bool | None
    closedLoopDiscussionsFlag: bool | None
    closedLoopInternalAnalysisFlag: bool | None
    closedLoopResolutionFlag: bool | None
    closedLoopAllFlag: bool | None
    overrideBillingSetupFlag: bool | None
    billTicketsAfterClosedFlag: bool | None
    billUnapprovedTimeExpenseFlag: bool | None
    billTime: ActivityStopwatchBillableOption | None
    billExpense: ActivityStopwatchBillableOption | None
    billProduct: ActivityStopwatchBillableOption | None
    problemSort: BoardProblemSort | None
    internalAnalysisSort: BoardProblemSort | None
    resolutionSort: BoardProblemSort | None
    allSort: BoardProblemSort | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class BoardItem(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    inactiveFlag: bool | None
    board: BoardReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class BoardItemAssociation(SparkModel):
    id: int
    subTypeAssociationIds: Annotated[
        list[int] | None,
        Field(
            description='If addAllSubTypesFlag and removeAllSubTypesFlag are both false, this field is required.'
        ),
    ]
    addAllSubTypesFlag: bool | None
    removeAllSubTypesFlag: bool | None
    item: ServiceItemReference | None
    board: BoardReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class BoardNotification(SparkModel):
    id: int | None
    notifyWho: NotificationRecipientReference
    member: MemberReference | None
    email: Annotated[str | None, Field(description=' Max length: 50;')]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class BoardPercentageCalculation(str, Enum):
    ActualHours = 'ActualHours'
    Manual = 'Manual'
    ClosedPhases = 'ClosedPhases'
    ClosedTickets = 'ClosedTickets'


class BoardProblemSort(str, Enum):
    Ascending = 'Ascending'
    Descending = 'Descending'


class BoardReference(ActivityReference):
    pass


class BoardSkillMapping(SparkModel):
    id: int | None
    type: ServiceTypeReference
    subType: ServiceSubTypeReference | None
    item: ServiceItemReference | None
    skillCategory: SkillCategoryReference
    skill: SkillReference
    board: BoardReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class BoardStatus(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    board: BoardReference | None
    sortOrder: int | None
    displayOnBoard: bool | None
    inactive: bool | None
    closedStatus: bool | None
    timeEntryNotAllowed: bool | None
    roundRobinCatchall: bool | None
    defaultFlag: bool | None
    escalationStatus: BoardStatusEscalationStatus | None
    customerPortalDescription: Annotated[
        str | None, Field(description=' Max length: 500;')
    ]
    customerPortalFlag: bool | None
    emailTemplate: ServiceEmailTemplateReference | None
    statusIndicator: StatusIndicatorReference | None
    customStatusIndicatorName: Annotated[
        str | None, Field(description=' Max length: 30;')
    ]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    saveTimeAsNote: bool | None


class BoardStatusEscalationStatus(str, Enum):
    NotResponded = 'NotResponded'
    Responded = 'Responded'
    ResolutionPlan = 'ResolutionPlan'
    Resolved = 'Resolved'
    NoEscalation = 'NoEscalation'


class BoardStatusInfo(SparkModel):
    id: int | None
    name: str | None
    sortOrder: int | None
    defaultFlag: bool | None
    inactiveFlag: bool | None
    closedFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class BoardStatusNotification(SparkModel):
    id: int | None
    notifyWho: NotificationRecipientReference
    status: ServiceStatusReference | None
    member: MemberReference | None
    email: Annotated[
        str | None,
        Field(
            description='Service Status Notification email must be entered if the notify type is "Email Address". Max length: 255;'
        ),
    ]
    workflowStep: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class BoardSubType(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    inactiveFlag: bool | None
    typeAssociationIds: list[int] | None
    addAllTypesFlag: bool | None
    removeAllTypesFlag: bool | None
    board: BoardReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class BoardSubTypeInfo(SparkModel):
    id: int | None
    name: str | None
    inactiveFlag: bool | None
    typeAssociationIds: list[int] | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class BoardTeam(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 30;')]
    teamLeader: MemberReference
    members: list[int] | None
    defaultFlag: bool | None
    notifyOnTicketDelete: bool | None
    defaultRoundRobinFlag: bool | None
    roundRobinFlag: bool | None
    boardId: int | None
    locationId: int | None
    businessUnitId: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class BoardTeamInfo(ActivityReference):
    pass


class BoardType(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    category: BoardTypeCategory | None
    defaultFlag: bool | None
    inactiveFlag: bool | None
    requestForChangeFlag: bool | None
    integrationXref: Annotated[str | None, Field(description=' Max length: 50;')]
    skillCategory: SkillCategoryReference | None
    skill: SkillReference | None
    board: BoardReference | None
    location: SystemLocationReference | None
    department: SystemDepartmentReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class BoardTypeCategory(str, Enum):
    Reactive = 'Reactive'
    Proactive = 'Proactive'


class BoardTypeInfo(SparkModel):
    id: int | None
    name: str | None
    board: BoardReference | None
    inactiveFlag: bool | None
    defaultFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class BoardTypeSubTypeItemAssociation(SparkModel):
    id: int | None
    type: ServiceTypeReference | None
    subType: ServiceSubTypeReference | None
    item: ServiceItemReference | None
    board: BoardReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class BulkResult(SparkModel):
    payload: list[ResultInfo] | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class BundleRequest(SparkModel):
    sequenceNumber: int | None
    resourceType: str | None
    version: str | None
    apiRequest: ApiRequest | None


class BundleRequestsCollection(SparkModel):
    requests: list[BundleRequest]


class BundleResult(SparkModel):
    sequenceNumber: int | None
    resourceType: str | None
    entities: list[IRestIdentifiedItem] | None
    count: int | None
    version: str | None
    success: bool | None
    statusCode: int | None
    error: ErrorResponseMessage | None


class BundleResultsCollection(SparkModel):
    results: list[BundleResult] | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class Calendar(SparkModel):
    id: int | None
    name: str
    holidayList: HolidayListReference | None
    mondayStartTime: str | None
    mondayEndTime: str | None
    tuesdayStartTime: str | None
    tuesdayEndTime: str | None
    wednesdayStartTime: str | None
    wednesdayEndTime: str | None
    thursdayStartTime: str | None
    thursdayEndTime: str | None
    fridayStartTime: str | None
    fridayEndTime: str | None
    saturdayStartTime: str | None
    saturdayEndTime: str | None
    sundayStartTime: str | None
    sundayEndTime: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CalendarInfo(SparkModel):
    id: int | None
    name: str | None
    holidayList: HolidayListReference | None
    mondayStartTime: str | None
    mondayEndTime: str | None
    tuesdayStartTime: str | None
    tuesdayEndTime: str | None
    wednesdayStartTime: str | None
    wednesdayEndTime: str | None
    thursdayStartTime: str | None
    thursdayEndTime: str | None
    fridayStartTime: str | None
    fridayEndTime: str | None
    saturdayStartTime: str | None
    saturdayEndTime: str | None
    sundayStartTime: str | None
    sundayEndTime: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CalendarReference(ActivityReference):
    pass


class CalendarSetupReference(SparkModel):
    id: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CallbackEntry(SparkModel):
    id: int | None
    description: Annotated[str | None, Field(description=' Max length: 100;')]
    url: Annotated[str, Field(description=' Required Reference')]
    objectId: Annotated[int, Field(description=' Required Reference')]
    type: Annotated[str, Field(description=' Required Reference')]
    level: Annotated[str, Field(description=' Required Reference')]
    memberId: int | None
    payloadVersion: str | None
    inactiveFlag: bool | None
    isSoapCallbackFlag: bool | None
    isSelfSuppressedFlag: bool | None
    connectWiseID: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class Campaign(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    type: CampaignTypeReference
    subType: CampaignSubTypeReference
    status: CampaignStatusReference | None
    startDate: datetime
    endDate: datetime | None
    locationId: int | None
    member: MemberReference | None
    inactive: bool | None
    inactiveDaysAfterEnd: int | None
    notes: str | None
    defaultGroup: GroupReference | None
    marketingManagerDefaultTrackId: int | None
    opportunityDefaultTrackId: int | None
    impressions: int | None
    budgetRevenue: float | None
    budgetCost: float | None
    actualCost: float | None
    budgetGrossMargin: float | None
    budgetROI: float | None
    actualRevenue: float | None
    actualGrossMargin: float | None
    actualROI: float | None
    emailsSent: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CampaignAudit(SparkModel):
    id: int | None
    emailsSent: int
    emailsUnsent: int | None
    documentsCreated: int | None
    emailSubject: Annotated[str | None, Field(description=' Max length: 1000;')]
    group: GroupReference | None
    campaignId: int | None
    createdBy: str | None
    dateCreated: str | None


class CampaignReference(ActivityReference):
    pass


class CampaignStatus(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 100;')]
    defaultFlag: bool | None
    inactiveFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CampaignStatusReference(ActivityReference):
    pass


class CampaignSubTypeReference(ActivityReference):
    pass


class CampaignType(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 100;')]
    defaultFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CampaignTypeInfo(ActivityReference):
    pass


class CampaignTypeReference(ActivityReference):
    pass


class CatalogComponent(SparkModel):
    id: int | None
    sequenceNumber: int | None
    quantity: float
    catalogItem: CatalogItemReference
    hidePriceFlag: bool | None
    hideItemIdentifierFlag: bool | None
    hideDescriptionFlag: bool | None
    hideQuantityFlag: bool | None
    hideExtendedPriceFlag: bool | None
    parentCatalogItem: CatalogItemReference | None
    price: float | None
    cost: float | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CatalogInventory(SparkModel):
    id: int | None
    catalogItem: CatalogItemReference | None
    warehouse: WarehouseReference | None
    warehouseBin: WarehouseBinReference | None
    onHand: int | None
    serialNumbers: list[OnHandSerialNumberReference] | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CatalogItem(SparkModel):
    id: int | None
    identifier: Annotated[str, Field(description=' Max length: 75;')]
    description: Annotated[str, Field(description=' Max length: 60;')]
    inactiveFlag: bool | None
    subcategory: ProductSubCategoryReference
    type: ProductTypeReference
    productClass: Annotated[
        CatalogItemProductClass | None, Field(description='Defaults to Non-Inventory.')
    ]
    serializedFlag: bool | None
    serializedCostFlag: bool | None
    phaseProductFlag: bool | None
    unitOfMeasure: UnitOfMeasureReference | None
    minStockLevel: int | None
    price: float | None
    cost: float | None
    priceAttribute: CatalogItemPriceAttribute | None
    taxableFlag: bool | None
    dropShipFlag: bool | None
    specialOrderFlag: bool | None
    customerDescription: Annotated[str, Field(description=' Max length: 6000;')]
    manufacturer: ManufacturerReference | None
    manufacturerPartNumber: Annotated[str | None, Field(description=' Max length: 50;')]
    vendor: CompanyReference | None
    vendorSku: Annotated[str | None, Field(description=' Max length: 50;')]
    notes: str | None
    integrationXRef: Annotated[str | None, Field(description=' Max length: 50;')]
    sla: SLAReference | None
    entityType: EntityTypeReference | None
    recurringFlag: bool | None
    recurringRevenue: float | None
    recurringCost: float | None
    recurringOneTimeFlag: bool | None
    recurringBillCycle: BillingCycleReference | None
    recurringCycleType: AgreementInvoicingCycle | None
    calculatedPriceFlag: bool | None
    calculatedCostFlag: bool | None
    category: ProductCategoryReference | None
    calculatedPrice: float | None
    calculatedCost: float | None
    billableOption: ActivityStopwatchBillableOption | None
    connectWiseID: str | None
    agreementType: AgreementTypeReference | None
    markupPercentage: float | None
    markupFlag: bool | None
    autoUpdateUnitCostFlag: bool | None
    autoUpdateUnitPriceFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    customFields: list[CustomFieldValue] | None


class CatalogItemInfo(SparkModel):
    id: int | None
    identifier: str | None
    description: str | None
    inactiveFlag: bool | None
    productClass: CatalogItemProductClass | None
    serializedCostFlag: bool | None
    price: float | None
    cost: float | None
    taxableFlag: bool | None
    dropShipFlag: bool | None
    specialOrderFlag: bool | None
    customerDescription: str | None
    manufacturerPartNumber: str | None
    vendorSku: str | None
    billableOption: ActivityStopwatchBillableOption | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CatalogItemPriceAttribute(str, Enum):
    FixedFee = 'FixedFee'
    NotToExceed = 'NotToExceed'
    OverrideRate = 'OverrideRate'
    TimeAndMaterials = 'TimeAndMaterials'


class CatalogItemProductClass(str, Enum):
    Agreement = 'Agreement'
    Bundle = 'Bundle'
    Inventory = 'Inventory'
    NonInventory = 'NonInventory'
    Service = 'Service'


class CatalogItemReference(SparkModel):
    id: int | None
    identifier: str | None
    name: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CatalogPricing(SparkModel):
    catalogItem: CatalogItemReference | None
    company: CompanyReference | None
    location: SystemLocationReference | None
    quantity: int | None
    date: str | None
    price: float | None


class CatalogVendors(SparkModel):
    id: int | None
    catalogItemId: int | None
    vendorId: int | None
    vendorSku: Annotated[str | None, Field(description=' Max length: 50;')]
    isPreferredVendor: bool | None
    vendorName: str | None


class Category(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    inactiveFlag: bool | None
    priceLevelXref: Annotated[str | None, Field(description=' Max length: 10;')]
    integrationXref: Annotated[str | None, Field(description=' Max length: 50;')]
    locationIds: list[int] | None
    defaultFlag: bool | None
    addAllLocations: bool | None
    removeAllLocations: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CategoryInfo(SparkModel):
    id: int | None
    name: str | None
    inactiveFlag: bool | None
    defaultFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class Certification(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    company: CompanyReference
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CertificationReference(ActivityReference):
    pass


class ChangeOrder(SparkModel):
    id: int | None
    purchaseHeaderRecId: int
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ChargeCode(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    company: CompanyReference
    location: SystemLocationReference | None
    department: SystemDepartmentReference | None
    billTime: ActivityStopwatchBillableOption | None
    expenseEntryFlag: bool | None
    allowAllExpenseTypeFlag: bool | None
    timeEntryFlag: bool | None
    workType: WorkTypeReference | None
    workRole: WorkRoleReference | None
    integrationXref: Annotated[str | None, Field(description=' Max length: 50;')]
    expenseTypeIds: list[int] | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ChargeCodeExpenseType(SparkModel):
    id: int | None
    type: ExpenseTypeReference
    chargeCode: ChargeCodeReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ChargeCodeInfo(SparkModel):
    id: int | None
    name: str | None
    location: SystemLocationReference | None
    department: SystemDepartmentReference | None
    expenseEntryFlag: bool | None
    allowAllExpenseTypeFlag: bool | None
    timeEntryFlag: bool | None
    workType: WorkTypeReference | None
    workRole: WorkRoleReference | None
    expenseTypeIds: list[int] | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ChargeCodeReference(ActivityReference):
    pass


class Classification(SparkModel):
    id: int | None
    name: str | None
    multiplier: float | None
    defaultFlag: bool | None
    companyFlag: bool | None
    employeeFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ClassificationReference(ActivityReference):
    pass


class ClearPickerRequest(SparkModel):
    member: MemberReference | None
    type: ClearPickerRequestType | None


class ClearPickerRequestType(str, Enum):
    Company = 'Company'
    Vendor = 'Vendor'


class ClosedInvoice(SparkModel):
    id: int | None
    status: BillingStatusReference | None
    internalNotes: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class Code(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    description: str
    boardId: int | None
    locationId: int | None
    businessUnitId: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class Commission(SparkModel):
    id: int | None
    member: MemberReference
    commissionPercent: float | None
    dateStart: datetime | None
    dateEnd: datetime | None
    location: SystemLocationReference | None
    department: SystemDepartmentReference | None
    company: CompanyReference | None
    site: SiteReference | None
    agreement: AgreementReference | None
    project: ProjectReference | None
    serviceBoard: BoardReference | None
    ticket: TicketReference | None
    territory: SystemLocationReference | None
    billingMethod: CommissionBillingMethod | None
    serviceType: ServiceTypeReference | None
    projectBoard: ProjectBoardReference | None
    projectType: ProjectTypeReference | None
    agreementType: AgreementTypeReference | None
    numberOfMonths: int | None
    productCategory: ProductCategoryReference | None
    productSubCategory: ProductSubCategoryReference | None
    item: IvItemReference | None
    commissionBasis: CommissionCommissionBasis | None
    invoiceOption: CommissionInvoiceOption | None
    servicesFlag: bool | None
    agreementsFlag: bool | None
    productsFlag: bool | None
    myOpportunitiesFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CommissionBillingMethod(str, Enum):
    Agreement = 'Agreement'
    CreditMemo = 'CreditMemo'
    DownPayment = 'DownPayment'
    Miscellaneous = 'Miscellaneous'
    Progress = 'Progress'
    Standard = 'Standard'


class CommissionCommissionBasis(str, Enum):
    GrossProfit = 'GrossProfit'
    SalesAmount = 'SalesAmount'


class CommissionInvoiceOption(str, Enum):
    AllInvoices = 'AllInvoices'
    PaidInvoices = 'PaidInvoices'


class CommunicationType(SparkModel):
    id: int | None
    description: str
    phoneFlag: Annotated[
        bool | None,
        Field(
            description='Gets or sets at least one flag is required to be true -- phone, fax, or email.'
        ),
    ]
    faxFlag: Annotated[
        bool | None,
        Field(
            description='Gets or sets at least one flag is required to be true -- phone, fax, or email.'
        ),
    ]
    emailFlag: Annotated[
        bool | None,
        Field(
            description='Gets or sets at least one flag is required to be true -- phone, fax, or email.'
        ),
    ]
    defaultFlag: bool | None
    exchangeXref: Annotated[str | None, Field(description=' Max length: 50;')]
    iphoneXref: Annotated[str | None, Field(description=' Max length: 50;')]
    androidXref: Annotated[str | None, Field(description=' Max length: 50;')]
    googleXref: Annotated[str | None, Field(description=' Max length: 50;')]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CommunicationTypeInfo(SparkModel):
    id: int | None
    description: str | None
    phoneFlag: bool | None
    faxFlag: bool | None
    emailFlag: bool | None
    defaultFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CommunicationTypeReference(ActivityReference):
    pass


class Company(SparkModel):
    id: int | None
    identifier: Annotated[str, Field(description=' Max length: 30;')]
    name: Annotated[str, Field(description=' Max length: 50;')]
    status: CompanyStatusReference | None
    addressLine1: Annotated[
        str | None,
        Field(
            description='Gets or sets at least one address field is required -- addressLine1, addressLine2, city, state, zip and/or country. Max length: 50;'
        ),
    ]
    addressLine2: Annotated[
        str | None,
        Field(
            description='Gets or sets at least one address field is required -- addressLine1, addressLine2, city, state, zip and/or country. Max length: 50;'
        ),
    ]
    city: Annotated[
        str | None,
        Field(
            description='Gets or sets at least one address field is required -- addressLine1, addressLine2, city, state, zip and/or country. Max length: 50;'
        ),
    ]
    state: Annotated[
        str | None,
        Field(
            description='Gets or sets at least one address field is required -- addressLine1, addressLine2, city, state, zip and/or country. Max length: 50;'
        ),
    ]
    zip: Annotated[
        str | None,
        Field(
            description='Gets or sets at least one address field is required -- addressLine1, addressLine2, city, state, zip and/or country. Max length: 12;'
        ),
    ]
    country: CountryReference | None
    phoneNumber: Annotated[str | None, Field(description=' Max length: 30;')]
    faxNumber: Annotated[str | None, Field(description=' Max length: 30;')]
    website: Annotated[str | None, Field(description=' Max length: 255;')]
    territory: SystemLocationReference | None
    market: MarketDescriptionReference | None
    accountNumber: str | None
    defaultContact: ContactReference | None
    dateAcquired: datetime | None
    sicCode: SicCodeReference | None
    parentCompany: CompanyReference | None
    annualRevenue: float | None
    numberOfEmployees: int | None
    yearEstablished: int | None
    revenueYear: int | None
    ownershipType: OwnershipTypeReference | None
    timeZoneSetup: TimeZoneSetupReference | None
    leadSource: Annotated[str | None, Field(description=' Max length: 50;')]
    leadFlag: bool | None
    unsubscribeFlag: bool | None
    calendar: CalendarReference | None
    userDefinedField1: Annotated[str | None, Field(description=' Max length: 50;')]
    userDefinedField2: Annotated[str | None, Field(description=' Max length: 50;')]
    userDefinedField3: Annotated[str | None, Field(description=' Max length: 50;')]
    userDefinedField4: Annotated[str | None, Field(description=' Max length: 50;')]
    userDefinedField5: Annotated[str | None, Field(description=' Max length: 50;')]
    userDefinedField6: Annotated[str | None, Field(description=' Max length: 50;')]
    userDefinedField7: Annotated[str | None, Field(description=' Max length: 50;')]
    userDefinedField8: Annotated[str | None, Field(description=' Max length: 50;')]
    userDefinedField9: Annotated[str | None, Field(description=' Max length: 50;')]
    userDefinedField10: Annotated[str | None, Field(description=' Max length: 50;')]
    vendorIdentifier: str | None
    taxIdentifier: str | None
    taxCode: TaxCodeReference | None
    billingTerms: BillingTermsReference | None
    invoiceTemplate: InvoiceTemplateReference | None
    pricingSchedule: PricingScheduleReference | None
    companyEntityType: EntityTypeReference | None
    billToCompany: CompanyReference | None
    billingSite: SiteReference | None
    billingContact: ContactReference | None
    invoiceDeliveryMethod: BillingDeliveryReference | None
    invoiceToEmailAddress: str | None
    invoiceCCEmailAddress: str | None
    deletedFlag: bool | None
    dateDeleted: datetime | None
    deletedBy: str | None
    mobileGuid: UUID | None
    facebookUrl: str | None
    twitterUrl: str | None
    linkedInUrl: str | None
    currency: CurrencyReference | None
    territoryManager: MemberReference | None
    resellerIdentifier: str | None
    isVendorFlag: bool | None
    types: Annotated[
        list[CompanyTypeReference] | None,
        Field(
            description='Gets or sets integrer array of Company_Type_Recids to be assigned to company that can be passed in only during new company creation (post)\n            To update existing companies type, use the /company/companyTypeAssociations or /company/companies/{ID}/typeAssociations endpoints.'
        ),
    ]
    site: SiteReference | None
    integratorTags: list[str] | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    customFields: list[CustomFieldValue] | None


class CompanyCustomNote(SparkModel):
    id: int | None
    customNote: Annotated[str, Field(description=' Max length: 1500;')]
    status: CompanyStatusReference
    company: CompanyReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CompanyFinance(SparkModel):
    id: int | None
    billOverrideFlag: bool | None
    billSrFlag: bool | None
    billCompleteSrFlag: bool | None
    billUnapprovedSrFlag: bool | None
    billRestrictPmFlag: bool | None
    billCompletePmFlag: bool | None
    billUnapprovedPmFlag: bool | None
    emailTemplate: EmailTemplateReference | None
    company: CompanyReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    customFields: list[CustomFieldValue] | None


class CompanyGroup(SparkModel):
    id: Annotated[int | None, Field(description=' Required On Updates;')]
    group: GroupReference
    company: CompanyReference | None
    defaultContactFlag: bool | None
    allContactsFlag: bool | None
    removeAllContactsFlag: bool | None
    unsubscribeFlag: bool | None
    contactIds: list[int] | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CompanyInfo(SparkModel):
    id: int | None
    identifier: str | None
    name: str | None
    territory: SystemLocationReference | None
    defaultContact: ContactReference | None
    phoneNumber: str | None
    city: str | None
    site: SiteReference | None
    isVendorFlag: bool | None
    currency: CurrencyReference | None
    billToCompany: CompanyReference | None
    billingSite: SiteReference | None
    billingContact: ContactReference | None
    billingTerms: BillingTermsReference | None
    taxCode: TaxCodeReference | None
    deletedFlag: bool | None
    types: list[CompanyTypeReference] | None
    status: CompanyStatusReference | None
    noServiceFlag: bool | None
    addressLine1: str | None
    addressLine2: str | None
    state: str | None
    country: CountryReference | None
    zip: str | None
    leadFlag: bool | None
    faxNumber: str | None
    vendorIdentifier: str | None
    taxIdentifier: str | None
    facebookUrl: str | None
    twitterUrl: str | None
    linkedInUrl: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CompanyManagementSummary(SparkModel):
    id: int | None
    managementSolution: ManagementSolutionReference | None
    groupIdentifier: Annotated[str, Field(description=' Max length: 100;')]
    deviceType: Annotated[
        CompanyManagementSummaryDeviceType | None,
        Field(
            description='Gets or sets deviceType is required if the managementSolution is Legacy.'
        ),
    ]
    agreement: AgreementReference | None
    snmpMachines: int | None
    totalWorkstations: int | None
    totalServers: int | None
    totalWindowsServers: int | None
    totalWindowsWorkstations: int | None
    totalManagedMachines: int | None
    serversOffline: int | None
    serversDiskSpaceLow: int | None
    failedBackupJobs: int | None
    totalNotifications: int | None
    successfulBackupJobs: int | None
    serverAvailability: int | None
    virusesRemoved: int | None
    spywareItemsRemoved: int | None
    windowsPatchesInstalled: int | None
    diskCleanups: int | None
    diskDefragmentations: int | None
    fullyPatchedMachines: int | None
    missingOneTwoPatchesMachines: int | None
    missingThreeFivePatchesMachines: int | None
    missingMoreFivePatchesMachines: int | None
    missingUnscannedPatchesMachines: int | None
    alertsGenerated: str | None
    internetConnectivity: float | None
    diskSpaceCleanedMb: int | None
    missingSecurityPatches: str | None
    cpuUtilization: float | None
    memoryUtilization: float | None
    company: CompanyReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CompanyManagementSummaryDeviceType(str, Enum):
    WorkstationsAndServers = 'WorkstationsAndServers'
    BackupStats = 'BackupStats'
    Servers = 'Servers'
    Workstations = 'Workstations'


class CompanyMerge(SparkModel):
    toCompanyId: int
    name: CompanyMergeName | None
    identifier: CompanyMergeName | None
    status: CompanyMergeName | None
    type: CompanyMergeName | None
    primaryAddress: CompanyMergeName | None
    primaryContact: CompanyMergeName | None
    phone: CompanyMergeName | None
    fax: CompanyMergeName | None
    website: CompanyMergeName | None
    market: CompanyMergeName | None
    territory: CompanyMergeName | None
    revenue: CompanyMergeName | None
    revenueYear: CompanyMergeName | None
    numberOfEmployees: CompanyMergeName | None
    sicCode: CompanyMergeName | None
    dateAcquired: CompanyMergeName | None
    timeZone: CompanyMergeName | None
    sourceList: CompanyMergeName | None
    userDefinedField1: CompanyMergeName | None
    userDefinedField2: CompanyMergeName | None
    userDefinedField3: CompanyMergeName | None
    userDefinedField4: CompanyMergeName | None
    userDefinedField5: CompanyMergeName | None
    userDefinedField6: CompanyMergeName | None
    userDefinedField7: CompanyMergeName | None
    userDefinedField8: CompanyMergeName | None
    userDefinedField9: CompanyMergeName | None
    userDefinedField10: CompanyMergeName | None
    billingAddress: CompanyMergeName | None
    billingContact: CompanyMergeName | None
    taxCode: CompanyMergeName | None
    accountNumber: CompanyMergeName | None
    billingTerms: CompanyMergeName | None
    notes: CompanyMergeNotes | None
    sites: CompanyMergeNotes | None
    activities: CompanyMergeNotes | None
    opportunities: CompanyMergeNotes | None
    services: CompanyMergeNotes | None
    projects: CompanyMergeNotes | None
    contacts: CompanyMergeNotes | None
    documents: CompanyMergeNotes | None


class CompanyMergeName(str, Enum):
    From = 'From'
    To = 'To'


class CompanyMergeNotes(str, Enum):
    Discard = 'Discard'
    Merge = 'Merge'


class CompanyNote(SparkModel):
    id: int | None
    text: str
    type: NoteTypeReference | None
    flagged: bool | None
    enteredBy: str | None
    company: CompanyReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CompanyNoteType(SparkModel):
    id: int | None
    identifier: Annotated[str | None, Field(description=' Max length: 15;')]
    name: Annotated[str, Field(description=' Max length: 50;')]
    defaultFlag: bool | None
    importFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CompanyNoteTypeInfo(SparkModel):
    id: int | None
    identifier: str | None
    name: str | None
    defaultFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CompanyPickerItem(SparkModel):
    id: int | None
    member: MemberReference | None
    company: CompanyReference
    companyStatus: CompanyStatusReference | None
    companyType: CompanyTypeReference | None
    companySite: SiteReference | None
    companyLocation: SystemLocationReference | None
    companyCountry: CountryReference | None
    vendorPickerFlag: Annotated[
        bool | None,
        Field(
            description='Gets or sets if true, this record was created by the vendor picker component. Otherwise, the record was created by the company picker component.'
        ),
    ]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CompanyReference(CatalogItemReference):
    pass


class CompanySite(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    addressLine1: Annotated[str | None, Field(description=' Max length: 50;')]
    addressLine2: Annotated[str | None, Field(description=' Max length: 50;')]
    city: Annotated[str | None, Field(description=' Max length: 50;')]
    stateReference: StateReference | None
    zip: Annotated[str | None, Field(description=' Max length: 12;')]
    country: CountryReference | None
    addressFormat: str | None
    phoneNumber: Annotated[str | None, Field(description=' Max length: 30;')]
    phoneNumberExt: Annotated[str | None, Field(description=' Max length: 30;')]
    faxNumber: Annotated[str | None, Field(description=' Max length: 30;')]
    taxCode: TaxCodeReference | None
    entityType: EntityTypeReference | None
    expenseReimbursement: float | None
    primaryAddressFlag: bool | None
    defaultShippingFlag: bool | None
    defaultBillingFlag: bool | None
    defaultMailingFlag: bool | None
    inactiveFlag: bool | None
    billSeparateFlag: bool | None
    mobileGuid: UUID | None
    calendar: CalendarReference | None
    timeZone: TimeZoneSetupReference | None
    company: CompanyReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    customFields: list[CustomFieldValue] | None


class CompanySiteInfo(SparkModel):
    id: int | None
    name: str | None
    addressLine1: str | None
    addressLine2: str | None
    city: str | None
    stateReference: StateReference | None
    country: CountryReference | None
    zip: str | None
    addressFormat: str | None
    phoneNumber: str | None
    inactiveFlag: bool | None
    defaultShippingFlag: bool | None
    defaultBillingFlag: bool | None
    primaryAddressFlag: bool | None
    taxCode: TaxCodeReference | None
    phoneNumberExt: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CompanyStatus(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    defaultFlag: bool | None
    inactiveFlag: bool | None
    notifyFlag: bool | None
    disallowSavingFlag: bool | None
    notificationMessage: Annotated[str | None, Field(description=' Max length: 500;')]
    customNoteFlag: bool | None
    cancelOpenTracksFlag: bool | None
    track: TrackReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CompanyStatusReference(ActivityReference):
    pass


class CompanyTeam(SparkModel):
    id: int | None
    company: CompanyReference | None
    teamRole: TeamRoleReference
    location: SystemLocationReference | None
    department: SystemDepartmentReference | None
    contact: ContactReference | None
    member: MemberReference | None
    accountManagerFlag: bool | None
    techFlag: bool | None
    salesFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CompanyType(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    defaultFlag: bool | None
    vendorFlag: bool | None
    serviceAlertFlag: bool | None
    serviceAlertMessage: Annotated[str | None, Field(description=' Max length: 150;')]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CompanyTypeInfo(SparkModel):
    id: int | None
    name: str | None
    isVendor: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CompanyTypeReference(ActivityReference):
    pass


class ConfigurationQuestion(SparkModel):
    answerId: int | None
    questionId: int | None
    question: str | None
    answer: dict[str, Any_aliased] | None
    sequenceNumber: float | None
    numberOfDecimals: int | None
    fieldType: ConfigurationQuestionFieldType | None
    requiredFlag: bool | None


class ConfigurationQuestionFieldType(str, Enum):
    TextArea = 'TextArea'
    Currency = 'Currency'
    Date = 'Date'
    Hyperlink = 'Hyperlink'
    IPAddress = 'IPAddress'
    Checkbox = 'Checkbox'
    Number = 'Number'
    Percent = 'Percent'
    Text = 'Text'
    Password = 'Password'


class ConfigurationReference(SparkModel):
    id: int | None
    deviceIdentifier: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ConfigurationStatus(SparkModel):
    id: int | None
    description: Annotated[str, Field(description=' Max length: 50;')]
    closedFlag: bool | None
    defaultFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ConfigurationStatusInfo(SparkModel):
    id: int | None
    description: str | None
    closedFlag: bool | None
    defaultFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ConfigurationStatusReference(ActivityReference):
    pass


class ConfigurationTabsCount(AgreementTabsCount):
    pass


class ConfigurationType(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    inactiveFlag: bool | None
    systemFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ConfigurationTypeCopy(BoardCopy):
    pass


class ConfigurationTypeInfo(SparkModel):
    id: int | None
    name: str | None
    inactiveFlag: bool | None
    systemFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ConfigurationTypeQuestion(SparkModel):
    id: int | None
    configurationType: ConfigurationTypeReference | None
    fieldType: ConfigurationQuestionFieldType
    entryType: ConfigurationTypeQuestionEntryType
    sequenceNumber: float
    question: Annotated[str, Field(description=' Max length: 1000;')]
    numberOfDecimals: int | None
    requiredFlag: bool | None
    inactiveFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ConfigurationTypeQuestionEntryType(str, Enum):
    Date = 'Date'
    EntryField = 'EntryField'
    List = 'List'
    Option = 'Option'


class ConfigurationTypeQuestionInfo(SparkModel):
    id: int | None
    configurationType: ConfigurationTypeReference | None
    fieldType: ConfigurationQuestionFieldType | None
    entryType: ConfigurationTypeQuestionEntryType | None
    sequenceNumber: float | None
    question: str | None
    numberOfDecimals: int | None
    requiredFlag: bool | None
    inactiveFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ConfigurationTypeQuestionReference(SparkModel):
    id: int | None
    question: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ConfigurationTypeQuestionValue(SparkModel):
    id: int | None
    configurationType: ConfigurationTypeReference | None
    question: ConfigurationTypeQuestionReference | None
    value: Annotated[str, Field(description=' Max length: 1000;')]
    defaultFlag: bool | None
    inactiveFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ConfigurationTypeQuestionValueInfo(SparkModel):
    id: int | None
    configurationType: ConfigurationTypeReference | None
    question: ConfigurationTypeQuestionReference | None
    value: str | None
    defaultFlag: bool | None
    inactiveFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ConfigurationTypeReference(ActivityReference):
    pass


class ConnectWiseHostedScreen(SparkModel):
    id: int | None
    screenId: str | None
    name: str | None


class ConnectWiseHostedSetup(SparkModel):
    id: int | None
    screenId: Annotated[
        int, Field(description='Can be obtained via ConnectWiseHostedApiScreen report.')
    ]
    description: Annotated[str, Field(description=' Max length: 50;')]
    url: Annotated[str, Field(description=' Max length: 1024;')]
    type: ConnectWiseHostedSetupType
    clientId: Annotated[
        str | None,
        Field(description='Only required if not already set. Max length: 36;'),
    ]
    origin: Annotated[str | None, Field(description=' Max length: 100;')]
    podHeight: int | None
    toolbarButtonDialogHeight: int | None
    toolbarButtonDialogWidth: int | None
    toolbarButtonText: Annotated[
        str | None,
        Field(description='Only required for ToolbarButtons. Max length: 50;'),
    ]
    toolbarButtonToolTip: Annotated[str | None, Field(description=' Max length: 50;')]
    toolbarButtonIconDocumentId: int | None
    disabledFlag: bool | None
    locationIds: list[int] | None
    locationsEnabledFlag: bool | None
    createdBy: str | None
    dateCreated: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ConnectWiseHostedSetupType(str, Enum):
    Tab = 'Tab'
    Pod = 'Pod'
    ToolbarButton = 'ToolbarButton'


class Contact(SparkModel):
    id: int | None
    firstName: str | None
    lastName: str | None
    company: CompanyReference | None
    site: SiteReference | None
    addressLine1: str | None
    addressLine2: str | None
    city: str | None
    state: str | None
    zip: str | None
    country: CountryReference | None
    relationship: RelationshipReference | None
    relationshipOverride: str | None
    department: ContactDepartmentReference | None
    inactiveFlag: bool | None
    defaultMergeContactId: int | None
    securityIdentifier: str | None
    managerContact: ContactReference | None
    assistantContact: ContactReference | None
    title: str | None
    school: str | None
    nickName: str | None
    marriedFlag: bool | None
    childrenFlag: bool | None
    children: str | None
    significantOther: str | None
    portalPassword: str | None
    portalSecurityLevel: int | None
    disablePortalLoginFlag: bool | None
    unsubscribeFlag: bool | None
    gender: ContactGender | None
    birthDay: str | None
    anniversary: str | None
    presence: ContactPresence | None
    mobileGuid: UUID | None
    facebookUrl: str | None
    twitterUrl: str | None
    linkedInUrl: str | None
    defaultPhoneType: str | None
    defaultPhoneNbr: str | None
    defaultPhoneExtension: str | None
    defaultBillingFlag: bool | None
    defaultFlag: bool | None
    userDefinedField1: Annotated[str | None, Field(description=' Max length: 50;')]
    userDefinedField2: Annotated[str | None, Field(description=' Max length: 50;')]
    userDefinedField3: Annotated[str | None, Field(description=' Max length: 50;')]
    userDefinedField4: Annotated[str | None, Field(description=' Max length: 50;')]
    userDefinedField5: Annotated[str | None, Field(description=' Max length: 50;')]
    userDefinedField6: Annotated[str | None, Field(description=' Max length: 50;')]
    userDefinedField7: Annotated[str | None, Field(description=' Max length: 50;')]
    userDefinedField8: Annotated[str | None, Field(description=' Max length: 50;')]
    userDefinedField9: Annotated[str | None, Field(description=' Max length: 50;')]
    userDefinedField10: Annotated[str | None, Field(description=' Max length: 50;')]
    companyLocation: SystemLocationReference | None
    communicationItems: list[ContactCommunicationItem] | None
    types: list[ContactTypeReference] | None
    integratorTags: list[str] | None
    customFields: list[CustomFieldValue] | None
    photo: DocumentReference | None
    ignoreDuplicates: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    typeIds: Annotated[
        list[int] | None,
        Field(
            description='Gets or sets integrer array of Contact_Type_Recids to be assigned to contact that can be passed in only during new contact creation (post)\n            To update existing contacts type, use the /company/contactTypeAssociations or /company/contacts/{ID}/typeAssociations endpoints.'
        ),
    ]


class ContactCommunication(SparkModel):
    id: int | None
    contactId: int | None
    type: CommunicationTypeReference
    value: Annotated[str, Field(description=' Max length: 250;')]
    extension: Annotated[str | None, Field(description=' Max length: 15;')]
    defaultFlag: bool | None
    mobileGuid: UUID | None
    communicationType: ContactCommunicationCommunicationType | None
    domain: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ContactCommunicationCommunicationType(str, Enum):
    Email = 'Email'
    Fax = 'Fax'
    Phone = 'Phone'


class ContactCommunicationItem(SparkModel):
    id: int | None
    type: CommunicationTypeReference | None
    value: str | None
    extension: str | None
    defaultFlag: bool | None
    domain: str | None
    communicationType: ContactCommunicationCommunicationType | None


class ContactDepartment(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 30;')]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ContactDepartmentInfo(ActivityReference):
    pass


class ContactDepartmentReference(ActivityReference):
    pass


class ContactGender(str, Enum):
    Female = 'Female'
    Male = 'Male'


class ContactGroup(SparkModel):
    id: int | None
    group: GroupReference
    contact: ContactReference | None
    description: Annotated[str | None, Field(description=' Max length: 50;')]
    unsubscribeFlag: bool | None
    companyUnsubcribedEmailMessage: str | None
    companyGroupUnsubscribedEmailMessage: str | None
    contactUnsubscribedEmailMessage: str | None
    contactGroupUnsubscribedEmailMessage: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ContactInfo(SparkModel):
    id: int | None
    firstName: str | None
    lastName: str | None
    communicationItems: list[ContactCommunicationItem] | None
    defaultPhoneNbr: str | None
    defaultPhoneType: str | None
    defaultFlag: bool | None
    company: CompanyReference | None
    companyLocation: SystemLocationReference | None
    site: SiteReference | None
    inactiveFlag: bool | None
    title: str | None
    types: list[ContactTypeReference] | None
    addressLine1: str | None
    addressLine2: str | None
    city: str | None
    state: str | None
    country: CountryReference | None
    zip: str | None
    department: ContactDepartmentReference | None
    defaultBillingFlag: bool | None
    facebookUrl: str | None
    twitterUrl: str | None
    linkedInUrl: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ContactNote(SparkModel):
    id: int | None
    contactId: int | None
    text: str
    type: NoteTypeReference | None
    flagged: bool | None
    enteredBy: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ContactPresence(str, Enum):
    NoAgent = 'NoAgent'
    Online = 'Online'
    DoNotDisturb = 'DoNotDisturb'
    Away = 'Away'
    Offline = 'Offline'


class ContactReference(ActivityReference):
    pass


class ContactRelationship(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ContactTrack(SparkModel):
    id: int | None
    trackId: int | None
    name: str | None
    startDate: str | None
    endDate: str | None
    actionTaken: int | None
    actionRemaining: int | None
    startedBy: str | None
    company: CompanyReference | None
    contact: ContactReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ContactType(SparkModel):
    id: int | None
    description: Annotated[str, Field(description=' Max length: 50;')]
    defaultFlag: bool | None
    serviceAlertFlag: bool | None
    serviceAlertMessage: Annotated[str | None, Field(description=' Max length: 150;')]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ContactTypeInfo(SparkModel):
    id: int | None
    description: str | None
    defaultFlag: bool | None
    serviceAlertFlag: bool | None
    serviceAlertMessage: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ContactTypeReference(ActivityReference):
    pass


class Conversion(SparkModel):
    id: int | None
    quantity: float | None
    uomType: UnitOfMeasureReference
    parentUOM: UnitOfMeasureReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ConversionTypeReference(ActivityReference):
    pass


class ConvertItem(SparkModel):
    id: int | None
    recordType: ConvertItemRecordType
    project: ProjectReference | None
    phase: ProjectPhaseReference | None
    wbsCode: str | None


class ConvertItemRecordType(str, Enum):
    ProjectIssue = 'ProjectIssue'
    ProjectTicket = 'ProjectTicket'
    ServiceTicket = 'ServiceTicket'


class ConvertToProject(SparkModel):
    id: int | None
    recordType: ConvertItemRecordType | None
    project: ProjectReference | None
    phase: ProjectPhaseReference
    wbsCode: str


class CorporateStructure(SparkModel):
    id: int | None
    levelCount: CorporateStructureLevelCount | None
    level1Name: Annotated[str | None, Field(description=' Max length: 20;')]
    level2Name: Annotated[str | None, Field(description=' Max length: 20;')]
    level3Name: Annotated[str | None, Field(description=' Max length: 20;')]
    level4Name: Annotated[str | None, Field(description=' Max length: 20;')]
    level5Name: Annotated[str | None, Field(description=' Max length: 20;')]
    fiscalYearStart: CorporateStructureFiscalYearStart
    locationCaption: Annotated[str, Field(description=' Max length: 50;')]
    groupCaption: Annotated[str, Field(description=' Max length: 50;')]
    baseCurrency: CurrencyReference
    president: MemberReference | None
    chiefOperatingOfficer: MemberReference | None
    controller: MemberReference | None
    dispatcher: MemberReference | None
    serviceManager: MemberReference | None
    dutyManager: MemberReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CorporateStructureFiscalYearStart(str, Enum):
    January = 'January'
    February = 'February'
    March = 'March'
    April = 'April'
    May = 'May'
    June = 'June'
    July = 'July'
    August = 'August'
    September = 'September'
    October = 'October'
    November = 'November'
    December = 'December'


class CorporateStructureInfo(SparkModel):
    id: int | None
    locationCaption: str | None
    groupCaption: str | None
    baseCurrency: CurrencyReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CorporateStructureLevel(SparkModel):
    id: int | None
    name: str | None


class CorporateStructureLevelCount(str, Enum):
    Level1 = 'Level1'
    Level2 = 'Level2'
    Level3 = 'Level3'
    Level4 = 'Level4'
    Level5 = 'Level5'


class CorporateStructureLevelReference(ActivityReference):
    pass


class Count(SparkModel):
    count: int | None


class Country(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    defaultFlag: bool | None
    currency: CurrencyReference
    cityCaption: Annotated[str | None, Field(description=' Max length: 25;')]
    stateCaption: Annotated[str | None, Field(description=' Max length: 25;')]
    zipCaption: Annotated[str | None, Field(description=' Max length: 25;')]
    zipMinimumLength: int | None
    dialingPrefix: Annotated[str | None, Field(description=' Max length: 5;')]
    addressFormat: AddressFormatReference | None
    countryCode: Annotated[str | None, Field(description=' Max length: 2;')]
    coreEntityCountryCode: CountryCoreEntityCountryCode | None
    localizationCaptionOne: Annotated[str | None, Field(description=' Max length: 25;')]
    localizationValueOne: Annotated[str | None, Field(description=' Max length: 50;')]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CountryCoreEntityCountryCode(str, Enum):
    AF = 'AF'
    AX = 'AX'
    AL = 'AL'
    DZ = 'DZ'
    AS = 'AS'
    AD = 'AD'
    AO = 'AO'
    AI = 'AI'
    AQ = 'AQ'
    AR = 'AR'
    AM = 'AM'
    AW = 'AW'
    AT = 'AT'
    AZ = 'AZ'
    BH = 'BH'
    BD = 'BD'
    BB = 'BB'
    BY = 'BY'
    BZ = 'BZ'
    BJ = 'BJ'
    BM = 'BM'
    BT = 'BT'
    BO = 'BO'
    BQ = 'BQ'
    BA = 'BA'
    BW = 'BW'
    BV = 'BV'
    IO = 'IO'
    BN = 'BN'
    BG = 'BG'
    BF = 'BF'
    BI = 'BI'
    CM = 'CM'
    CV = 'CV'
    KY = 'KY'
    CF = 'CF'
    TD = 'TD'
    CL = 'CL'
    CX = 'CX'
    CC = 'CC'
    CO = 'CO'
    KM = 'KM'
    CG = 'CG'
    CK = 'CK'
    CI = 'CI'
    HR = 'HR'
    CU = 'CU'
    CW = 'CW'
    CY = 'CY'
    CZ = 'CZ'
    CD = 'CD'
    DK = 'DK'
    DJ = 'DJ'
    DM = 'DM'
    EC = 'EC'
    EG = 'EG'
    GQ = 'GQ'
    ER = 'ER'
    EE = 'EE'
    ET = 'ET'
    FK = 'FK'
    FO = 'FO'
    FJ = 'FJ'
    FI = 'FI'
    FR = 'FR'
    GF = 'GF'
    PF = 'PF'
    TF = 'TF'
    GA = 'GA'
    GM = 'GM'
    GE = 'GE'
    GH = 'GH'
    GI = 'GI'
    GR = 'GR'
    GL = 'GL'
    GD = 'GD'
    GP = 'GP'
    GU = 'GU'
    GT = 'GT'
    GG = 'GG'
    GN = 'GN'
    GW = 'GW'
    GY = 'GY'
    HT = 'HT'
    HM = 'HM'
    HN = 'HN'
    HK = 'HK'
    HU = 'HU'
    IS = 'IS'
    IN = 'IN'
    IR = 'IR'
    IQ = 'IQ'
    IE = 'IE'
    IM = 'IM'
    IT = 'IT'
    JM = 'JM'
    JP = 'JP'
    JE = 'JE'
    JO = 'JO'
    KZ = 'KZ'
    KE = 'KE'
    KI = 'KI'
    XK = 'XK'
    KW = 'KW'
    KG = 'KG'
    LA = 'LA'
    LV = 'LV'
    LB = 'LB'
    LS = 'LS'
    LR = 'LR'
    LY = 'LY'
    LI = 'LI'
    LT = 'LT'
    LU = 'LU'
    MO = 'MO'
    MK = 'MK'
    MG = 'MG'
    MW = 'MW'
    MY = 'MY'
    ML = 'ML'
    MT = 'MT'
    MH = 'MH'
    MQ = 'MQ'
    MR = 'MR'
    MU = 'MU'
    YT = 'YT'
    FM = 'FM'
    MD = 'MD'
    MC = 'MC'
    MN = 'MN'
    ME = 'ME'
    MS = 'MS'
    MZ = 'MZ'
    NA = 'NA'
    NR = 'NR'
    NP = 'NP'
    NC = 'NC'
    NZ = 'NZ'
    NI = 'NI'
    NE = 'NE'
    NG = 'NG'
    NU = 'NU'
    NF = 'NF'
    KP = 'KP'
    MP = 'MP'
    OM = 'OM'
    PK = 'PK'
    PW = 'PW'
    PS = 'PS'
    PG = 'PG'
    PY = 'PY'
    PE = 'PE'
    PN = 'PN'
    PL = 'PL'
    PT = 'PT'
    PR = 'PR'
    RE = 'RE'
    RO = 'RO'
    RU = 'RU'
    RW = 'RW'
    BL = 'BL'
    SH = 'SH'
    PM = 'PM'
    VC = 'VC'
    WS = 'WS'
    SM = 'SM'
    ST = 'ST'
    SN = 'SN'
    RS = 'RS'
    SC = 'SC'
    SL = 'SL'
    SX = 'SX'
    SK = 'SK'
    SI = 'SI'
    SB = 'SB'
    SO = 'SO'
    ZA = 'ZA'
    GS = 'GS'
    KR = 'KR'
    SS = 'SS'
    ES = 'ES'
    LK = 'LK'
    SD = 'SD'
    SR = 'SR'
    SJ = 'SJ'
    SZ = 'SZ'
    SE = 'SE'
    SY = 'SY'
    TJ = 'TJ'
    TZ = 'TZ'
    TH = 'TH'
    TL = 'TL'
    TG = 'TG'
    TK = 'TK'
    TO = 'TO'
    TN = 'TN'
    TR = 'TR'
    TV = 'TV'
    UG = 'UG'
    UA = 'UA'
    GB = 'GB'
    UM = 'UM'
    UZ = 'UZ'
    VU = 'VU'
    VN = 'VN'
    WF = 'WF'
    EH = 'EH'
    YE = 'YE'
    ZM = 'ZM'
    ZW = 'ZW'
    US = 'US'
    CR = 'CR'
    MX = 'MX'
    AE = 'AE'
    VI = 'VI'
    VG = 'VG'
    SA = 'SA'
    KH = 'KH'
    AU = 'AU'
    ID = 'ID'
    CA = 'CA'
    BR = 'BR'
    TW = 'TW'
    TM = 'TM'
    TC = 'TC'
    QA = 'QA'
    MM = 'MM'
    CN = 'CN'
    SG = 'SG'
    IL = 'IL'
    VA = 'VA'
    DE = 'DE'
    NL = 'NL'
    AG = 'AG'
    BE = 'BE'
    LC = 'LC'
    UY = 'UY'
    PH = 'PH'
    BS = 'BS'
    VE = 'VE'
    CH = 'CH'
    MF = 'MF'
    KN = 'KN'
    TT = 'TT'
    DO = 'DO'
    PA = 'PA'
    MV = 'MV'
    SV = 'SV'
    NO = 'NO'
    MA = 'MA'
    AC = 'AC'
    TA = 'TA'


class CountryInfo(SparkModel):
    id: int | None
    name: str | None
    defaultFlag: bool | None
    cityCaption: str | None
    stateCaption: str | None
    zipCaption: str | None
    dialingPrefix: str | None
    localizationCaptionOne: str | None
    currency: CurrencyReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CountryReference(CatalogItemReference):
    pass


class CreateAccountingBatchRequest(SparkModel):
    id: int | None
    batchIdentifier: Annotated[str | None, Field(description=' Max length: 50;')]
    glInterfaceIdentifier: str | None
    exportInvoicesFlag: Annotated[
        bool | None,
        Field(description='Batch must export Invoices, Expenses or Products.'),
    ]
    exportExpensesFlag: Annotated[
        bool | None,
        Field(description='Batch must export Invoices, Expenses or Products.'),
    ]
    exportProductsFlag: Annotated[
        bool | None,
        Field(description='Batch must export Invoices, Expenses or Products.'),
    ]
    processedRecordIds: Annotated[list[int], Field(description='GL Entry RecIDs.')]
    summarizeExpenses: bool | None


class Crm(SparkModel):
    id: int | None
    companyListCount: int | None
    lockProbabilityFlag: bool | None
    accountManagerRole: TeamRoleReference
    technicalContactRole: TeamRoleReference
    salesRepRole: TeamRoleReference
    companyIdGenerationFlag: bool | None
    excludeSpacesFlag: bool | None
    field1Caption: Annotated[str | None, Field(description=' Max length: 25;')]
    field2Caption: Annotated[str | None, Field(description=' Max length: 25;')]
    field3Caption: Annotated[str | None, Field(description=' Max length: 25;')]
    field4Caption: Annotated[str | None, Field(description=' Max length: 25;')]
    field5Caption: Annotated[str | None, Field(description=' Max length: 25;')]
    field6Caption: Annotated[str | None, Field(description=' Max length: 25;')]
    field7Caption: Annotated[str | None, Field(description=' Max length: 25;')]
    field8Caption: Annotated[str | None, Field(description=' Max length: 25;')]
    field9Caption: Annotated[str | None, Field(description=' Max length: 25;')]
    field10Caption: Annotated[str | None, Field(description=' Max length: 25;')]
    primaryRepCaption: Annotated[str | None, Field(description=' Max length: 50;')]
    secondaryRepCaption: Annotated[str | None, Field(description=' Max length: 50;')]
    other1Caption: Annotated[str | None, Field(description=' Max length: 50;')]
    other2Caption: Annotated[str | None, Field(description=' Max length: 50;')]
    defaultYear: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CrmInfo(SparkModel):
    id: int | None
    accountManagerRole: TeamRoleReference | None
    technicalContactRole: TeamRoleReference | None
    salesRepRole: TeamRoleReference | None
    field1Caption: str | None
    field2Caption: str | None
    field3Caption: str | None
    field4Caption: str | None
    field5Caption: str | None
    field6Caption: str | None
    field7Caption: str | None
    field8Caption: str | None
    field9Caption: str | None
    field10Caption: str | None
    primaryRepCaption: str | None
    secondaryRepCaption: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CurrencyCode(ActivityReference):
    pass


class CurrencyCodeReference(ActivityReference):
    pass


class CurrencyInfo(ActivityReference):
    pass


class CurrencyReference(SparkModel):
    id: int | None
    symbol: str | None
    currencyCode: str | None
    decimalSeparator: str | None
    numberOfDecimals: int | None
    thousandsSeparator: str | None
    negativeParenthesesFlag: bool | None
    displaySymbolFlag: bool | None
    currencyIdentifier: str | None
    displayIdFlag: bool | None
    rightAlign: bool | None
    name: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CustomFieldValue(SparkModel):
    id: int | None
    caption: str | None
    type: CustomFieldValueType | None
    entryMethod: ConfigurationTypeQuestionEntryType | None
    numberOfDecimals: int | None
    value: dict[str, Any_aliased] | None
    connectWiseId: str | None


class CustomFieldValueType(str, Enum):
    TextArea = 'TextArea'
    Button = 'Button'
    Currency = 'Currency'
    Date = 'Date'
    Hyperlink = 'Hyperlink'
    IPAddress = 'IPAddress'
    Checkbox = 'Checkbox'
    Number = 'Number'
    Percent = 'Percent'
    PhoneNumber = 'PhoneNumber'
    Text = 'Text'
    Password = 'Password'


class CustomReport(SparkModel):
    id: int | None
    reportLink: str
    name: Annotated[str, Field(description=' Max length: 100;')]
    module: Annotated[CustomReportModule, Field(description='The Module Name.')]
    description: Annotated[str, Field(description=' Max length: 150;')]
    generatedFlag: bool | None
    parameterPrefix: Annotated[str | None, Field(description=' Max length: 50;')]
    parameterSeparator: Annotated[str | None, Field(description=' Max length: 50;')]
    parameterNameSeparator: Annotated[str | None, Field(description=' Max length: 50;')]
    parameterSuffix: Annotated[str | None, Field(description=' Max length: 50;')]
    locationFlag: bool | None
    locationParamId: Annotated[
        int | None,
        Field(
            description="Parameter unique identifier for the Custom Report's Location parameter."
        ),
    ]
    locationDefaultFlag: bool | None
    locationOverride: str | None
    departmentFlag: bool | None
    departmentParamId: Annotated[
        int | None,
        Field(
            description="Parameter unique identifier for the Custom Report's Department parameter."
        ),
    ]
    departmentDefaultFlag: bool | None
    departmentOverride: str | None
    territoryFlag: bool | None
    territoryParamId: Annotated[
        int | None,
        Field(
            description="Parameter unique identifier for the Custom Report's Terriroty parameter."
        ),
    ]
    territoryDefaultFlag: bool | None
    territoryOverride: str | None
    companyFlag: bool | None
    companyParamId: Annotated[
        int | None,
        Field(
            description="Parameter unique identifier for the Custom Report's Company parameter."
        ),
    ]
    companyOverride: str | None
    memberFlag: bool | None
    memberParamId: Annotated[
        int | None,
        Field(
            description="Parameter unique identifier for the Custom Report's Member parameter."
        ),
    ]
    memberOverride: str | None
    startDateFlag: bool | None
    startDateParamId: Annotated[
        int | None,
        Field(
            description="Parameter unique identifier for the Custom Report's Start Date parameter."
        ),
    ]
    startDateOverride: str | None
    endDateFlag: bool | None
    endDateParamId: Annotated[
        int | None,
        Field(
            description="Parameter unique identifier for the Custom Report's End Date parameter."
        ),
    ]
    endDateOverride: str | None
    oppTypeFlag: bool | None
    oppTypeParamId: Annotated[
        int | None,
        Field(
            description="Parameter unique identifier for the Custom Report's Opportunity Type parameter."
        ),
    ]
    oppTypeOverride: str | None
    opportunityFlag: bool | None
    opportunityParamId: Annotated[
        int | None,
        Field(
            description="Parameter unique identifier for the Custom Report's Opportunity parameter."
        ),
    ]
    opportunityOverride: str | None
    marketingCampaignFlag: bool | None
    marketingCampaignParamId: Annotated[
        int | None,
        Field(
            description="Parameter unique identifier for the Custom Report's Marketing Campaign parameter."
        ),
    ]
    marketingCampaignOverride: str | None
    serviceBoardFlag: bool | None
    serviceBoardParamId: Annotated[
        int | None,
        Field(
            description="Parameter unique identifier for the Custom Report's Service Board parameter."
        ),
    ]
    serviceBoardDefaultFlag: bool | None
    serviceBoardOverride: str | None
    serviceTypeFlag: bool | None
    serviceTypeParamId: Annotated[
        int | None,
        Field(
            description="Parameter unique identifier for the Custom Report's Service Type parameter."
        ),
    ]
    serviceTypeOverride: str | None
    serviceStatusFlag: bool | None
    serviceStatusParamId: Annotated[
        int | None,
        Field(
            description="Parameter unique identifier for the Custom Report's Service Status parameter."
        ),
    ]
    serviceStatusOverride: str | None
    agreementTypeFlag: bool | None
    agreementTypeParamId: Annotated[
        int | None,
        Field(
            description="Parameter unique identifier for the Custom Report's Agreement Type parameter."
        ),
    ]
    agreementTypeOverride: str | None
    agreementFlag: bool | None
    agreementParamId: Annotated[
        int | None,
        Field(
            description="Parameter unique identifier for the Custom Report's Agreement parameter."
        ),
    ]
    agreementOverride: str | None
    projectTypeFlag: bool | None
    projectTypeParamId: Annotated[
        int | None,
        Field(
            description="Parameter unique identifier for the Custom Report's Project Type parameter."
        ),
    ]
    projectTypeOverride: str | None
    projectFlag: bool | None
    projectParamId: Annotated[
        int | None,
        Field(
            description="Parameter unique identifier for the Custom Report's Project parameter."
        ),
    ]
    projectOverride: str | None
    workRoleFlag: bool | None
    workRoleParamId: Annotated[
        int | None,
        Field(
            description="Parameter unique identifier for the Custom Report's Work Role parameter."
        ),
    ]
    workRoleOverride: str | None
    workTypeFlag: bool | None
    workTypeParamId: Annotated[
        int | None,
        Field(
            description="Parameter unique identifier for the Custom Report's Work Type parameter."
        ),
    ]
    workTypeOverride: str | None
    invoiceFlag: bool | None
    invoiceParamId: Annotated[
        int | None,
        Field(
            description="Parameter unique identifier for the Custom Report's Invoice Type parameter."
        ),
    ]
    invoiceOverride: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CustomReportModule(str, Enum):
    Companies = 'Companies'
    Finance = 'Finance'
    Marketing = 'Marketing'
    Procurement = 'Procurement'
    Project = 'Project'
    Sales = 'Sales'
    ServiceDesk = 'ServiceDesk'
    TimeExpense = 'TimeExpense'


class CustomReportParameter(SparkModel):
    id: int | None
    name: Annotated[
        str | None,
        Field(
            description='Either a caption name or parameter name is required. Max length: 50;'
        ),
    ]
    captionName: Annotated[
        str | None,
        Field(
            description='Either a caption name or parameter name is required. Max length: 50;'
        ),
    ]
    customReport: CustomReportReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class CustomReportReference(ActivityReference):
    pass


class CwTimeZone(SparkModel):
    id: int | None
    name: str | None
    offset: Annotated[float | None, Field(description='The hours offset (+/-).')]
    startDate: str | None
    endDate: str | None
    daylightSavingsFlag: Annotated[
        bool | None,
        Field(
            description='Determined based on system library value for specified timeZone.\n            Not able to be used in query params at this time.'
        ),
    ]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class DeliveryMethod(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    defaultFlag: bool | None
    emailFlag: bool | None
    integrationEmailFlag: bool | None
    integrationPrintFlag: bool | None
    integrationActiveFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class Department(SparkModel):
    id: int | None
    identifier: Annotated[str, Field(description=' Max length: 15;')]
    name: Annotated[str, Field(description=' Max length: 50;')]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class DepartmentInfo(ActivityReference):
    pass


class DepartmentLocation(SparkModel):
    id: int | None
    location: SystemLocationReference
    department: SystemDepartmentReference | None
    departmentManager: MemberReference | None
    dispatch: MemberReference | None
    serviceManager: MemberReference | None
    dutyManager: MemberReference | None
    ldapConfig: LdapConfigurationReference | None
    addAllLocations: bool | None
    removeAllLocations: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class DepartmentLocationInfo(SparkModel):
    id: int | None
    location: SystemLocationReference | None
    department: SystemDepartmentReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class DirectionalSync(ContactRelationship):
    pass


class DirectionalSyncInfo(ActivityReference):
    pass


class DirectionalSyncReference(ActivityReference):
    pass


class DocumentFormData(SparkModel):
    file: bytes | None
    recordId: int | None
    recordType: str | None
    title: str | None
    url: str | None
    privateFlag: bool | None
    readOnlyFlay: bool | None
    isAvatar: bool | None


class DocumentInfo(SparkModel):
    id: int | None
    title: str | None
    fileName: str | None
    serverFileName: str | None
    owner: str | None
    linkFlag: bool | None
    imageFlag: bool | None
    publicFlag: bool | None
    htmlTemplateFlag: bool | None
    readOnlyFlag: bool | None
    size: int | None
    urlFlag: bool | None
    createdOnDate: str | None
    documentType: DocumentTypeReference | None
    guid: Annotated[UUID | None, Field(example='00000000-0000-0000-0000-000000000000')]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class DocumentReference(ActivityReference):
    pass


class DocumentSetup(SparkModel):
    id: int | None
    uploadAsLinkFlag: bool | None
    isPublicFlag: bool | None
    docPath: Annotated[str | None, Field(description=' Max length: 100;')]
    templatePath: Annotated[str | None, Field(description=' Max length: 200;')]
    templateOutputPath: Annotated[str | None, Field(description=' Max length: 200;')]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class DocumentType(SparkModel):
    id: int | None
    fileExtension: str | None
    icon: str | None
    mimeType: str | None
    description: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class DocumentTypeReference(ActivityReference):
    pass


class EPayConfiguration(SparkModel):
    id: int | None
    location: SystemLocationReference
    currency: CurrencyReference
    url: Annotated[str, Field(description=' Max length: 400;')]
    storeIdentifier: Annotated[str, Field(description=' Max length: 500;')]
    encryptionKey: Annotated[str | None, Field(description=' Max length: 500;')]
    initializationVector: Annotated[str | None, Field(description=' Max length: 500;')]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class EmailConnector(SparkModel):
    id: int | None
    emailServerType: EmailConnectorEmailServerType | None
    imapSetup: ImapSetupReference | None
    office365EmailSetup: Office365EmailSetupReference | None
    asio365EmailSetup: Office365EmailSetupReference | None
    googleEmailSetup: GoogleEmailSetupReference | None
    serviceBoard: BoardReference
    defaultCompany: CompanyReference
    defaultMember: MemberReference | None
    location: SystemLocationReference | None
    department: SystemDepartmentReference | None
    emailNotifyFrom: Annotated[str | None, Field(description=' Max length: 50;')]
    bccEmailTo: Annotated[str | None, Field(description=' Max length: 250;')]
    emailErrorsTo: Annotated[str, Field(description=' Max length: 50;')]
    setEmailToDefaultContactFlag: bool | None
    noResponseFlag: bool | None
    neverRespondFlag: bool | None
    discardDuplicatesFlag: bool | None
    postRepliesToTicketFlag: bool | None
    createContactFlag: bool | None
    responseEmailForNew: str | None
    responseEmailForExisting: str | None
    sourceOverride: ServiceSourceReference | None
    priorityOverride: PriorityReference | None
    typeOverride: ServiceTypeReference | None
    subTypeOverride: ServiceSubTypeReference | None
    itemOverride: ServiceItemReference | None
    statusOverride: ServiceStatusReference | None
    addCcFlag: bool | None
    inboundTicketMailboxId: str | None
    useEmailMessageIdFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class EmailConnectorEmailServerType(str, Enum):
    IMAP = 'IMAP'
    Office365 = 'Office365'
    Google = 'Google'
    Asio365 = 'Asio365'


class EmailConnectorInfo(SparkModel):
    id: int | None
    defaultCompany: CompanyReference | None
    imapSetup: ImapSetupReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class EmailConnectorParsingRule(SparkModel):
    id: int | None
    parsingStyle: EmailConnectorParsingStyleReference | None
    priority: int
    parsingVariable: EmailConnectorParsingVariableReference
    searchTerm: Annotated[str, Field(description=' Max length: 250;')]
    servicePriority: PriorityReference | None
    serviceStatus: ServiceStatusReference | None
    serviceType: ServiceTypeReference | None
    serviceSubType: ServiceSubTypeReference | None
    serviceItem: ServiceItemReference | None
    serviceBoard: BoardReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class EmailConnectorParsingStyle(SparkModel):
    id: int | None
    parsingType: EmailConnectorParsingTypeReference
    parseRule: Annotated[str, Field(description=' Max length: 500;')]
    priority: int
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class EmailConnectorParsingStyleReference(ActivityReference):
    pass


class EmailConnectorParsingTypeReference(ActivityReference):
    pass


class EmailConnectorParsingVariableReference(SparkModel):
    id: int | None
    name: str | None
    identifier: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class EmailConnectorReference(ActivityReference):
    pass


class EmailExclusion(SparkModel):
    id: int | None
    description: Annotated[str, Field(description=' Max length: 100;')]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class EmailOpened(SparkModel):
    id: int | None
    campaignId: int | None
    contactId: int
    dateOpened: datetime | None


class EmailTemplateReference(ActivityReference):
    pass


class EmailToken(SparkModel):
    id: int | None
    token: str | None
    description: str | None
    addressFlag: bool | None
    agreementFlag: bool | None
    companyFlag: bool | None
    configFlag: bool | None
    contactFlag: bool | None
    invoiceFlag: bool | None
    purchaseOrderFlag: bool | None
    purchaseOrderStatusFlag: bool | None
    rmaFlag: bool | None
    salesFlag: bool | None
    serviceFlag: bool | None
    tracksFlag: bool | None
    workflowFlag: bool | None
    portalPasswordFlag: bool | None


class EntityType(SparkModel):
    id: int | None
    name: str | None
    code: str | None


class EntityTypeInfo(CorporateStructureLevel):
    pass


class EntityTypeReference(ActivityReference):
    pass


class ErrorResponseMessage(SparkModel):
    code: str | None
    message: str | None
    errors: list[ValidationError] | None


class ExistingTenantReference(ActivityReference):
    pass


class ExpenseDetailReference(SparkModel):
    id: int | None
    amount: float | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ExpenseEntry(SparkModel):
    id: int | None
    expenseReport: ExpenseReportReference | None
    company: CompanyReference | None
    chargeToId: int | None
    chargeToType: Annotated[
        ExpenseEntryChargeToType | None,
        Field(
            description='Gets or sets\n            company or chargeToType is required.'
        ),
    ]
    type: ExpenseTypeReference
    member: MemberReference | None
    paymentMethod: PaymentMethodReference | None
    classification: ClassificationReference | None
    amount: float
    billableOption: ActivityStopwatchBillableOption | None
    date: datetime
    locationId: int | None
    businessUnitId: int | None
    notes: str | None
    agreement: AgreementReference | None
    invoiceAmount: float | None
    mobileGuid: UUID | None
    taxes: list[ExpenseTax] | None
    invoice: InvoiceReference | None
    currency: CurrencyReference | None
    status: ExpenseEntryStatus | None
    billAmount: float | None
    agreementAmount: float | None
    odometerStart: float | None
    odometerEnd: float | None
    ticket: TicketReference | None
    project: ProjectReference | None
    phase: ProjectPhaseReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    customFields: list[CustomFieldValue] | None


class ExpenseEntryAuditSource(str, Enum):
    None_ = 'None'
    Member = 'Member'
    API = 'API'
    Workflow = 'Workflow'
    Portal = 'Portal'
    Mobile = 'Mobile'
    Network = 'Network'
    EmailConnector = 'EmailConnector'
    MassMaintenance = 'MassMaintenance'
    Application = 'Application'
    SystemAPI = 'SystemAPI'
    Conversion = 'Conversion'


class ExpenseEntryAuditType(str, Enum):
    Activity = 'Activity'
    CloseDate = 'CloseDate'
    Company = 'Company'
    Contact = 'Contact'
    Conversion = 'Conversion'
    Document = 'Document'
    Forecast = 'Forecast'
    Note = 'Note'
    Notes = 'Notes'
    Opportunity = 'Opportunity'
    Products = 'Products'
    Stage = 'Stage'
    Status = 'Status'
    Surveys = 'Surveys'
    Team = 'Team'
    Tracks = 'Tracks'
    Configuration = 'Configuration'
    ConfigurationQuestions = 'ConfigurationQuestions'
    DeviceBackupDetails = 'DeviceBackupDetails'
    Tickets = 'Tickets'
    Subject = 'Subject'
    ActivityOverview = 'ActivityOverview'
    Schedule = 'Schedule'
    Resources = 'Resources'
    ExpenseEntry = 'ExpenseEntry'
    Member = 'Member'
    Date = 'Date'
    Classification = 'Classification'
    Amount = 'Amount'
    ExpenseType = 'ExpenseType'
    WorkType = 'WorkType'
    WorkRole = 'WorkRole'
    Mileage = 'Mileage'
    Billing = 'Billing'
    ExpenseHeader = 'ExpenseHeader'
    Project = 'Project'
    TimeEntry = 'TimeEntry'
    TicketStatus = 'TicketStatus'
    DateTime = 'DateTime'
    DeductHours = 'DeductHours'
    ActualHours = 'ActualHours'
    Invoice = 'Invoice'
    CompanyFinance = 'CompanyFinance'
    Billable = 'Billable'
    SalesOrder = 'SalesOrder'
    Shipping = 'Shipping'
    Profile = 'Profile'
    Group = 'Group'
    GroupContact = 'GroupContact'
    GroupCompany = 'GroupCompany'
    Options = 'Options'
    Site = 'Site'
    Agreement = 'Agreement'
    Addition = 'Addition'
    Adjustment = 'Adjustment'
    Microsoft365 = 'Microsoft365'
    API = 'API'
    ProjectFinance = 'ProjectFinance'
    CompanyProfile = 'CompanyProfile'
    CompanyTeam = 'CompanyTeam'
    CompanyMgmt = 'CompanyMgmt'
    InvoiceTotal = 'InvoiceTotal'
    BillingInformation = 'BillingInformation'
    ShippingInformation = 'ShippingInformation'
    BillingStatus = 'BillingStatus'
    Location = 'Location'
    Department = 'Department'
    Territory = 'Territory'
    Payment = 'Payment'
    Credit = 'Credit'
    SubcontractorInformation = 'SubcontractorInformation'
    InvoicingParameters = 'InvoicingParameters'
    ApplicationParameters = 'ApplicationParameters'
    Finance = 'Finance'
    Invoicing = 'Invoicing'
    Email = 'Email'
    Batching = 'Batching'
    KnowledgeBase = 'KnowledgeBase'
    KbArticle = 'KbArticle'
    KnowledgeBaseApproval = 'KnowledgeBaseApproval'
    KnowledgeBaseTicket = 'KnowledgeBaseTicket'
    ManageNetwork = 'ManageNetwork'
    Tasks = 'Tasks'
    CustomField = 'CustomField'
    ScreenConnect = 'ScreenConnect'
    SLA = 'SLA'
    Ticket = 'Ticket'
    Workflow = 'Workflow'
    Record = 'Record'
    CombinedTickets = 'CombinedTickets'
    Template = 'Template'
    PurchaseOrder = 'PurchaseOrder'
    Meeting = 'Meeting'
    RmaOverview = 'RmaOverview'
    ReturnedBy = 'ReturnedBy'
    PurchasedFromVendor = 'PurchasedFromVendor'
    WarrantyVendor = 'WarrantyVendor'
    RepairVendor = 'RepairVendor'
    AdditionalDetails = 'AdditionalDetails'
    TicketTemplate = 'TicketTemplate'
    AutoGeneration = 'AutoGeneration'
    TimeInternalNote = 'TimeInternalNote'
    TimeDiscussion = 'TimeDiscussion'
    TimeInternal = 'TimeInternal'
    TimeResolution = 'TimeResolution'
    MemberTemplate = 'MemberTemplate'
    Delegation = 'Delegation'
    Skill = 'Skill'
    Certification = 'Certification'
    Accrual = 'Accrual'
    ApiKey = 'ApiKey'
    Login = 'Login'
    Notifications = 'Notifications'
    System = 'System'
    ServiceBoard = 'ServiceBoard'
    ProjectBoard = 'ProjectBoard'
    Scheduling = 'Scheduling'
    TimeBillingExpense = 'TimeBillingExpense'
    CRM = 'CRM'
    Procurement = 'Procurement'
    JobRole = 'JobRole'
    Details = 'Details'
    Authentication = 'Authentication'


class ExpenseEntryChargeToType(str, Enum):
    Company = 'Company'
    ServiceTicket = 'ServiceTicket'
    ProjectTicket = 'ProjectTicket'
    ChargeCode = 'ChargeCode'
    Activity = 'Activity'


class ExpenseEntryStatus(str, Enum):
    Open = 'Open'
    Rejected = 'Rejected'
    PendingApproval = 'PendingApproval'
    ErrorsCorrected = 'ErrorsCorrected'
    PendingProjectApproval = 'PendingProjectApproval'
    ApprovedByTierOne = 'ApprovedByTierOne'
    RejectBySecondTier = 'RejectBySecondTier'
    ApprovedByTierTwo = 'ApprovedByTierTwo'
    ReadyToBill = 'ReadyToBill'
    Billed = 'Billed'
    WrittenOff = 'WrittenOff'
    BilledAgreement = 'BilledAgreement'


class ExpenseReport(SparkModel):
    id: int | None
    member: MemberReference | None
    year: int | None
    period: int | None
    dateStart: str | None
    dateEnd: str | None
    status: ExpenseEntryStatus | None
    total: float | None
    dueDate: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ExpenseReportReference(ActivityReference):
    pass


class ExpenseReportTierUpdate(SparkModel):
    id: int | None
    approvalType: ExpenseReportTierUpdateApprovalType | None


class ExpenseReportTierUpdateApprovalType(str, Enum):
    DataEntry = 'DataEntry'
    Tier1Update = 'Tier1Update'
    Tier2Update = 'Tier2Update'
    Billing = 'Billing'
    Service = 'Service'
    Project = 'Project'
    MonthlySummary = 'MonthlySummary'
    SalesActivity = 'SalesActivity'
    Schedule = 'Schedule'


class ExpenseRevenueReference(AgreementRevenueReference):
    pass


class ExpenseTax(SparkModel):
    id: int | None
    amount: float | None
    type: ExpenseTaxTypeReference | None


class ExpenseTaxTypeInfo(SparkModel):
    id: int | None
    name: str | None
    inactive: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ExpenseTaxTypeReference(ActivityReference):
    pass


class ExpenseType(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 30;')]
    amountCaption: str
    reimbursementRate: float | None
    billExpenses: ActivityStopwatchBillableOption
    invoiceMarkupOption: ExpenseTypeInvoiceMarkupOption
    invoiceMarkupAmount: float | None
    advancedAmountFlag: bool | None
    mileageFlag: bool | None
    quantityFlag: bool | None
    inactiveFlag: bool | None
    maxAmount: float | None
    integrationXRef: Annotated[str | None, Field(description=' Max length: 50;')]
    defaultFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ExpenseTypeExemption(SparkModel):
    id: int | None
    expenseType: ExpenseTypeReference
    taxableLevels: list[int] | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ExpenseTypeInfo(SparkModel):
    id: int | None
    name: str | None
    inactiveFlag: bool | None
    amountCaption: str | None
    mileageFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ExpenseTypeInvoiceMarkupOption(str, Enum):
    Amount = 'Amount'
    Mile = 'Mile'
    Percent = 'Percent'


class ExpenseTypeReference(ActivityReference):
    pass


class Experiment(SparkModel):
    id: int | None
    experimentId: str | None
    name: str | None
    description: str | None
    properties: str | None
    inactiveFlag: bool | None
    memberInactiveFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ExportAccountingBatchRequest(SparkModel):
    batchIdentifier: Annotated[str | None, Field(description=' Max length: 50;')]
    glInterfaceIdentifier: str | None
    thruDate: datetime | None
    locationId: int | None
    summarizeInvoices: AccountingPackageSetupInvoiceFormat | None
    exportInvoicesFlag: Annotated[
        bool | None,
        Field(
            description='Batch export must include invoices, expenses, or products (procurement).'
        ),
    ]
    includedInvoiceIds: list[int] | None
    excludedInvoiceIds: list[int] | None
    exportExpensesFlag: Annotated[
        bool | None,
        Field(
            description='Batch export must include invoices, expenses, or products (procurement).'
        ),
    ]
    includedExpenseIds: list[int] | None
    excludedExpenseIds: list[int] | None
    exportPaymentsFlag: Annotated[
        bool | None,
        Field(
            description='Batch export must include invoices, expenses, or products (procurement).'
        ),
    ]
    includedPaymentIds: list[int] | None
    exportProductsFlag: Annotated[
        bool | None,
        Field(
            description='Batch export must include invoices, expenses, or products (procurement).'
        ),
    ]
    includedProductIds: list[str] | None
    excludedProductIds: list[str] | None


class FileUploadSetting(SparkModel):
    id: int | None
    restrictFileTypesFlag: bool
    globalFileSizeLimit: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class FilterValues(SparkModel):
    conditions: str | None
    orderBy: str | None
    childconditions: str | None
    customfieldconditions: str | None


class Forecast(SparkModel):
    id: int | None
    forecastItems: list[ForecastItem] | None
    productRevenue: ProductRevenueReference | None
    serviceRevenue: ServiceRevenueReference | None
    agreementRevenue: AgreementRevenueReference | None
    timeRevenue: TimeRevenueReference | None
    expenseRevenue: ExpenseRevenueReference | None
    forecastRevenueTotals: ForecastRevenueReference | None
    inclusiveRevenueTotals: InclusiveRevenueReference | None
    recurringTotal: float | None
    wonRevenue: WonRevenueReference | None
    lostRevenue: LostRevenueReference | None
    openRevenue: OpenRevenueReference | None
    otherRevenue1: Other1RevenueReference | None
    otherRevenue2: Other2RevenueReference | None
    salesTaxRevenue: float | None
    forecastTotalWithTaxes: float | None
    expectedProbability: int | None
    taxCode: TaxCodeReference | None
    billingTerms: BillingTermsReference | None
    currency: CurrencyReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ForecastItem(SparkModel):
    id: int | None
    forecastDescription: Annotated[str | None, Field(description=' Max length: 50;')]
    opportunity: OpportunityReference
    quantity: float | None
    status: OpportunityStatusReference
    catalogItem: IvItemReference | None
    productDescription: str | None
    productClass: str | None
    revenue: float | None
    cost: float | None
    margin: float | None
    percentage: int | None
    includeFlag: bool | None
    quoteWerksDocNo: Annotated[str | None, Field(description=' Max length: 20;')]
    quoteWerksDocName: Annotated[str | None, Field(description=' Max length: 255;')]
    quoteWerksQuantity: int | None
    forecastType: ForecastItemForecastType
    linkFlag: bool | None
    recurringRevenue: float | None
    recurringCost: float | None
    recurringDateStart: datetime | None
    recurringDateEnd: datetime | None
    billCycle: BillingCycleReference | None
    cycleBasis: str | None
    cycles: int | None
    recurringFlag: bool | None
    sequenceNumber: float | None
    subNumber: int | None
    taxableFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ForecastItemForecastType(str, Enum):
    Other1 = 'Other1'
    Other2 = 'Other2'
    Agreement = 'Agreement'
    Product = 'Product'
    Service = 'Service'


class ForecastRevenueReference(AgreementRevenueReference):
    pass


class FormSubmitted(SparkModel):
    id: int | None
    campaignId: int | None
    contactId: int
    dateSubmitted: datetime | None
    url: Annotated[str, Field(description=' Max length: 2083;')]
    queryString: str | None
    pageType: str | None
    pageSubType: str | None
    topic: str | None
    version: str | None
    status: str | None


class GLAccount(SparkModel):
    id: int | None
    glType: GLAccountGlType
    mappedType: MappedTypeReference
    mappedRecord: MappedRecordReference
    segment1: Annotated[str | None, Field(description=' Max length: 255;')]
    segment2: Annotated[str | None, Field(description=' Max length: 255;')]
    segment3: Annotated[str | None, Field(description=' Max length: 255;')]
    segment4: Annotated[str | None, Field(description=' Max length: 255;')]
    segment5: Annotated[str | None, Field(description=' Max length: 255;')]
    segment6: Annotated[str | None, Field(description=' Max length: 255;')]
    segment7: Annotated[str | None, Field(description=' Max length: 255;')]
    segment8: Annotated[str | None, Field(description=' Max length: 255;')]
    segment9: Annotated[str | None, Field(description=' Max length: 255;')]
    segment10: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs1: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs2: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs3: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs4: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs5: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs6: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs7: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs8: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs9: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs10: Annotated[str | None, Field(description=' Max length: 255;')]
    productId: Annotated[str | None, Field(description=' Max length: 255;')]
    inventory: Annotated[str | None, Field(description=' Max length: 255;')]
    salesCode: Annotated[str | None, Field(description=' Max length: 255;')]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class GLAccountGlType(str, Enum):
    AP = 'AP'
    AR = 'AR'
    EE = 'EE'
    EI = 'EI'
    EO = 'EO'
    IA = 'IA'
    IT = 'IT'
    P = 'P'
    PF = 'PF'
    R = 'R'
    RA = 'RA'
    RD = 'RD'
    RE = 'RE'
    RP = 'RP'
    ST = 'ST'
    SD = 'SD'
    ET = 'ET'
    FT = 'FT'
    PT = 'PT'
    WP = 'WP'
    WR = 'WR'


class GLCaption(SparkModel):
    id: int | None
    segment1: Annotated[str | None, Field(description=' Max length: 255;')]
    segment2: Annotated[str | None, Field(description=' Max length: 255;')]
    segment3: Annotated[str | None, Field(description=' Max length: 255;')]
    segment4: Annotated[str | None, Field(description=' Max length: 255;')]
    segment5: Annotated[str | None, Field(description=' Max length: 255;')]
    segment6: Annotated[str | None, Field(description=' Max length: 255;')]
    segment7: Annotated[str | None, Field(description=' Max length: 255;')]
    segment8: Annotated[str | None, Field(description=' Max length: 255;')]
    segment9: Annotated[str | None, Field(description=' Max length: 255;')]
    segment10: Annotated[str | None, Field(description=' Max length: 255;')]
    segment1type: GLCaptionSegment1type | None
    segment2type: GLCaptionSegment1type | None
    segment3type: GLCaptionSegment1type | None
    segment4type: GLCaptionSegment1type | None
    segment5type: GLCaptionSegment1type | None
    segment6type: GLCaptionSegment1type | None
    segment7type: GLCaptionSegment1type | None
    segment8type: GLCaptionSegment1type | None
    segment9type: GLCaptionSegment1type | None
    segment10type: GLCaptionSegment1type | None
    cogs1: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs2: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs3: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs4: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs5: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs6: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs7: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs8: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs9: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs10: Annotated[str | None, Field(description=' Max length: 255;')]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class GLCaptionSegment1type(str, Enum):
    Account = 'Account'
    Class = 'Class'


class GLEntry(SparkModel):
    id: int | None
    type: str | None
    amount: float | None
    description: Annotated[str | None, Field(description=' Max length: 100;')]
    segment1: Annotated[str | None, Field(description=' Max length: 255;')]
    segment2: Annotated[str | None, Field(description=' Max length: 255;')]
    segment3: Annotated[str | None, Field(description=' Max length: 255;')]
    segment4: Annotated[str | None, Field(description=' Max length: 255;')]
    segment5: Annotated[str | None, Field(description=' Max length: 255;')]
    segment6: Annotated[str | None, Field(description=' Max length: 255;')]
    segment7: Annotated[str | None, Field(description=' Max length: 255;')]
    segment8: Annotated[str | None, Field(description=' Max length: 255;')]
    segment9: Annotated[str | None, Field(description=' Max length: 255;')]
    segment10: Annotated[str | None, Field(description=' Max length: 255;')]
    productId: Annotated[str | None, Field(description=' Max length: 255;')]
    cost: float | None
    salesCode: Annotated[str | None, Field(description=' Max length: 255;')]
    inventory: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs1: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs2: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs3: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs4: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs5: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs6: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs7: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs8: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs9: Annotated[str | None, Field(description=' Max length: 255;')]
    cogs10: Annotated[str | None, Field(description=' Max length: 255;')]
    isBatched: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class GLExport(SparkModel):
    exportSettings: GLExportSettings | None
    vendors: list[GLExportVendor] | None
    customers: list[GLExportCustomer] | None
    transactions: list[GLExportTransaction] | None
    expenses: list[GLExportExpense] | None
    expenseBills: list[GLExportExpenseBill] | None
    purchaseTransactions: list[GLExportPurchaseTransaction] | None
    adjustmentTransactions: list[GLExportAdjustmentTransaction] | None
    inventoryTransfers: list[GLExportInventoryTransfer] | None


class GLExportAdjustmentTransaction(SparkModel):
    id: str | None
    documentType: str | None
    documentDate: str | None
    glTypeID: str | None
    accountNumber: str | None
    memo: str | None
    glClass: str | None
    adjustmentDescription: str | None
    adjustmentDetail: list[GLExportAdjustmentTransactionDetail] | None


class GLExportAdjustmentTransactionDetail(SparkModel):
    glClass: str | None
    description: str | None
    memo: str | None
    item: IvItemReference | None
    quantity: int | None
    total: float | None
    cost: float | None
    costAccountNumber: str | None
    inventoryAccountNumber: str | None
    accountNumber: str | None
    productAccountNumber: str | None


class GLExportCustomer(SparkModel):
    company: CompanyReference | None
    companyType: CompanyTypeReference | None
    contact: ContactReference | None
    site: SiteReference | None
    accountNumber: str | None
    billingTerms: BillingTermsReference | None
    billingTermsXref: str | None
    dueDays: int | None
    taxable: bool | None
    taxCode: TaxCodeReference | None
    currency: CurrencyReference | None
    stateTaxXref: str | None
    countyTaxXref: str | None
    cityTaxXref: str | None
    countryTaxXref: str | None
    compositeTaxXref: str | None
    stateTaxRate: float | None
    countyTaxRate: float | None
    cityTaxRate: float | None
    countryTaxRate: float | None
    compositeTaxRate: float | None
    taxGroupRate: float | None
    taxAgencyXref: str | None
    stateTaxAgencyXref: str | None
    countyTaxAgencyXref: str | None
    cityTaxAgencyXref: str | None
    countryTaxAgencyXref: str | None
    compositeTaxAgencyXref: str | None
    taxLevels: list[GLExportCustomerTaxLevel] | None


class GLExportCustomerTaxLevel(SparkModel):
    taxRate: float | None
    taxCodeXref: str | None
    agencyXref: str | None
    taxLevel: int | None


class GLExportExpense(SparkModel):
    id: int | None
    documentDate: str | None
    documentType: str | None
    apAccountNumber: str | None
    apClass: str | None
    accountNumber: str | None
    glClass: str | None
    glTypeId: str | None
    memo: str | None
    description: str | None
    periodStartDate: str | None
    periodEndDate: str | None
    member: MemberReference | None
    vendorNumber: str | None
    company: CompanyReference | None
    companyAccountNumber: str | None
    project: ProjectReference | None
    currency: CurrencyReference | None
    total: float | None
    offset: GLExportExpenseOffset | None


class GLExportExpenseBill(SparkModel):
    id: int | None
    documentDate: str | None
    documentType: str | None
    documentNumber: str | None
    memo: str | None
    glClass: str | None
    apAccountNumber: str | None
    member: MemberReference | None
    vendorNumber: str | None
    currency: CurrencyReference | None
    total: float | None
    detail: list[GLExportExpenseBillDetail] | None


class GLExportExpenseBillDetail(SparkModel):
    id: list[int] | None
    documentDate: str | None
    glTypeId: str | None
    memo: str | None
    company: CompanyReference | None
    accountNumber: str | None
    expenseClass: ClassificationReference | None
    currency: CurrencyReference | None
    total: float | None
    billable: bool | None
    reimbursable: bool | None
    companyAdvance: bool | None


class GLExportExpenseOffset(SparkModel):
    id: int | None
    documentDate: str | None
    documentType: str | None
    accountNumber: str | None
    glTypeId: str | None
    glClass: str | None
    member: MemberReference | None
    memo: str | None
    description: str | None
    total: float | None


class GLExportInventoryTransfer(SparkModel):
    id: str | None
    documentType: str | None
    documentDate: str | None
    accountNumber: str | None
    glClass: str | None
    glTypeId: str | None
    description: str | None
    salesCode: str | None
    memo: str | None
    costAccountNumber: str | None
    inventoryAccountNumber: str | None
    transferId: int | None
    item: IvItemReference | None
    glItemId: str | None
    salesDescription: str | None
    itemDescription: str | None
    currency: CurrencyReference | None
    itemPrice: float | None
    taxable: bool | None
    unitOfMeasure: UnitOfMeasureReference | None
    quantity: float | None
    cost: float | None
    total: float | None
    subCategory: ProductSubCategoryReference | None
    serializedFlag: bool | None
    serialNumbers: str | None
    bin: WarehouseBinReference | None
    warehouse: WarehouseReference | None
    transferFromBin: WarehouseBinReference | None
    transferFromLocationXref: str | None
    transferToBin: WarehouseBinReference | None
    transferToLocationXref: str | None
    locationXref: str | None
    priceLevelXref: str | None
    uomScheduleXref: str | None
    itemTypeXref: str | None
    inventoryXref: str | None
    cogsXref: str | None
    taxNote: str | None
    offset: GLExportInventoryTransferOffset | None


class GLExportInventoryTransferOffset(SparkModel):
    id: int | None
    documentType: str | None
    documentDate: str | None
    accountNumber: str | None
    glClass: str | None
    total: float | None
    memo: str | None
    description: str | None
    glTypeId: str | None


class GLExportPurchaseTransaction(SparkModel):
    id: str | None
    documentDate: str | None
    documentNumber: str | None
    description: str | None
    memo: str | None
    apAccountNumber: str | None
    purchaseDate: str | None
    company: CompanyReference | None
    companyType: CompanyTypeReference | None
    contact: ContactReference | None
    site: SiteReference | None
    purchaseClass: str | None
    freightAmount: float | None
    freightPackingSlip: str | None
    packingSlip: str | None
    dropshipFlag: bool | None
    currency: CurrencyReference | None
    total: float | None
    billingTerms: BillingTermsReference | None
    billingTermsXref: str | None
    dueDays: int | None
    vendorNumber: str | None
    vendorAccountNumber: str | None
    vendorInvoiceDate: str | None
    vendorInvoiceNumber: str | None
    taxAgencyXref: str | None
    stateTaxXref: str | None
    countyTaxXref: str | None
    cityTaxXref: str | None
    shipToCompany: CompanyReference | None
    shipToCompanyAccountNumber: str | None
    shipToCompanyType: CompanyTypeReference | None
    shipToContact: ContactReference | None
    shipToSite: SiteReference | None
    shipToTaxGroup: str | None
    taxCode: TaxCodeReference | None
    taxGroupRate: float | None
    useAvalaraTaxFlag: bool | None
    purchaseHeaderTaxGroup: str | None
    purchaseHeaderTaxableFlag: bool | None
    purchaseHeaderFreightTaxableFlag: bool | None
    taxLevels: list[GLExportPurchaseTransactionTaxLevel] | None
    purchaseDetail: list[GLExportPurchaseTransactionDetail] | None
    purchaseDetailTax: list[GLExportPurchaseTransactionDetailTax] | None


class GLExportPurchaseTransactionDetail(SparkModel):
    id: int | None
    documentDate: str | None
    glClass: str | None
    glTypeId: str | None
    glItemId: str | None
    salesCode: str | None
    description: str | None
    cost: float | None
    memo: str | None
    taxNote: str | None
    vendorNumber: str | None
    accountNumber: str | None
    costAccountNumber: str | None
    inventoryAccountNumber: str | None
    vendorAccountNumber: str | None
    item: IvItemReference | None
    itemDescription: str | None
    salesDescription: str | None
    taxable: bool | None
    itemPrice: float | None
    itemCost: float | None
    unitOfMeasure: UnitOfMeasureReference | None
    quantity: float | None
    total: float | None
    currency: CurrencyReference | None
    serializedFlag: bool | None
    serialNumbers: str | None
    dropShippedFlag: bool | None
    lineNumber: int | None
    warehouseBin: WarehouseBinReference | None
    warehouseSite: SiteReference | None
    subCategory: ProductSubCategoryReference | None
    shipmentMethod: ShipmentMethodReference | None
    itemTypeXref: str | None
    inventoryXref: str | None
    cogsXref: str | None
    uomScheduleXref: str | None
    priceLevelXref: str | None
    locationXref: str | None
    taxCode: TaxCodeReference | None
    purchaseHeaderTaxGroup: str | None
    taxCodeXref: str | None
    taxRate: float | None
    taxAgencyXref: str | None


class GLExportPurchaseTransactionDetailTax(SparkModel):
    id: int | None
    documentDate: str | None
    accountNumber: str | None
    glClass: str | None
    cost: float | None
    salesCode: str | None
    glTypeId: str | None
    glItemId: str | None
    memo: str | None
    vendorNumber: str | None
    vendorAccountNumber: str | None
    costAccountNumber: str | None
    inventoryAccountNumber: str | None
    itemTypeXref: str | None
    inventoryXref: str | None
    cogsXref: str | None
    uomScheduleXref: str | None
    priceLevelXref: str | None
    locationXref: str | None
    item: IvItemReference | None
    taxableFlag: bool | None
    salesDescription: str | None
    itemDescription: str | None
    itemPrice: float | None
    itemCost: float | None
    unitOfMeasure: UnitOfMeasureReference | None
    quantity: float | None
    total: float | None
    currency: CurrencyReference | None
    serializedFlag: bool | None
    serialNumbers: str | None
    dropShippedFlag: bool | None
    lineNumber: int | None
    warehouseSite: SiteReference | None
    warehouseBin: WarehouseBinReference | None
    shipmentMethod: ShipmentMethodReference | None
    subCategory: ProductSubCategoryReference | None
    taxCode: TaxCodeReference | None
    taxRate: float | None
    taxRatePercent: float | None
    taxAgencyXref: str | None
    taxNote: str | None
    purchaseHeaderTaxGroup: str | None


class GLExportPurchaseTransactionTaxLevel(SparkModel):
    taxCodeXref: str | None
    taxLevel: int | None


class GLExportSettings(AgreementTabsCount):
    pass


class GLExportTransaction(SparkModel):
    id: int | None
    glClass: str | None
    glTypeId: str | None
    documentDate: str | None
    documentNumber: str | None
    documentType: str | None
    memo: str | None
    description: str | None
    attention: str | None
    salesTerritory: str | None
    company: CompanyReference | None
    companyType: CompanyTypeReference | None
    companyAccountNumber: str | None
    site: SiteReference | None
    billingTerms: BillingTermsReference | None
    billingTermsXref: str | None
    dueDays: int | None
    dueDate: str | None
    emailDeliveryFlag: bool | None
    printDeliveryFlag: bool | None
    agreementPrePaymentFlag: bool | None
    accountNumber: str | None
    billingType: str | None
    glEntryIds: str | None
    purchaseOrder: PurchaseOrderReference | None
    project: ProjectReference | None
    currency: CurrencyReference | None
    total: float | None
    salesRepId: str | None
    salesRepName: str | None
    taxable: bool | None
    taxableTotal: float | None
    taxCode: TaxCodeReference | None
    taxGroupRate: float | None
    piggyBackFlag: bool | None
    taxAccountNumber: str | None
    salesTax: float | None
    stateTax: float | None
    countyTax: float | None
    cityTax: float | None
    taxableAmount1: float | None
    taxableAmount2: float | None
    taxableAmount3: float | None
    taxableAmount4: float | None
    taxableAmount5: float | None
    taxAgencyXref: str | None
    stateTaxXref: str | None
    countyTaxXref: str | None
    taxId: str | None
    taxDpAppliedFlag: bool | None
    useAvalaraFlag: bool | None
    sendAvalaraTaxFlag: bool | None
    shipToCompany: CompanyReference | None
    shipToCompanyAccountNumber: str | None
    shipToCompanyType: CompanyTypeReference | None
    shipToTaxId: str | None
    shipSite: SiteReference | None
    shipContact: str | None
    detail: list[GLExportTransactionDetail] | None
    taxLevels: list[GLExportTransactionTaxLevel] | None


class GLExportTransactionDetail(SparkModel):
    id: int | None
    documentDate: str | None
    documentType: str | None
    accountNumber: str | None
    glClass: str | None
    glTypeId: str | None
    glItemId: str | None
    invoiceSummaryOption: str | None
    cost: float | None
    salesCode: str | None
    memo: str | None
    description: str | None
    quantity: float | None
    total: float | None
    currency: CurrencyReference | None
    timeEntry: TimeEntryReference | None
    costAccountNumber: str | None
    inventoryAccountNumber: str | None
    productAccountNumber: str | None
    taxCode: TaxCodeReference | None
    taxCodeXref: str | None
    taxAgencyXref: str | None
    taxNote: str | None
    taxRate: float | None
    taxRatePercent: float | None
    taxableFlag: bool | None
    taxable2Flag: bool | None
    taxable3Flag: bool | None
    taxable4Flag: bool | None
    taxable5Flag: bool | None
    item: IvItemReference | None
    product: ProductReference | None
    itemTaxableFlag: bool | None
    itemPrice: float | None
    itemCost: float | None
    itemDescription: str | None
    salesDescription: str | None
    unitOfMeasure: UnitOfMeasureReference | None
    subCategory: ProductSubCategoryReference | None
    serializedFlag: bool | None
    serialNumbers: str | None
    warehouseSite: SiteReference | None
    warehouseBin: WarehouseBinReference | None
    shipmentMethod: ShipmentMethodReference | None
    dropShippedFlag: bool | None
    itemTypeXref: str | None
    inventoryXref: str | None
    cogsXref: str | None
    uomScheduleXref: str | None
    priceLevelXref: str | None
    locationXref: str | None
    taxLevels: list[GLExportTransactionDetailTaxLevel] | None


class GLExportTransactionDetailTaxLevel(SparkModel):
    taxableFlag: bool | None
    taxLevel: int | None


class GLExportTransactionTaxLevel(SparkModel):
    taxAmount: float | None
    taxableAmount: float | None
    taxCodeXref: str | None
    taxLevel: int | None


class GLExportVendor(SparkModel):
    member: MemberReference | None
    vendor: CompanyReference | None
    vendorNumber: str | None
    company: CompanyReference | None
    contact: ContactReference | None
    accountNumber: str | None
    billingTerms: BillingTermsReference | None
    dueDays: int | None
    site: SiteReference | None
    taxCode: TaxCodeReference | None


class GLPath(SparkModel):
    id: int | None
    location: SystemLocationReference | None
    path: Annotated[str | None, Field(description=' Max length: 255;')]
    sqlServerName: Annotated[str | None, Field(description=' Max length: 255;')]
    databaseName: Annotated[str | None, Field(description=' Max length: 100;')]
    lastPaymentSync: datetime | None
    lastPaymentSyncBy: MemberReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class GenericBoardTeamReference(SparkModel):
    id: int | None
    name: str | None
    isProjectTeamFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class GenericIdIdentifierReference(AccountingPackage):
    pass


class GenericNameIdDTO(AgreementApplicationAviablePer):
    pass


class GoogleEmailSetup(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 200;')]
    username: Annotated[str, Field(description=' Max length: 100;')]
    inboxFolder: Annotated[str, Field(description=' Max length: 40;')]
    processedFolder: Annotated[str, Field(description=' Max length: 40;')]
    failedFolder: Annotated[str, Field(description=' Max length: 40;')]
    clientId: Annotated[str | None, Field(description=' Max length: 200;')]
    privateKey: Annotated[str | None, Field(description=' Max length: 4000;')]
    inactiveFlag: bool | None
    emailConnector: EmailConnectorReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class GoogleEmailSetupReference(ActivityReference):
    pass


class Group(SparkModel):
    id: int | None
    name: str
    publicDescription: Annotated[str | None, Field(description=' Max length: 255;')]
    publicFlag: bool | None
    inactiveFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class GroupInfo(ActivityReference):
    pass


class GroupReference(ActivityReference):
    pass


class Holiday(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    allDayFlag: Annotated[
        bool | None,
        Field(
            description='Can be set to false to set a holiday for specific hours (Defaults to True).'
        ),
    ]
    date: date_aliased
    timeStart: str | None
    timeEnd: str | None
    holidayList: HolidayListReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class HolidayInfo(SparkModel):
    id: int | None
    name: str | None
    allDayFlag: Annotated[
        bool | None,
        Field(
            description='Can be set to false to set a holiday for specific hours (Defaults to True).'
        ),
    ]
    date: str | None
    timeStart: str | None
    timeEnd: str | None
    holidayList: HolidayListReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class HolidayList(ContactRelationship):
    pass


class HolidayListInfo(ActivityReference):
    pass


class HolidayListReference(ActivityReference):
    pass


class HttpContent(SparkModel):
    headers: list | None


class HttpMethod(SparkModel):
    get: HttpMethod | None
    put: HttpMethod | None
    post: HttpMethod | None
    delete: HttpMethod | None
    head: HttpMethod | None
    options: HttpMethod | None
    trace: HttpMethod | None
    method: str | None


class HttpRequestMessage(SparkModel):
    version: Version | None
    content: HttpContent | None
    method: HttpMethod | None
    requestUri: str | None
    headers: list | None
    properties: dict[str, dict[str, Any_aliased]] | None


class HttpResponseMessage(SparkModel):
    version: Version | None
    content: HttpContent | None
    statusCode: HttpResponseMessageStatusCode | None
    reasonPhrase: str | None
    headers: list | None
    requestMessage: HttpRequestMessage | None
    isSuccessStatusCode: bool | None


class HttpResponseMessageStatusCode(str, Enum):
    Continue = 'Continue'
    SwitchingProtocols = 'SwitchingProtocols'
    OK = 'OK'
    Created = 'Created'
    Accepted = 'Accepted'
    NonAuthoritativeInformation = 'NonAuthoritativeInformation'
    NoContent = 'NoContent'
    ResetContent = 'ResetContent'
    PartialContent = 'PartialContent'
    MultipleChoices = 'MultipleChoices'
    Ambiguous = 'Ambiguous'
    MovedPermanently = 'MovedPermanently'
    Moved = 'Moved'
    Found = 'Found'
    Redirect = 'Redirect'
    SeeOther = 'SeeOther'
    RedirectMethod = 'RedirectMethod'
    NotModified = 'NotModified'
    UseProxy = 'UseProxy'
    Unused = 'Unused'
    TemporaryRedirect = 'TemporaryRedirect'
    RedirectKeepVerb = 'RedirectKeepVerb'
    BadRequest = 'BadRequest'
    Unauthorized = 'Unauthorized'
    PaymentRequired = 'PaymentRequired'
    Forbidden = 'Forbidden'
    NotFound = 'NotFound'
    MethodNotAllowed = 'MethodNotAllowed'
    NotAcceptable = 'NotAcceptable'
    ProxyAuthenticationRequired = 'ProxyAuthenticationRequired'
    RequestTimeout = 'RequestTimeout'
    Conflict = 'Conflict'
    Gone = 'Gone'
    LengthRequired = 'LengthRequired'
    PreconditionFailed = 'PreconditionFailed'
    RequestEntityTooLarge = 'RequestEntityTooLarge'
    RequestUriTooLong = 'RequestUriTooLong'
    UnsupportedMediaType = 'UnsupportedMediaType'
    RequestedRangeNotSatisfiable = 'RequestedRangeNotSatisfiable'
    ExpectationFailed = 'ExpectationFailed'
    UpgradeRequired = 'UpgradeRequired'
    InternalServerError = 'InternalServerError'
    NotImplemented = 'NotImplemented'
    BadGateway = 'BadGateway'
    ServiceUnavailable = 'ServiceUnavailable'
    GatewayTimeout = 'GatewayTimeout'
    HttpVersionNotSupported = 'HttpVersionNotSupported'


class IRestIdentifiedItem(SparkModel):
    id: int | None


class IdCollection(SparkModel):
    ids: list[int] | None


class Imap(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 200;')]
    imapName: Annotated[str, Field(description=' Max length: 40;')]
    processedName: Annotated[str, Field(description=' Max length: 40;')]
    failedFolder: Annotated[str, Field(description=' Max length: 40;')]
    server: Annotated[str, Field(description=' Max length: 200;')]
    userName: Annotated[str, Field(description=' Max length: 80;')]
    password: Annotated[str | None, Field(description=' Max length: 80;')]
    port: int
    sslFlag: bool | None
    emailConnector: EmailConnectorReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ImapInfo(SparkModel):
    id: int | None
    name: str | None
    emailConnector: EmailConnectorReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ImapSetupReference(ActivityReference):
    pass


class Impact(SparkModel):
    id: int | None
    name: str | None
    description: Annotated[str, Field(description=' Max length: 200;')]
    defaultFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ImportMassMaintenance(SparkModel):
    deletedContactCount: int | None
    deletedCompanyCount: int | None
    message: str | None
    success: bool | None


class InOutBoard(SparkModel):
    id: int | None
    member: MemberReference
    inOutType: InOutTypeReference
    additionalInfo: Annotated[str | None, Field(description=' Max length: 100;')]
    dateBack: datetime
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class InOutType(SparkModel):
    id: int | None
    description: Annotated[str, Field(description=' Max length: 30;')]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class InOutTypeInfo(SparkModel):
    id: int | None
    description: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class InOutTypeReference(ActivityReference):
    pass


class InclusiveRevenueReference(AgreementRevenueReference):
    pass


class Info(SparkModel):
    version: str | None
    isCloud: bool | None
    serverTimeZone: str | None
    licenseBits: list[LicenseBit] | None
    cloudRegion: str | None
    maxWorkFlowRecordsAllowed: int | None


class IntegratorLogin(SparkModel):
    id: int | None
    username: Annotated[str, Field(description=' Max length: 50;')]
    password: Annotated[
        str | None,
        Field(
            description='The password will never be returned in response. Max length: 50;'
        ),
    ]
    canAccessAllRecordsFlag: Annotated[
        bool | None,
        Field(
            description='This flag controls whether the integrator can access only the db records it created, or all system records.'
        ),
    ]
    canAccessAllApisFlag: Annotated[
        bool | None,
        Field(
            description='Setting this flag to true will create an integrator that can access all of the available apis in the system.\n            If this field is set to true, both the member and board fields are required.'
        ),
    ]
    inactiveFlag: bool | None
    dateInactivated: datetime | None
    inactivatedBy: MemberReference | None
    serviceTicketApiFlag: bool | None
    board: BoardReference | None
    serviceBoardCallbackUrl: Annotated[
        str | None, Field(description=' Max length: 1000;')
    ]
    serviceBoardLegacyCallbackFlag: bool | None
    timeEntryApiFlag: bool | None
    member: MemberReference | None
    timeEntryCallbackUrl: Annotated[str | None, Field(description=' Max length: 1000;')]
    timeEntryLegacyCallbackFlag: bool | None
    managedServicesApiFlag: bool | None
    managedServicesAutoChildFlag: bool | None
    managedServicesChildingFlag: Annotated[
        bool | None,
        Field(description='True if integrator is allowed to child configurations.'),
    ]
    contactApiFlag: bool | None
    contactCallbackUrl: Annotated[str | None, Field(description=' Max length: 1000;')]
    contactLegacyCallbackFlag: bool | None
    companyApiFlag: bool | None
    companyCallbackUrl: Annotated[str | None, Field(description=' Max length: 1000;')]
    companyLegacyCallbackFlag: bool | None
    activityApiFlag: bool | None
    activityCallbackUrl: Annotated[str | None, Field(description=' Max length: 1000;')]
    activityLegacyCallbackFlag: bool | None
    invoiceApiFlag: bool | None
    productApiFlag: bool | None
    productCallbackUrl: Annotated[str | None, Field(description=' Max length: 1000;')]
    productLegacyCallbackFlag: bool | None
    opportunityApiFlag: bool | None
    opportunityCallbackUrl: Annotated[
        str | None, Field(description=' Max length: 1000;')
    ]
    opportunityLegacyCallbackFlag: bool | None
    opportunityConversionApiFlag: Annotated[
        bool | None,
        Field(
            description='True if the member has access to the Opportunity Conversion Api.'
        ),
    ]
    memberApiFlag: bool | None
    marketingApiFlag: bool | None
    purchasingApiFlag: bool | None
    purchasingCallbackUrl: Annotated[
        str | None, Field(description=' Max length: 1000;')
    ]
    purchasingLegacyCallbackFlag: bool | None
    reportingApiFlag: bool | None
    systemApiFlag: bool | None
    projectApiFlag: bool | None
    projectCallbackUrl: Annotated[str | None, Field(description=' Max length: 1000;')]
    projectLegacyCallbackFlag: bool | None
    configurationApiFlag: bool | None
    configurationAutoChildFlag: bool | None
    configurationChildlingFlag: Annotated[
        bool | None,
        Field(description='True if integrator is allowed to child configurations.'),
    ]
    configurationCallbackUrl: Annotated[
        str | None, Field(description=' Max length: 1000;')
    ]
    configurationLegacyCallbackFlag: bool | None
    scheduleApiFlag: bool | None
    scheduleCallbackUrl: Annotated[str | None, Field(description=' Max length: 1000;')]
    scheduleLegacyCallbackFlag: bool | None
    agreementApiFlag: bool | None
    agreementCallbackUrl: Annotated[str | None, Field(description=' Max length: 1000;')]
    agreementCallbackLegacyFlag: bool | None
    documentApiFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class IntegratorLoginReference(ActivityReference):
    pass


class IntegratorTag(SparkModel):
    id: int | None
    text: Annotated[str, Field(description=' Max length: 50;')]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class IntegratorTagCollection(SparkModel):
    tags: list[str] | None


class InventoryOnHand(CatalogInventory):
    pass


class Invoice(SparkModel):
    id: int | None
    invoiceNumber: Annotated[
        str | None, Field(description=' Max length: 15; Required On Updates;')
    ]
    type: CommissionBillingMethod
    status: BillingStatusReference | None
    company: CompanyReference
    billToCompany: CompanyReference | None
    shipToCompany: CompanyReference | None
    accountNumber: str | None
    applyToType: InvoiceApplyToType | None
    applyToId: int | None
    attention: Annotated[str | None, Field(description=' Max length: 60;')]
    shipToAttention: Annotated[str | None, Field(description=' Max length: 60;')]
    billingSite: SiteReference | None
    billingSiteAddressLine1: str | None
    billingSiteAddressLine2: str | None
    billingSiteCity: str | None
    billingSiteState: str | None
    billingSiteZip: str | None
    billingSiteCountry: str | None
    shippingSite: SiteReference | None
    shippingSiteAddressLine1: str | None
    shippingSiteAddressLine2: str | None
    shippingSiteCity: str | None
    shippingSiteState: str | None
    shippingSiteZip: str | None
    shippingSiteCountry: str | None
    billingTerms: BillingTermsReference | None
    reference: Annotated[str | None, Field(description=' Max length: 50;')]
    customerPO: Annotated[str | None, Field(description=' Max length: 50;')]
    templateSetupId: Annotated[
        int | None, Field(description='Can be obtained via InvoiceTemplate report.')
    ]
    invoiceTemplate: InvoiceTemplateDetailReference | None
    emailTemplateId: Annotated[
        int | None,
        Field(description='Can be obtained via InvoiceEmailTemplate report.'),
    ]
    addToBatchEmailList: bool | None
    date: datetime | None
    restrictDownpaymentFlag: bool | None
    locationId: Annotated[int | None, Field(description=' Required On Updates;')]
    location: SystemLocationReference | None
    departmentId: Annotated[
        int | None,
        Field(description='departmentId is only required for special invoices.'),
    ]
    department: BillingUnitReference | None
    territoryId: int | None
    territory: SystemLocationReference | None
    topComment: str | None
    bottomComment: str | None
    taxableFlag: bool | None
    taxCode: TaxCodeReference | None
    internalNotes: str | None
    downpaymentPreviouslyTaxedFlag: bool | None
    serviceTotal: float | None
    overrideDownPaymentAmountFlag: bool | None
    currency: CurrencyReference | None
    dueDate: datetime | None
    expenseTotal: float | None
    productTotal: float | None
    previousProgressApplied: float | None
    serviceAdjustmentAmount: float | None
    agreementAmount: float | None
    downpaymentApplied: float | None
    subtotal: float | None
    total: float | None
    remainingDownpayment: float | None
    salesTax: float | None
    adjustmentReason: str | None
    adjustedBy: str | None
    closedBy: str | None
    payments: float | None
    credits: float | None
    balance: float | None
    specialInvoiceFlag: bool | None
    billingSetupReference: BillingSetupReference | None
    ticket: TicketReference | None
    project: ProjectReference | None
    phase: ProjectPhaseReference | None
    salesOrder: SalesOrderReference | None
    agreement: AgreementReference | None
    glBatch: BatchReference | None
    unbatchedBatch: BatchReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    customFields: list[CustomFieldValue] | None


class InvoiceApplyToType(str, Enum):
    All = 'All'
    Agreement = 'Agreement'
    Project = 'Project'
    ProjectPhase = 'ProjectPhase'
    SalesOrder = 'SalesOrder'
    Ticket = 'Ticket'


class InvoiceCommission(SparkModel):
    id: int | None
    member: MemberReference | None
    percent: float | None
    splitPercent: float | None
    adjustment: float | None
    netAmount: float | None
    amount: float | None
    invoice: InvoiceReference | None
    opportunity: OpportunityReference | None
    agreement: AgreementReference | None
    activity: ActivityReference | None
    ticket: TicketReference | None
    project: ProjectReference | None
    salesOrder: SalesOrderReference | None
    adjustedBy: str | None
    adjustedDate: str | None
    adjustmentReason: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class InvoiceEmailTemplate(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    serviceSurvey: ServiceSurveyReference | None
    useSenderFlag: bool | None
    firstName: Annotated[
        str | None,
        Field(
            description='From fields (first name, last name, email address) are required if useSenderFlag is false. Max length: 100;'
        ),
    ]
    lastName: Annotated[
        str | None,
        Field(
            description='From fields (first name, last name, email address) are required if useSenderFlag is false. Max length: 100;'
        ),
    ]
    emailAddress: Annotated[
        str | None,
        Field(
            description='From fields (first name, last name, email address) are required if useSenderFlag is false. Max length: 100;'
        ),
    ]
    subject: Annotated[str, Field(description=' Max length: 200;')]
    body: str | None
    copySenderFlag: bool | None
    invoiceStatus: BillingStatusReference | None
    attachInvoiceFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class InvoiceEmailTemplateInfo(ActivityReference):
    pass


class InvoiceGrouping(SparkModel):
    id: int | None
    name: str
    customerDescription: str
    inactiveFlag: bool | None
    showPriceFlag: bool | None
    showSubItemsFlag: bool | None
    groupParentChildAdditionsFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class InvoiceGroupingReference(SparkModel):
    id: int | None
    name: str | None
    description: str | None
    showPriceFlag: bool | None
    showSubItemsFlag: bool | None
    groupParentChildAdditionsFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class InvoiceInfo(SparkModel):
    id: int | None
    invoice: Invoice | None
    invoiceTemplate: InvoiceTemplate | None
    products: list[ProductItem] | None
    bundledComponentsInfo: list[ProductComponent] | None
    expenses: list[ExpenseEntry] | None
    timeEntries: list[TimeEntry] | None
    logo: DocumentInfo | None
    billingSetup: BillingSetup | None
    agreementBillingInfo: list[AgreementBillingInfo] | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class InvoicePayment(SparkModel):
    id: int | None
    type: str | None
    source: InvoicePaymentSource | None
    invoice: InvoiceReference | None
    credit: InvoiceReference | None
    amount: float | None
    balance: float | None
    invoiceBalance: float | None
    invoiceTotal: float | None
    paymentDate: datetime | None
    appliedBy: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    wisePayPayment: WisePayPayment | None
    paymentSyncStatus: InvoicePaymentPaymentSyncStatus | None
    glBatchID: Annotated[str | None, Field(description=' Max length: 50;')]
    paymentSyncDate: datetime | None
    paymentAccount: str | None
    aRPaymentAccount: str | None


class InvoicePaymentPaymentSyncStatus(str, Enum):
    Unapplied = 'Unapplied'
    Applied = 'Applied'
    Synced = 'Synced'


class InvoicePaymentSource(str, Enum):
    Default = 'Default'
    WisePay = 'WisePay'


class InvoiceReference(SparkModel):
    id: int | None
    identifier: str | None
    billingType: str | None
    applyToType: str | None
    invoiceDate: str | None
    chargeFirmFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class InvoiceRouting(SparkModel):
    id: int | None
    invoice: InvoiceReference | None
    sequenceNumber: int | None
    member: MemberReference | None
    reviewedFlag: bool | None
    dateReviewedUTC: datetime | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class InvoiceTemplate(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    marginLeft: float | None
    marginRight: float | None
    marginTop: float | None
    marginBottom: float | None
    logoVisibleFlag: bool | None
    headerLogoPosition: InvoiceTemplateHeaderLogoPosition | None
    remitToVisibleFlag: bool | None
    headerAddressPosition: InvoiceTemplateHeaderLogoPosition | None
    headerTitleVisibleFlag: bool | None
    headerTitleCaption: Annotated[str | None, Field(description=' Max length: 50;')]
    headerTitlePosition: InvoiceTemplateHeaderLogoPosition | None
    headerTitleFont: InvoiceTemplateHeaderTitleFont | None
    headerTermsVisibleFlag: bool | None
    headerTermsCaption: Annotated[str | None, Field(description=' Max length: 50;')]
    headerDueDateVisibleFlag: bool | None
    headerDueDateCaption: Annotated[str | None, Field(description=' Max length: 50;')]
    headerPoNumberVisibleFlag: bool | None
    headerPoNumberCaption: Annotated[str | None, Field(description=' Max length: 50;')]
    headerReferenceVisibleFlag: bool | None
    headerReferenceCaption: Annotated[str | None, Field(description=' Max length: 50;')]
    headerAccountVisibleFlag: bool | None
    headerAccountCaption: Annotated[str | None, Field(description=' Max length: 50;')]
    headerTaxIdVisibleFlag: bool | None
    headerTaxIdCaption: Annotated[str | None, Field(description=' Max length: 50;')]
    headerShipToVisibleFlag: bool | None
    headerShipToCaption: Annotated[str | None, Field(description=' Max length: 50;')]
    headerHoursBasedExtendedAmountVisibleFlag: bool | None
    payableCaption: Annotated[str | None, Field(description=' Max length: 1000;')]
    serviceHeaderTicketNumberVisibleFlag: bool | None
    serviceHeaderTicketNumberCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    serviceHeaderCompanyNameVisibleFlag: bool | None
    serviceHeaderCompanyNameCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    serviceHeaderSummaryVisibleFlag: bool | None
    serviceHeaderSummaryCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    serviceHeaderContactNameVisibleFlag: bool | None
    serviceHeaderContactNameCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    serviceHeaderDetailDescriptionVisibleFlag: bool | None
    serviceHeaderDetailDescriptionCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    serviceHeaderResolutionVisibleFlag: bool | None
    serviceHeaderResolutionCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    serviceHeaderAmountVisibleFlag: bool | None
    serviceHeaderAmountCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    serviceHeaderBillingMethodVisibleFlag: bool | None
    serviceHeaderBillingMethodCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    serviceHeaderClosedTasksVisibleFlag: bool | None
    serviceHeaderOpenTasksVisibleFlag: bool | None
    serviceHeaderBundledTicketsVisibleFlag: bool | None
    projectHeaderProjectNameVisibleFlag: bool | None
    projectHeaderProjectNameCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    projectHeaderCompanyNameVisibleFlag: bool | None
    projectHeaderCompanyNameCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    projectHeaderOriginalDownpaymentVisibleFlag: bool | None
    projectHeaderOriginalDownpaymentCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    projectHeaderContactNameVisibleFlag: bool | None
    projectHeaderContactNameCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    projectHeaderAmountVisibleFlag: bool | None
    projectHeaderAmountCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    projectHeaderBillingMethodVisibleFlag: bool | None
    projectHeaderBillingMethodCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    projectHeaderBillingTypeVisibleFlag: bool | None
    projectHeaderBillingTypeCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    invoicePaymentAmountVisibleFlag: bool | None
    invoicePaymentAmountCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    invoiceCreditAmountVisibleFlag: bool | None
    invoiceCreditAmountCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    invoiceBalanceDueVisibleFlag: bool | None
    invoiceBalanceDueCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    creditCreditAmountVisibleFlag: bool | None
    creditCreditAmountCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    creditRemainingAmountVisibleFlag: bool | None
    creditRemainingAmountCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    timeDetailVisibleFlag: bool | None
    timeDetailPrimarySortField: str | None
    timeDetailPrimarySortDirection: str | None
    timeDetailSecondarySortField: str | None
    timeDetailSecondarySortDirection: str | None
    timeDetailSubtotalVisibleFlag: bool | None
    timeDetailStartEndTimeVisibleFlag: bool | None
    timeDetailHoursVisibleFlag: bool | None
    timeDetailMembersVisibleFlag: bool | None
    timeDetailBillableVisibleFlag: bool | None
    timeDetailExtendedAmountVisibleFlag: bool | None
    timeDetailDollarAmountsOnHourseBasedVisibleFlag: bool | None
    timeDetailHourlyRateVisibleFlag: bool | None
    timeDetailContactsVisibleFlag: bool | None
    timeDetailNotesVisibleFlag: bool | None
    timeDetailNonBillableCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    timeDetailAgreementVisibleFlag: bool | None
    timeDetailHoursBasedHoursVisibleFlag: bool | None
    timeDetailHoursBasedExtAmountVisibleFlag: bool | None
    timeDetailHoursbasedHourlyRateVisibleFlag: bool | None
    timeDetailAmountBasedHoursVisibleFlag: bool | None
    timeDetailAmountBasedExtAmountVisibleFlag: bool | None
    timeDetailAmountBasedHourlyRateVisibleFlag: bool | None
    timeDetailSRTicketSummaryVisibleFlag: bool | None
    timeDetailSRContactVisibleFlag: bool | None
    timeDetailSRAddressVisibleFlag: bool | None
    timeDetailPmPhaseVisibleFlag: bool | None
    timeDetailPmSummaryVisibleFlag: bool | None
    timeDetailTicketNumberVisibleFlag: bool | None
    timeDetailDatesVisibleFlag: bool | None
    servicesStaffCaption: Annotated[str | None, Field(description=' Max length: 50;')]
    servicesStaffVisibleFlag: bool | None
    servicesAmountCaption: Annotated[str | None, Field(description=' Max length: 50;')]
    servicesAmountVisibleFlag: bool | None
    servicesHoursCaption: Annotated[str | None, Field(description=' Max length: 50;')]
    servicesHoursVisibleFlag: bool | None
    servicesRateCaption: Annotated[str | None, Field(description=' Max length: 50;')]
    servicesRateVisibleFlag: bool | None
    servicesWorkRoleCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    servicesWorkRoleVisibleFlag: bool | None
    servicesWorkTypeCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    servicesWorkTypeVisibleFlag: bool | None
    servicesTotalVisibleFlag: bool | None
    servicesMemberNameVisibleFlag: bool | None
    servicesMemberNameCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    currencyIdVisibleFlag: bool | None
    currencySymbolVisibleFlag: bool | None
    portalFlag: bool | None
    servicesCollapsedFlag: bool | None
    expensesCollapsedFlag: bool | None
    otherChargesCollapsedFlag: bool | None
    expensesTypeCaption: Annotated[str | None, Field(description=' Max length: 50;')]
    expensesStaffCaption: Annotated[str | None, Field(description=' Max length: 50;')]
    expensesAmountCaption: Annotated[str | None, Field(description=' Max length: 50;')]
    expensesTypeVisibleFlag: bool | None
    expensesStaffVisibleFlag: bool | None
    expensesAmountVisibleFlag: bool | None
    expensesTotalVisibleFlag: bool | None
    expenseDetailSubtotalVisibleFlag: bool | None
    expenseDetailMembersVisibleFlag: bool | None
    expenseDetailContactsVisibleFlag: bool | None
    expenseDetailBillableVisibleFlag: bool | None
    expenseDetailExtAmountVisibleFlag: bool | None
    expenseDetailNotesVisibleFlag: bool | None
    expenseDetailPrimarySortField: str | None
    expenseDetailPrimarySortDirection: str | None
    expenseDetailSecondarySortField: str | None
    expenseDetailSecondarySortDirection: str | None
    expenseDetailNonbillableCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    expenseDetailVisibleFlag: bool | None
    expenseDetailAgreementVisibleFlag: bool | None
    expenseDetailAgreementExtAmountVisibleFlag: bool | None
    expenseDetailTicketNumberVisibleFlag: bool | None
    expenseDetailSrTicketSummaryVisibleFlag: bool | None
    expenseDetailSrContactVisibleFlag: bool | None
    expenseDetailSrAddressVisibleFlag: bool | None
    expenseDetailPmPhaseVisibleFlag: bool | None
    expenseDetailPmSummaryVisibleFlag: bool | None
    otherChargesAmountCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    otherChargesAmountVisibleFlag: bool | None
    otherChargesDescriptionCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    otherChargesDescriptionVisibleFlag: bool | None
    otherChargesDisplaySixDecimals: bool | None
    otherChargesItemIdVisibleFlag: bool | None
    otherChargesPriceCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    otherChargesPriceVisibleFlag: bool | None
    otherChargesQuantityCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    otherChargesQuantityVisibleFlag: bool | None
    otherChargesSerialNumberVisibleFlag: bool | None
    otherChargesTotalVisibleFlag: bool | None
    adjustmentDescriptionVisibleFlag: bool | None
    adjustmentDescriptionCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    adjustmentQuantityVisibleFlag: bool | None
    adjustmentQuantityCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    adjustmentAmountVisibleFlag: bool | None
    adjustmentAmountCaption: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    adjustmentAgrTypeVisibleFlag: bool | None
    adjustmentTotalVisibleFlag: bool | None
    adjustmentPriceVisibleFlag: bool | None
    adjustmentPriceCaption: Annotated[str | None, Field(description=' Max length: 50;')]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class InvoiceTemplateDetailReference(ActivityReference):
    pass


class InvoiceTemplateHeaderLogoPosition(str, Enum):
    Center = 'Center'
    LeftSide = 'LeftSide'
    RightSide = 'RightSide'


class InvoiceTemplateHeaderTitleFont(str, Enum):
    Regular = 'Regular'
    RegularBold = 'RegularBold'
    Large = 'Large'
    LargeBold = 'LargeBold'
    ExtraLarge = 'ExtraLarge'
    ExtraLargeBold = 'ExtraLargeBold'


class InvoiceTemplateReference(SparkModel):
    id: Annotated[
        int | None, Field(description='Gets or sets invoice Template Setup Id.')
    ]
    name: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class InvoiceTemplateSetup(SparkModel):
    id: int | None
    name: str | None
    customFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class IvItemReference(SparkModel):
    id: int | None
    identifier: str | None
    serializedFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class KBCategoryReference(ActivityReference):
    pass


class KPI(SparkModel):
    id: int | None
    name: str | None
    category: KPICategoryReference | None
    dateFilter: str | None
    sortOrder: int | None
    inactiveFlag: bool | None


class KPICategory(SparkModel):
    id: int | None
    name: str | None
    sortOrder: int | None


class KPICategoryReference(ActivityReference):
    pass


class KPIReference(ActivityReference):
    pass


class KnowledgeBaseArticle(SparkModel):
    id: int | None
    title: str
    issue: str
    resolution: str
    locationId: int | None
    businessUnitId: int | None
    board: BoardReference | None
    categoryId: int | None
    subCategoryId: int | None
    dateCreated: str | None
    createdBy: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class KnowledgeBaseCategory(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    location: SystemLocationReference | None
    department: SystemDepartmentReference | None
    approver: MemberReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class KnowledgeBaseSettings(SparkModel):
    id: int | None
    requireApproval: bool
    defaultApprover: MemberReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class KnowledgeBaseSubCategory(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    category: KBCategoryReference
    location: SystemLocationReference | None
    department: SystemDepartmentReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class LdapConfiguration(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 100;')]
    server: Annotated[str, Field(description='FQDN of the Server. Max length: 200;')]
    domain: Annotated[
        str, Field(description='Domain Name of the server. Max length: 50;')
    ]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class LdapConfigurationInfo(ActivityReference):
    pass


class LdapConfigurationReference(SparkModel):
    id: int | None
    name: str | None
    server: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class LdapConfigurationTestLink(SparkModel):
    server: Annotated[str | None, Field(description=' Max length: 200;')]


class LegacySubCategory(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    inactiveFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class LegacySubCategoryInfo(SparkModel):
    id: int | None
    name: str | None
    inactiveFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class LicenseBit(SparkModel):
    name: str | None
    activeFlag: bool | None


class Link(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    tableReferenceId: int | None
    url: Annotated[str | None, Field(description=' Max length: 1000;')]
    screenLink: LinkScreenLink | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class LinkClicked(SparkModel):
    id: int | None
    campaignId: int | None
    contactId: int
    dateClicked: datetime | None
    url: Annotated[str, Field(description=' Max length: 2083;')]
    queryString: str | None


class LinkInfo(SparkModel):
    id: int | None
    name: str | None
    screenLink: LinkScreenLink | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class LinkResolveUrlInfo(SparkModel):
    referenceId: int
    url: str | None


class LinkScreenLink(str, Enum):
    Company = 'Company'
    Contact = 'Contact'
    Service = 'Service'
    Invoice = 'Invoice'
    PurchaseOrder = 'PurchaseOrder'
    SalesOrder = 'SalesOrder'


class LocaleInfo(SparkModel):
    id: int | None
    name: str | None
    localeCode: str | None


class LocaleReference(ActivityReference):
    pass


class Location(SparkModel):
    id: int | None
    ownerLevelId: int | None
    structureLevel: CorporateStructureLevelReference
    name: Annotated[str, Field(description=' Max length: 50;')]
    manager: MemberReference | None
    reportsTo: SystemLocationReference | None
    salesRep: Annotated[str | None, Field(description=' Max length: 50;')]
    timeZoneSetup: TimeZoneSetupReference | None
    calendar: CalendarReference | None
    overrideAddressLine1: Annotated[str | None, Field(description=' Max length: 50;')]
    overrideAddressLine2: Annotated[str | None, Field(description=' Max length: 50;')]
    overrideCity: Annotated[str | None, Field(description=' Max length: 50;')]
    overrideState: Annotated[str | None, Field(description=' Max length: 50;')]
    overrideZip: Annotated[str | None, Field(description=' Max length: 12;')]
    overrideCountry: CountryReference | None
    overridePhoneNumber: Annotated[str | None, Field(description=' Max length: 15;')]
    overrideFaxNumber: Annotated[str | None, Field(description=' Max length: 15;')]
    owaUrl: Annotated[str | None, Field(description=' Max length: 100;')]
    payrollXref: Annotated[str | None, Field(description=' Max length: 10;')]
    locationFlag: bool | None
    clientFlag: bool | None
    workRoleIds: list[int] | None
    departmentIds: list[int] | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class LocationDepartment(DepartmentLocationInfo):
    pass


class LocationInfo(SparkModel):
    id: int | None
    name: str | None
    location_flag: bool | None
    structureLevel: CorporateStructureLevelReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class LocationWorkRole(SparkModel):
    id: int | None
    location: SystemLocationReference | None
    workRole: WorkRoleReference | None
    workRoleInactiveFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class LostRevenueReference(AgreementRevenueReference):
    pass


class M365Contact(SparkModel):
    id: int | None
    userPrincipalName: str | None
    displayName: str | None
    contactRecId: int | None
    tenantId: str | None
    m365ContactId: str | None
    department: str | None
    employeeType: str | None
    managerId: str | None
    proxyAddresses: str | None
    proxyAddressesPlain: str | None
    groups: str | None
    directoryRoles: str | None
    assignedLicenses: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class M365ContactSyncInfo(ActivityReference):
    pass


class M365ContactSyncMonitoring(SparkModel):
    id: int | None
    monitoringTypeId: int | None
    emailAddress: str | None
    serviceBoardId: int | None
    serviceBoardStatusId: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class M365ContactSyncProperty(SparkModel):
    id: int | None
    includeExcludeType: M365ContactSyncPropertyIncludeExcludeType | None
    propertyType: M365ContactSyncPropertyPropertyType | None
    excludeIncludeFlag: bool | None
    wildCard: str | None
    companyRecID: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class M365ContactSyncPropertyIncludeExcludeType(str, Enum):
    All = 'All'
    M365Property = 'M365Property'
    None_ = 'None'


class M365ContactSyncPropertyPropertyType(str, Enum):
    City = 'City'
    DepartmentContactSync = 'DepartmentContactSync'
    Email = 'Email'
    DistributionGroup = 'DistributionGroup'
    JobTitle = 'JobTitle'
    AssignedLicenses = 'AssignedLicenses'
    DisplayName = 'DisplayName'
    OfficeLocation = 'OfficeLocation'
    ReportManager = 'ReportManager'
    State = 'State'
    EmployeeType = 'EmployeeType'
    UserType = 'UserType'


class ManagedDeviceAccount(SparkModel):
    id: int | None
    username: str | None
    password: str | None
    managedDevicesIntegration: ManagedDevicesIntegrationReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ManagedDevicesIntegration(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 30;')]
    solution: Annotated[str, Field(description=' Max length: 30;')]
    portalUrl: Annotated[str | None, Field(description=' Max length: 200;')]
    loginBy: ManagedDevicesIntegrationLoginBy
    globalLoginUsername: Annotated[
        str | None,
        Field(
            description='Gets or sets\n            this is only required when globalLoginFlag = true. Max length: 50;'
        ),
    ]
    globalLoginPassword: Annotated[
        str | None,
        Field(
            description='Gets or sets\n            this is only required when globalLoginFlag = true. Max length: 50;'
        ),
    ]
    defaultBillingLevel: ManagedDevicesIntegrationDefaultBillingLevel
    managementItSetupType: str | None
    defaultLocation: SystemLocationReference | None
    defaultDepartment: SystemDepartmentReference | None
    integratorLogin: IntegratorLoginReference | None
    matchOnSerialNumberFlag: bool | None
    disableNewCrossReferencesFlag: bool | None
    configBillCustomerFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ManagedDevicesIntegrationCrossReference(SparkModel):
    id: int | None
    managedDevicesIntegration: ManagedDevicesIntegrationReference | None
    vendorType: Annotated[str | None, Field(description=' Max length: 255;')]
    vendorLevel: Annotated[str | None, Field(description=' Max length: 255;')]
    agreementType: AgreementTypeReference | None
    product: IvItemReference | None
    configurationType: ConfigurationTypeReference | None
    inactiveFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ManagedDevicesIntegrationDefaultBillingLevel(str, Enum):
    Detail = 'Detail'
    Summary = 'Summary'


class ManagedDevicesIntegrationInfo(SparkModel):
    id: int | None
    name: str | None
    solution: str | None
    managementItSetupType: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ManagedDevicesIntegrationLogin(SparkModel):
    id: int | None
    managedDevicesIntegration: ManagedDevicesIntegrationReference | None
    username: Annotated[str, Field(description=' Max length: 50;')]
    password: Annotated[str | None, Field(description=' Max length: 50;')]
    member: MemberReference
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ManagedDevicesIntegrationLoginBy(str, Enum):
    Global = 'Global'
    Member = 'Member'


class ManagedDevicesIntegrationNotification(SparkModel):
    id: int | None
    managedDevicesIntegration: ManagedDevicesIntegrationReference | None
    notifyWho: NotificationRecipientReference
    member: MemberReference | None
    logType: ManagedDevicesIntegrationNotificationLogType
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ManagedDevicesIntegrationNotificationLogType(str, Enum):
    All = 'All'
    Error = 'Error'
    NewManagedSolution = 'NewManagedSolution'
    NewDeviceType = 'NewDeviceType'
    NewConfiguration = 'NewConfiguration'
    NewAddition = 'NewAddition'
    Info = 'Info'


class ManagedDevicesIntegrationReference(ActivityReference):
    pass


class ManagedInformation(SparkModel):
    managementSolutionName: str | None
    managedIdentifier: str | None
    type: str | None
    level: str | None
    childConfigurationsMatchingOn: str | None
    inactivateConfigurationsMatchingOn: str | None
    inactiveConfigurationStatusId: int | None


class Management(SparkModel):
    id: int | None
    runTime: datetime | None
    addedConfigurationStatus: ConfigurationStatusReference
    deletedConfigurationStatus: ConfigurationStatusReference
    integratorLogin: IntegratorLoginReference
    scheduleExecutiveSummaryReportFlag: bool
    executiveSummaryReportScheduleDay: Annotated[
        int | None,
        Field(
            description='Gets or sets\n            this is only required when scheduleExecutiveSummaryReportFlag = true.'
        ),
    ]
    executiveSummaryReportScheduleHour: Annotated[
        int | None,
        Field(
            description='Gets or sets\n            this is only required when scheduleExecutiveSummaryReportFlag = true. Input should be in 24 hour format, ie 2pm is 14.'
        ),
    ]
    executiveSummaryReportScheduleMinute: Annotated[
        int | None,
        Field(
            description='Gets or sets\n            this is only required when scheduleExecutiveSummaryReportFlag = true.'
        ),
    ]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ManagementBackup(SparkModel):
    id: int | None
    type: AgreementTypeReference
    item: CatalogItemReference
    billingLevel: ManagedDevicesIntegrationDefaultBillingLevel
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ManagementItSolution(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 30;')]
    managementItSolutionType: ManagementItSolutionManagementItSolutionType
    managementSolutionName: Annotated[
        str | None,
        Field(
            description='Gets or sets\n            this is only required when managementItSolutionType is Custom. Max length: 30;'
        ),
    ]
    managementServerUrl: Annotated[
        str | None,
        Field(
            description='Gets or sets\n            this is only required for Level Platforms. Max length: 200;'
        ),
    ]
    webserviceOverrideUrl: Annotated[
        str | None,
        Field(
            description='Gets or sets\n            this is only required for Level Platforms when overrideWebServiceLocationFlag is true. Max length: 200;'
        ),
    ]
    portalOverrideLoginUrl: Annotated[
        str | None,
        Field(
            description='Gets or sets\n            this is only required for Level Platforms when overrideLoginLocationFlag is true. Max length: 200;'
        ),
    ]
    globalLoginFlag: bool | None
    globalLoginUsername: Annotated[
        str | None,
        Field(
            description='Gets or sets\n            this is only required when globalLoginFlag = true. Max length: 50;'
        ),
    ]
    globalLoginPassword: Annotated[
        str | None,
        Field(
            description='Gets or sets\n            this is only required when globalLoginFlag = true. Max length: 50;'
        ),
    ]
    usingSslFlag: bool | None
    nAbleUsername: Annotated[
        str | None,
        Field(
            description='Gets or sets\n            this is only required for N-Able solution. Max length: 50;'
        ),
    ]
    nAblePassword: Annotated[
        str | None,
        Field(
            description='Gets or sets\n            this is only required for N-Able solution. Max length: 50;'
        ),
    ]
    overrideWebServiceLocationFlag: bool | None
    overrideLoginLocationFlag: bool | None
    continuumApiUsername: Annotated[
        str | None,
        Field(
            description='Gets or sets\n            this is only required for Continuum solution. Max length: 100;'
        ),
    ]
    continuumApiPassword: Annotated[
        str | None,
        Field(
            description='Gets or sets\n            this is only required for Continuum solution. Max length: 100;'
        ),
    ]
    levelApiUsername: Annotated[
        str | None,
        Field(
            description='Gets or sets\n            this is only required for Level Platforms solution. Max length: 100;'
        ),
    ]
    levelApiPassword: Annotated[
        str | None,
        Field(
            description='Gets or sets\n            this is only required for Level Platforms solution. Max length: 100;'
        ),
    ]
    levelVarDomain: Annotated[
        str | None,
        Field(
            description='Gets or sets\n            this is only required for Level Platforms solution. Max length: 100;'
        ),
    ]
    noDisplayFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ManagementItSolutionAgreementInterfaceParameter(SparkModel):
    id: int | None
    managedDevicesIntegration: ManagedDevicesIntegrationReference | None
    agreementType: AgreementTypeReference
    serverProduct: IvItemReference | None
    workstationProduct: IvItemReference | None
    spamStatsProduct: IvItemReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ManagementItSolutionManagementItSolutionType(str, Enum):
    LevelPlatforms = 'LevelPlatforms'
    NAble = 'NAble'
    Continuum = 'Continuum'
    Custom = 'Custom'


class ManagementLogDocumentInfo(SparkModel):
    fullPathFileName: str | None
    fileSize: str | None


class ManagementNetworkSecurity(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 30;')]
    username: Annotated[str | None, Field(description=' Max length: 50;')]
    password: Annotated[str | None, Field(description=' Max length: 50;')]
    site: Annotated[str, Field(description=' Max length: 100;')]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ManagementReportNotification(SparkModel):
    id: int | None
    notifyWho: NotificationRecipientReference
    member: MemberReference | None
    email: Annotated[str | None, Field(description=' Max length: 50;')]
    globalFlag: bool | None
    company: CompanyReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ManagementReportSetup(SparkModel):
    id: int | None
    scheduledReportDisabledFlag: bool
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ManagementSolutionReference(SparkModel):
    id: int | None
    name: str | None
    setupName: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class Manufacturer(LegacySubCategory):
    pass


class ManufacturerInfo(LegacySubCategoryInfo):
    pass


class ManufacturerReference(ActivityReference):
    pass


class MappedRecordReference(CorporateStructureLevel):
    pass


class MappedType(SparkModel):
    id: int | None
    name: str | None
    table: str | None
    recIdField: str | None
    glType: GLAccountGlType | None
    sortOrder: int | None


class MappedTypeReference(ActivityReference):
    pass


class MarketDescription(ContactRelationship):
    pass


class MarketDescriptionInfo(ActivityReference):
    pass


class MarketDescriptionReference(ActivityReference):
    pass


class MarketingCompany(SparkModel):
    id: int | None
    groupId: int | None
    defaultContactFlag: bool | None
    allContactsFlag: bool | None
    unsubscribeFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class MarketingContact(SparkModel):
    id: int | None
    groupId: int | None
    note: Annotated[str | None, Field(description=' Max length: 50;')]
    unsubscribeFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class MarketplaceImport(SparkModel):
    id: int | None
    marketplaceImportType: MarketplaceImportMarketplaceImportType | None
    marketplaceObject: list | None
    requiredFields: list[str] | None


class MarketplaceImportMarketplaceImportType(str, Enum):
    Agreements = 'Agreements'
    Configurations = 'Configurations'
    CRMSurveys = 'CRMSurveys'
    CustomReports = 'CustomReports'
    CustomerPortalTypes = 'CustomerPortalTypes'
    HTMLEmailTemplates = 'HTMLEmailTemplates'
    Products = 'Products'
    ProjectBoards = 'ProjectBoards'
    ProjectTemplates = 'ProjectTemplates'
    ReportWriterReports = 'ReportWriterReports'
    ServiceBoards = 'ServiceBoards'
    TicketTemplates = 'TicketTemplates'
    Views = 'Views'


class Member(SparkModel):
    id: int | None
    identifier: Annotated[str, Field(description=' Max length: 15;')]
    password: Annotated[
        str | None,
        Field(
            description='ConditionallyRequired. API Member will get random password generated Max length: 60;'
        ),
    ]
    disableOnlineFlag: bool | None
    licenseClass: Annotated[
        MemberLicenseClass,
        Field(
            description='F = Full Member, A = API Member, C = StreamlineIT Member, X = Subcontractor Member'
        ),
    ]
    notes: str | None
    employeeIdentifer: Annotated[str | None, Field(description=' Max length: 10;')]
    vendorNumber: str | None
    enableMobileGpsFlag: bool | None
    inactiveDate: datetime | None
    inactiveFlag: bool | None
    lastLogin: str | None
    clientId: str | None
    token: str | None
    firstName: Annotated[str, Field(description=' Max length: 30;')]
    middleInitial: Annotated[str | None, Field(description=' Max length: 1;')]
    lastName: Annotated[str, Field(description=' Max length: 30;')]
    hireDate: datetime
    country: CountryReference | None
    photo: DocumentReference | None
    officeEmail: Annotated[str | None, Field(description=' Max length: 250;')]
    mobileEmail: Annotated[str | None, Field(description=' Max length: 250;')]
    homeEmail: Annotated[str | None, Field(description=' Max length: 250;')]
    defaultEmail: MemberDefaultEmail
    primaryEmail: Annotated[str | None, Field(description=' Max length: 250;')]
    officePhone: Annotated[str | None, Field(description=' Max length: 15;')]
    officeExtension: Annotated[str | None, Field(description=' Max length: 10;')]
    mobilePhone: Annotated[str | None, Field(description=' Max length: 15;')]
    mobileExtension: Annotated[str | None, Field(description=' Max length: 10;')]
    homePhone: Annotated[str | None, Field(description=' Max length: 15;')]
    homeExtension: Annotated[str | None, Field(description=' Max length: 10;')]
    defaultPhone: MemberDefaultEmail
    securityRole: SecurityRoleReference
    office365: MemberOffice365 | None
    mapiName: str | None
    calendarSyncIntegrationFlag: bool | None
    authenticationServiceType: MemberAuthenticationServiceType | None
    timebasedOneTimePasswordActivated: bool | None
    enableLdapAuthenticationFlag: bool | None
    ldapConfiguration: LdapConfigurationReference | None
    ldapUserName: Annotated[str | None, Field(description=' Max length: 50;')]
    directionalSync: DirectionalSyncReference | None
    ssoSettings: MemberSsoSettingsReference | None
    signature: str | None
    phoneIntegrationType: MemberPhoneIntegrationType | None
    useBrowserLanguageFlag: bool | None
    title: str | None
    reportCard: ReportCardReference | None
    enableMobileFlag: bool | None
    type: MemberTypeReference | None
    timeZone: TimeZoneSetupReference | None
    partnerPortalFlag: bool | None
    stsUserAdminUrl: str | None
    toastNotificationFlag: bool | None
    memberPersonas: list[int] | None
    adminFlag: bool | None
    structureLevel: StructureReference | None
    securityLocation: SystemLocationReference | None
    defaultLocation: SystemLocationReference | None
    defaultDepartment: SystemDepartmentReference | None
    reportsTo: MemberReference | None
    restrictLocationFlag: bool | None
    restrictDepartmentFlag: bool | None
    workRole: WorkRoleReference | None
    workType: WorkTypeReference | None
    timeApprover: MemberReference | None
    expenseApprover: MemberReference | None
    billableForecast: float | None
    dailyCapacity: float | None
    hourlyCost: float | None
    hourlyRate: float | None
    includeInUtilizationReportingFlag: bool | None
    requireExpenseEntryFlag: bool | None
    requireTimeSheetEntryFlag: bool | None
    requireStartAndEndTimeOnTimeEntryFlag: bool | None
    allowInCellEntryOnTimeSheet: bool | None
    enterTimeAgainstCompanyFlag: bool | None
    allowExpensesEnteredAgainstCompaniesFlag: bool | None
    timeReminderEmailFlag: bool | None
    daysTolerance: int | None
    minimumHours: float | None
    timeSheetStartDate: str | None
    serviceDefaultLocation: SystemLocationReference | None
    serviceDefaultDepartment: SystemDepartmentReference | None
    serviceDefaultBoard: BoardReference | None
    restrictServiceDefaultLocationFlag: bool | None
    restrictServiceDefaultDepartmentFlag: bool | None
    excludedServiceBoardIds: list[int] | None
    teams: list[int] | None
    serviceBoardTeamIds: list[int] | None
    projectDefaultLocation: SystemLocationReference | None
    projectDefaultDepartment: SystemDepartmentReference | None
    projectDefaultBoard: ProjectBoardReference | None
    restrictProjectDefaultLocationFlag: bool | None
    restrictProjectDefaultDepartmentFlag: bool | None
    excludedProjectBoardIds: list[int] | None
    scheduleDefaultLocation: SystemLocationReference | None
    scheduleDefaultDepartment: SystemDepartmentReference | None
    scheduleCapacity: float | None
    serviceLocation: ServiceLocationReference | None
    restrictScheduleFlag: bool | None
    hideMemberInDispatchPortalFlag: bool | None
    calendar: CalendarReference | None
    salesDefaultLocation: SystemLocationReference | None
    restrictDefaultSalesTerritoryFlag: bool | None
    warehouse: WarehouseReference | None
    warehouseBin: WarehouseBinReference | None
    restrictDefaultWarehouseFlag: bool | None
    restrictDefaultWarehouseBinFlag: bool | None
    companyActivityTabFormat: MemberCompanyActivityTabFormat | None
    invoiceTimeTabFormat: MemberCompanyActivityTabFormat | None
    invoiceScreenDefaultTabFormat: MemberInvoiceScreenDefaultTabFormat | None
    invoicingDisplayOptions: MemberInvoicingDisplayOptions | None
    agreementInvoicingDisplayOptions: MemberInvoicingDisplayOptions | None
    autoStartStopwatch: bool | None
    autoPopupQuickNotesWithStopwatch: bool | None
    globalSearchDefaultTicketFilter: MemberGlobalSearchDefaultTicketFilter | None
    globalSearchDefaultSort: MemberGlobalSearchDefaultSort | None
    phoneSource: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    copyPodLayouts: bool | None
    copySharedDefaultViews: bool | None
    copyColumnLayoutsAndFilters: bool | None
    fromMemberRecId: int | None
    fromMemberTemplateRecId: int | None
    customFields: list[CustomFieldValue] | None


class MemberAccrual(SparkModel):
    id: int | None
    accrualType: MemberAccrualAccrualType
    year: int
    hours: float
    reason: str
    member: MemberReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class MemberAccrualAccrualType(str, Enum):
    Holiday = 'Holiday'
    PTO = 'PTO'
    Sick = 'Sick'
    Vacation = 'Vacation'


class MemberAuthenticationServiceType(str, Enum):
    AuthAnvil = 'AuthAnvil'
    GoogleAuthenticator = 'GoogleAuthenticator'
    Email = 'Email'


class MemberCertification(SparkModel):
    id: int | None
    certification: CertificationReference
    percentComplete: int | None
    dateReceived: datetime | None
    dateExpires: datetime | None
    certificationNumber: Annotated[str | None, Field(description=' Max length: 50;')]
    notes: str | None
    member: MemberReference | None
    company: CompanyReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class MemberCompanyActivityTabFormat(str, Enum):
    SummaryList = 'SummaryList'
    DetailList = 'DetailList'


class MemberDeactivation(SparkModel):
    activity: MemberDeactivationItem | None
    serviceTeam: MemberDeactivationItem | None
    companyTeam: Annotated[
        list[MemberDeactivationCompanyTeam] | None,
        Field(description='A list of customers for which the member holds a team role'),
    ]
    workflowEmail: MemberDeactivationItem | None
    serviceStatusWorkflow: list[MemberDeactivationStatusWorkflow] | None
    ticketTemplate: MemberDeactivationItem | None
    opportunity: MemberDeactivationItem | None
    salesTeam: MemberDeactivationItem | None
    projectManager: MemberDeactivationItem | None
    projectTimeApprover: MemberDeactivationItem | None
    projectExpenseApprover: MemberDeactivationItem | None
    knowledgeBaseArticle: MemberDeactivationItem | None
    myCompanyPresident: MemberDeactivationItem | None
    myCompanyCOO: MemberDeactivationItem | None
    myCompanyController: MemberDeactivationItem | None
    myCompanyDispatch: MemberDeactivationItem | None
    myCompanyServiceManager: MemberDeactivationItem | None
    myCompanyDutyManagerRole: MemberDeactivationItem | None
    departmentManager: MemberDeactivationItem | None
    dispatchMember: MemberDeactivationItem | None
    serviceManager: MemberDeactivationItem | None
    dutyManager: MemberDeactivationItem | None
    sendFromEmailNotify: MemberDeactivationItem | None
    deleteOpenTimeSheetsFlag: Annotated[
        bool | None,
        Field(
            description='By default, this is set to false\n            If there is any open timesheets, system will return error message\n            that there is open timesheets still attached to this member\n            If user would like to delete member with open timesheets, they can set this boolean to TRUE\n            System will delete member and any associated open timesheets'
        ),
    ]


class MemberDeactivationCompanyTeam(SparkModel):
    id: int | None
    name: str | None
    reAssignToContact: ContactReference | None
    count: int | None
    reAssignToMember: MemberReference | None


class MemberDeactivationItem(SparkModel):
    count: int | None
    reAssignToMember: MemberReference | None


class MemberDeactivationStatusWorkflow(SparkModel):
    id: int | None
    name: str | None
    count: int | None
    reAssignToMember: MemberReference | None


class MemberDefaultEmail(str, Enum):
    Office = 'Office'
    Mobile = 'Mobile'
    Home = 'Home'


class MemberDelegation(SparkModel):
    id: int | None
    delegationType: MemberDelegationDelegationType
    delegatedTo: MemberReference
    dateStart: datetime
    dateEnd: datetime
    member: MemberReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class MemberDelegationDelegationType(str, Enum):
    Approval = 'Approval'
    Project = 'Project'


class MemberForCalSync(SparkModel):
    id: int | None
    memberId: str | None
    office365Id: str | None
    mapiName: str | None
    calendarSyncIntegrationFlag: bool | None


class MemberGlobalSearchDefaultSort(str, Enum):
    None_ = 'None'
    LastUpdatedDesc = 'LastUpdatedDesc'
    LastUpdatedAsc = 'LastUpdatedAsc'
    CreatedDesc = 'CreatedDesc'
    CreatedAsc = 'CreatedAsc'


class MemberGlobalSearchDefaultTicketFilter(str, Enum):
    OpenRecords = 'OpenRecords'
    ClosedRecords = 'ClosedRecords'
    AllRecords = 'AllRecords'


class MemberInfo(SparkModel):
    id: int | None
    identifier: str | None
    firstName: str | None
    middleInitial: str | None
    lastName: str | None
    fullName: str | None
    defaultEmail: str | None
    photo: DocumentReference | None
    licenseClass: Annotated[
        MemberLicenseClass | None,
        Field(
            description='F = Full Member, A = API Member, C = StreamlineIT Member, X = Subcontractor Member'
        ),
    ]
    inactiveFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class MemberInvoiceScreenDefaultTabFormat(str, Enum):
    ShowInvoicingTab = 'ShowInvoicingTab'
    ShowAgreementInvoicingTab = 'ShowAgreementInvoicingTab'


class MemberInvoicingDisplayOptions(str, Enum):
    RemainOnInvoicingScreen = 'RemainOnInvoicingScreen'
    ShowRecentInvoices = 'ShowRecentInvoices'


class MemberLicenseClass(str, Enum):
    A = 'A'
    C = 'C'
    F = 'F'
    X = 'X'


class MemberLinkSsoUser(SparkModel):
    ssoUserId: Annotated[str | None, Field(description=' Max length: 100;')]


class MemberNotificationSetting(SparkModel):
    id: int | None
    notificationType: MemberNotificationSettingNotificationType
    notificationTrigger: MemberNotificationSettingNotificationTrigger
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class MemberNotificationSettingNotificationTrigger(str, Enum):
    ActivityStatusReq = 'ActivityStatusReq'
    CustomerUpdated = 'CustomerUpdated'
    ExpenseReport = 'ExpenseReport'
    TicketStatusChange = 'TicketStatusChange'
    TicketStatusRequest = 'TicketStatusRequest'
    TimeNagApprover = 'TimeNagApprover'
    TimeNagMember = 'TimeNagMember'
    TimeSheet = 'TimeSheet'
    WorkflowRules = 'WorkflowRules'


class MemberNotificationSettingNotificationType(str, Enum):
    Email = 'Email'
    Push = 'Push'


class MemberOffice365(SparkModel):
    id: str | None
    name: str | None


class MemberPersona(SparkModel):
    id: int | None
    jobRolePercentage: int | None
    name: Annotated[str, Field(description=' Max length: 20;')]
    personaId: int
    member: MemberReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class MemberPhoneIntegrationType(str, Enum):
    TAPI = 'TAPI'
    SKYPE = 'SKYPE'
    TEL = 'TEL'
    CALLTO = 'CALLTO'
    NONE = 'NONE'


class MemberReference(SparkModel):
    id: int | None
    identifier: str | None
    name: str | None
    dailyCapacity: float | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class MemberSkill(SparkModel):
    id: int | None
    skill: SkillReference
    skillLevel: MemberSkillSkillLevel
    certifiedFlag: bool | None
    yearsExperience: int | None
    notes: str | None
    member: MemberReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class MemberSkillSkillLevel(str, Enum):
    Beginner = 'Beginner'
    Intermediate = 'Intermediate'
    Advanced = 'Advanced'
    Expert = 'Expert'


class MemberSsoSettingsReference(SparkModel):
    id: int | None
    ssoUserId: str | None
    userName: str | None
    email: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class MemberSsoToken(SparkModel):
    token: str | None


class MemberTemplate(SparkModel):
    id: int | None
    identifier: Annotated[str, Field(description=' Max length: 50;')]
    templateDescription: Annotated[str | None, Field(description=' Max length: 1024;')]
    title: str | None
    reportCard: ReportCardReference | None
    enableMobileFlag: bool | None
    type: MemberTypeReference | None
    timeZone: TimeZoneSetupReference | None
    partnerPortalFlag: bool | None
    stsUserAdminUrl: str | None
    toastNotificationFlag: bool | None
    memberPersonas: list[int] | None
    adminFlag: bool | None
    structureLevel: StructureReference | None
    securityLocation: SystemLocationReference | None
    defaultLocation: SystemLocationReference | None
    defaultDepartment: SystemDepartmentReference | None
    reportsTo: MemberReference | None
    restrictLocationFlag: bool | None
    restrictDepartmentFlag: bool | None
    workRole: WorkRoleReference | None
    workType: WorkTypeReference | None
    timeApprover: MemberReference | None
    expenseApprover: MemberReference | None
    billableForecast: float | None
    dailyCapacity: float | None
    hourlyCost: float | None
    hourlyRate: float | None
    includeInUtilizationReportingFlag: bool | None
    requireExpenseEntryFlag: bool | None
    requireTimeSheetEntryFlag: bool | None
    requireStartAndEndTimeOnTimeEntryFlag: bool | None
    allowInCellEntryOnTimeSheet: bool | None
    enterTimeAgainstCompanyFlag: bool | None
    allowExpensesEnteredAgainstCompaniesFlag: bool | None
    timeReminderEmailFlag: bool | None
    daysTolerance: int | None
    minimumHours: float | None
    timeSheetStartDate: str | None
    serviceDefaultLocation: SystemLocationReference | None
    serviceDefaultDepartment: SystemDepartmentReference | None
    serviceDefaultBoard: BoardReference | None
    restrictServiceDefaultLocationFlag: bool | None
    restrictServiceDefaultDepartmentFlag: bool | None
    excludedServiceBoardIds: list[int] | None
    teams: list[int] | None
    serviceBoardTeamIds: list[int] | None
    projectDefaultLocation: SystemLocationReference | None
    projectDefaultDepartment: SystemDepartmentReference | None
    projectDefaultBoard: ProjectBoardReference | None
    restrictProjectDefaultLocationFlag: bool | None
    restrictProjectDefaultDepartmentFlag: bool | None
    excludedProjectBoardIds: list[int] | None
    scheduleDefaultLocation: SystemLocationReference | None
    scheduleDefaultDepartment: SystemDepartmentReference | None
    scheduleCapacity: float | None
    serviceLocation: ServiceLocationReference | None
    restrictScheduleFlag: bool | None
    hideMemberInDispatchPortalFlag: bool | None
    calendar: CalendarReference | None
    salesDefaultLocation: SystemLocationReference | None
    restrictDefaultSalesTerritoryFlag: bool | None
    warehouse: WarehouseReference | None
    warehouseBin: WarehouseBinReference | None
    restrictDefaultWarehouseFlag: bool | None
    restrictDefaultWarehouseBinFlag: bool | None
    companyActivityTabFormat: MemberCompanyActivityTabFormat | None
    invoiceTimeTabFormat: MemberCompanyActivityTabFormat | None
    invoiceScreenDefaultTabFormat: MemberInvoiceScreenDefaultTabFormat | None
    invoicingDisplayOptions: MemberInvoicingDisplayOptions | None
    agreementInvoicingDisplayOptions: MemberInvoicingDisplayOptions | None
    autoStartStopwatch: bool | None
    autoPopupQuickNotesWithStopwatch: bool | None
    globalSearchDefaultTicketFilter: MemberGlobalSearchDefaultTicketFilter | None
    globalSearchDefaultSort: MemberGlobalSearchDefaultSort | None
    phoneSource: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    copyPodLayouts: bool | None
    copySharedDefaultViews: bool | None
    copyColumnLayoutsAndFilters: bool | None
    fromMemberRecId: int | None
    fromMemberTemplateRecId: int | None
    customFields: list[CustomFieldValue] | None


class MemberType(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 30;')]
    inactiveFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class MemberTypeInfo(LegacySubCategoryInfo):
    pass


class MemberTypeReference(ActivityReference):
    pass


class MenuEntry(SparkModel):
    id: int | None
    menuLocation: MenuLocationReference
    caption: Annotated[str, Field(description=' Max length: 50;')]
    link: Annotated[str, Field(description=' Max length: 2000;')]
    newWindowFlag: bool
    locationIds: list[int] | None
    origin: Annotated[str | None, Field(description=' Max length: 2000;')]
    clientId: Annotated[
        str | None,
        Field(description='Only required if not already set Max length: 36;'),
    ]
    addAllLocations: bool | None
    removeAllLocations: bool | None
    smallMenuIconId: int | None
    largeMenuIconId: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class MenuEntryLocation(SparkModel):
    id: int | None
    location: SystemLocationReference
    menuEntry: SystemMenuEntryReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class MenuLocationReference(ActivityReference):
    pass


class MinimumStockByWarehouse(SparkModel):
    id: int | None
    warehouse: WarehouseReference
    minimumStock: int
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class MyAccount(SparkModel):
    id: int | None
    identifier: Annotated[str, Field(description=' Max length: 15;')]
    password: Annotated[
        str | None,
        Field(
            description='ConditionallyRequired. API Member will get random password generated Max length: 60;'
        ),
    ]
    firstName: Annotated[str, Field(description=' Max length: 30;')]
    middleInitial: Annotated[str | None, Field(description=' Max length: 1;')]
    lastName: Annotated[str, Field(description=' Max length: 30;')]
    title: Annotated[str | None, Field(description=' Max length: 50;')]
    reportCard: ReportCardReference | None
    licenseClass: Annotated[
        MemberLicenseClass,
        Field(
            description='F = Full Member, A = API Member, C = StreamlineIT Member, X = Subcontractor Member'
        ),
    ]
    disableOnlineFlag: bool | None
    enableMobileFlag: bool | None
    type: MemberTypeReference | None
    employeeIdentifer: Annotated[str | None, Field(description=' Max length: 10;')]
    vendorNumber: str | None
    notes: str | None
    timeZone: TimeZoneSetupReference
    country: CountryReference | None
    serviceBoardTeamIds: list[int] | None
    enableMobileGpsFlag: bool | None
    inactiveDate: datetime | None
    inactiveFlag: bool | None
    lastLogin: str | None
    photo: DocumentReference | None
    partnerPortalFlag: bool | None
    clientId: str | None
    stsUserAdminUrl: str | None
    token: str | None
    toastNotificationFlag: bool | None
    memberPersonas: list[int] | None
    office365: MemberOffice365 | None
    officeEmail: Annotated[str | None, Field(description=' Max length: 250;')]
    officePhone: Annotated[str | None, Field(description=' Max length: 15;')]
    officeExtension: Annotated[str | None, Field(description=' Max length: 10;')]
    mobileEmail: Annotated[str | None, Field(description=' Max length: 250;')]
    mobilePhone: Annotated[str | None, Field(description=' Max length: 15;')]
    mobileExtension: Annotated[str | None, Field(description=' Max length: 10;')]
    homeEmail: Annotated[str | None, Field(description=' Max length: 250;')]
    homePhone: Annotated[str | None, Field(description=' Max length: 15;')]
    homeExtension: Annotated[str | None, Field(description=' Max length: 10;')]
    defaultEmail: MemberDefaultEmail
    primaryEmail: Annotated[str | None, Field(description=' Max length: 250;')]
    defaultPhone: MemberDefaultEmail
    defaultLocation: SystemLocationReference
    defaultDepartment: SystemDepartmentReference
    reportsTo: MemberReference | None
    workRole: WorkRoleReference
    workType: WorkTypeReference | None
    timeApprover: MemberReference
    expenseApprover: MemberReference
    billableForecast: float | None
    dailyCapacity: float | None
    includeInUtilizationReportingFlag: bool | None
    requireExpenseEntryFlag: bool | None
    requireTimeSheetEntryFlag: bool | None
    requireStartAndEndTimeOnTimeEntryFlag: bool | None
    allowInCellEntryOnTimeSheet: bool | None
    enterTimeAgainstCompanyFlag: bool | None
    allowExpensesEnteredAgainstCompaniesFlag: bool | None
    timeReminderEmailFlag: bool | None
    daysTolerance: int | None
    minimumHours: float | None
    timeSheetStartDate: datetime | None
    hireDate: datetime
    serviceDefaultLocation: SystemLocationReference | None
    serviceDefaultDepartment: SystemDepartmentReference | None
    serviceDefaultBoard: BoardReference | None
    projectDefaultLocation: SystemLocationReference | None
    projectDefaultDepartment: SystemDepartmentReference | None
    projectDefaultBoard: ProjectBoardReference | None
    scheduleDefaultLocation: SystemLocationReference | None
    scheduleDefaultDepartment: SystemDepartmentReference | None
    scheduleCapacity: float | None
    serviceLocation: ServiceLocationReference | None
    hideMemberInDispatchPortalFlag: bool | None
    calendar: CalendarReference | None
    salesDefaultLocation: SystemLocationReference
    warehouse: WarehouseReference | None
    warehouseBin: WarehouseBinReference | None
    mapiName: str | None
    calendarSyncIntegrationFlag: bool | None
    companyActivityTabFormat: MemberCompanyActivityTabFormat
    invoiceTimeTabFormat: MemberCompanyActivityTabFormat
    invoiceScreenDefaultTabFormat: MemberInvoiceScreenDefaultTabFormat
    invoicingDisplayOptions: MemberInvoicingDisplayOptions
    agreementInvoicingDisplayOptions: MemberInvoicingDisplayOptions
    authenticationServiceType: MemberAuthenticationServiceType | None
    timebasedOneTimePasswordActivated: bool | None
    directionalSync: DirectionalSyncReference | None
    autoStartStopwatch: bool | None
    autoPopupQuickNotesWithStopwatch: bool | None
    signature: str | None
    globalSearchDefaultTicketFilter: MemberGlobalSearchDefaultTicketFilter | None
    globalSearchDefaultSort: MemberGlobalSearchDefaultSort | None
    phoneSource: str | None
    phoneIntegrationType: MemberPhoneIntegrationType | None
    useBrowserLanguageFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    copyPodLayouts: bool | None
    copySharedDefaultViews: bool | None
    copyColumnLayoutsAndFilters: bool | None
    fromMemberRecId: int | None
    customFields: list[CustomFieldValue] | None


class MyMember(SparkModel):
    id: int | None
    identifier: str | None
    password: Annotated[
        str | None,
        Field(
            description='ConditionallyRequired. API Member will get random password generated'
        ),
    ]
    firstName: str | None
    middleInitial: str | None
    lastName: str | None
    title: str | None
    reportCard: ReportCardReference | None
    licenseClass: Annotated[
        MemberLicenseClass | None,
        Field(
            description='F = Full Member, A = API Member, C = StreamlineIT Member, X = Subcontractor Member'
        ),
    ]
    disableOnlineFlag: bool | None
    enableMobileFlag: bool | None
    type: MemberTypeReference | None
    employeeIdentifer: str | None
    vendorNumber: str | None
    notes: str | None
    timeZone: TimeZoneSetupReference | None
    country: CountryReference | None
    serviceBoardTeamIds: list[int] | None
    enableMobileGpsFlag: bool | None
    inactiveDate: str | None
    inactiveFlag: bool | None
    lastLogin: str | None
    photo: DocumentReference | None
    toastNotificationFlag: bool | None
    officeEmail: str | None
    officePhone: str | None
    officeExtension: str | None
    mobileEmail: str | None
    mobilePhone: str | None
    mobileExtension: str | None
    homeEmail: str | None
    homePhone: str | None
    homeExtension: str | None
    defaultEmail: MemberDefaultEmail | None
    defaultPhone: MemberDefaultEmail | None
    securityRole: SecurityRoleReference | None
    adminFlag: bool | None
    structureLevel: StructureReference | None
    securityLocation: SystemLocationReference | None
    defaultLocation: SystemLocationReference | None
    defaultDepartment: SystemDepartmentReference | None
    reportsTo: MemberReference | None
    restrictLocationFlag: bool | None
    restrictDepartmentFlag: bool | None
    workRole: WorkRoleReference | None
    workType: WorkTypeReference | None
    timeApprover: MemberReference | None
    expenseApprover: MemberReference | None
    billableForecast: float | None
    dailyCapacity: float | None
    hourlyCost: float | None
    hourlyRate: float | None
    includeInUtilizationReportingFlag: bool | None
    requireExpenseEntryFlag: bool | None
    requireTimeSheetEntryFlag: bool | None
    requireStartAndEndTimeOnTimeEntryFlag: bool | None
    allowInCellEntryOnTimeSheet: bool | None
    enterTimeAgainstCompanyFlag: bool | None
    allowExpensesEnteredAgainstCompaniesFlag: bool | None
    timeReminderEmailFlag: bool | None
    daysTolerance: int | None
    minimumHours: float | None
    timeSheetStartDate: str | None
    hireDate: str | None
    serviceDefaultLocation: SystemLocationReference | None
    serviceDefaultDepartment: SystemDepartmentReference | None
    serviceDefaultBoard: BoardReference | None
    restrictServiceDefaultLocationFlag: bool | None
    restrictServiceDefaultDepartmentFlag: bool | None
    excludedServiceBoardIds: list[int] | None
    projectDefaultLocation: SystemLocationReference | None
    projectDefaultDepartment: SystemDepartmentReference | None
    projectDefaultBoard: ProjectBoardReference | None
    restrictProjectDefaultLocationFlag: bool | None
    restrictProjectDefaultDepartmentFlag: bool | None
    excludedProjectBoardIds: list[int] | None
    scheduleDefaultLocation: SystemLocationReference | None
    scheduleDefaultDepartment: SystemDepartmentReference | None
    scheduleCapacity: float | None
    serviceLocation: ServiceLocationReference | None
    restrictScheduleFlag: bool | None
    hideMemberInDispatchPortalFlag: bool | None
    calendar: CalendarReference | None
    salesDefaultLocation: SystemLocationReference | None
    restrictDefaultSalesTerritoryFlag: bool | None
    warehouse: WarehouseReference | None
    warehouseBin: WarehouseBinReference | None
    restrictDefaultWarehouseFlag: bool | None
    restrictDefaultWarehouseBinFlag: bool | None
    mapiName: str | None
    calendarSyncIntegrationFlag: bool | None
    enableLdapAuthenticationFlag: bool | None
    ldapConfiguration: LdapConfigurationReference | None
    ldapUserName: str | None
    companyActivityTabFormat: MemberCompanyActivityTabFormat | None
    invoiceTimeTabFormat: MemberCompanyActivityTabFormat | None
    invoiceScreenDefaultTabFormat: MemberInvoiceScreenDefaultTabFormat | None
    invoicingDisplayOptions: MemberInvoicingDisplayOptions | None
    agreementInvoicingDisplayOptions: MemberInvoicingDisplayOptions | None
    corelyticsUsername: str | None
    corelyticsPassword: str | None
    authenticationServiceType: MemberAuthenticationServiceType | None
    timebasedOneTimePasswordActivated: bool | None
    directionalSync: DirectionalSyncReference | None
    ssoSessionFlag: bool | None
    ssoClientId: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class MyMemberInfo(SparkModel):
    id: int | None
    identifier: str | None
    firstName: str | None
    middleInitial: str | None
    lastName: str | None
    fullName: str | None
    defaultEmail: str | None
    photo: DocumentReference | None
    licenseClass: Annotated[
        MemberLicenseClass | None,
        Field(
            description='F = Full Member, A = API Member, C = StreamlineIT Member, X = Subcontractor Member'
        ),
    ]
    inactiveFlag: bool | None
    timeZone: TimeZoneSetupReference | None
    useBrowserLanguageFlag: bool | None
    defaultLocation: SystemLocationReference | None
    defaultDepartment: SystemDepartmentReference | None
    workRole: WorkRoleReference | None
    workType: WorkTypeReference | None
    dailyCapacity: float | None
    requireExpenseEntryFlag: bool | None
    requireTimeSheetEntryFlag: bool | None
    requireStartAndEndTimeOnTimeEntryFlag: bool | None
    enterTimeAgainstCompanyFlag: bool | None
    allowExpensesEnteredAgainstCompaniesFlag: bool | None
    serviceDefaultBoard: BoardReference | None
    serviceDefaultLocation: SystemLocationReference | None
    serviceDefaultDepartment: SystemDepartmentReference | None
    restrictServiceDefaultLocationFlag: bool | None
    restrictServiceDefaultDepartmentFlag: bool | None
    excludedServiceBoardIds: list[int] | None
    projectDefaultLocation: SystemLocationReference | None
    projectDefaultDepartment: SystemDepartmentReference | None
    projectDefaultBoard: ProjectBoardReference | None
    restrictProjectDefaultLocationFlag: bool | None
    restrictProjectDefaultDepartmentFlag: bool | None
    excludedProjectBoardIds: list[int] | None
    scheduleDefaultLocation: SystemLocationReference | None
    scheduleDefaultDepartment: SystemDepartmentReference | None
    scheduleCapacity: float | None
    serviceLocation: ServiceLocationReference | None
    salesDefaultLocation: SystemLocationReference | None
    warehouse: WarehouseReference | None
    warehouseBin: WarehouseBinReference | None
    restrictDefaultWarehouseFlag: bool | None
    restrictDefaultWarehouseBinFlag: bool | None
    ssoSessionFlag: bool | None
    ssoClientId: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class MySecurity(SparkModel):
    id: int | None
    addLevel: MySecurityAddLevel | None
    editLevel: MySecurityAddLevel | None
    deleteLevel: MySecurityAddLevel | None
    inquireLevel: MySecurityAddLevel | None
    moduleFunctionName: str | None
    moduleFunctionDescription: str | None
    myAllFlag: bool | None
    moduleFunctionIdentifier: str | None
    reportFlag: bool | None
    restrictFlag: bool | None
    customFlag: bool | None
    moduleDescription: str | None
    moduleIdentifier: str | None
    moduleName: str | None
    sortOrder: int | None
    member: MemberReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class MySecurityAddLevel(str, Enum):
    None_ = 'None'
    My = 'My'
    All = 'All'


class MySecurityCustomizeItem(SparkModel):
    id: int | None
    customizeIdentifier: MySecurityCustomizeItemCustomizeIdentifier | None
    itemIdentifier: str | None


class MySecurityCustomizeItemCustomizeIdentifier(str, Enum):
    CompanyReports = 'CompanyReports'
    FinanceReports = 'FinanceReports'
    MarketingReports = 'MarketingReports'
    ProcurementReports = 'ProcurementReports'
    ProjectReports = 'ProjectReports'
    SalesReports = 'SalesReports'
    ServiceReports = 'ServiceReports'
    SystemReports = 'SystemReports'
    TimeAndExpenseReports = 'TimeAndExpenseReports'
    CompanyConfigurations = 'CompanyConfigurations'
    FinanceAgreements = 'FinanceAgreements'
    ProjectScheduling = 'ProjectScheduling'
    ServiceResourceScheduling = 'ServiceResourceScheduling'
    SystemManageHostedApi = 'SystemManageHostedApi'
    SystemMyAccount = 'SystemMyAccount'
    SystemCustomMenuEntry = 'SystemCustomMenuEntry'
    SystemMassMaintenance = 'SystemMassMaintenance'
    SystemTableSetup = 'SystemTableSetup'


class NoteTypeReference(ActivityReference):
    pass


class NotificationRecipient(SparkModel):
    id: int | None
    identifier: str | None
    name: str | None
    externalFlag: bool | None
    serviceFlag: bool | None
    salesFlag: bool | None
    invoiceFlag: bool | None
    agreementFlag: bool | None
    memberFlag: bool | None
    configFlag: bool | None
    mspFlag: bool | None
    trackFlag: bool | None
    projectFlag: bool | None
    procurementFlag: bool | None
    knowledgeBaseFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class NotificationRecipientReference(CatalogItemReference):
    pass


class NotifyTypeReference(CatalogItemReference):
    pass


class Office365EmailApplicationInfo(ActivityReference):
    pass


class Office365EmailSetup(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 200;')]
    username: Annotated[str | None, Field(description=' Max length: 100;')]
    inboxFolder: Annotated[str, Field(description=' Max length: 40;')]
    processedFolder: Annotated[str, Field(description=' Max length: 40;')]
    failedFolder: Annotated[str, Field(description=' Max length: 40;')]
    tenantId: Annotated[str | None, Field(description=' Max length: 36;')]
    clientId: Annotated[str | None, Field(description=' Max length: 36;')]
    clientSecret: Annotated[str | None, Field(description=' Max length: 4000;')]
    authorizedFlag: bool | None
    inactiveFlag: bool | None
    source: int | None
    useExistingTenantFlag: bool | None
    existingTenant: ExistingTenantReference | None
    emailConnector: EmailConnectorReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class Office365EmailSetupReference(ActivityReference):
    pass


class OnHandSerialNumber(SparkModel):
    id: int | None
    serial: str | None
    catalogItem: CatalogItemReference | None
    warehouse: WarehouseReference | None
    warehouseBin: WarehouseBinReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class OnHandSerialNumberReference(SparkModel):
    id: int | None
    serialNumber: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class OnPremiseSearchSetting(SparkModel):
    id: int | None
    password: str
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class OpenRevenueReference(AgreementRevenueReference):
    pass


class Opportunity(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 100;')]
    expectedCloseDate: Annotated[
        datetime | None, Field(description=' Required On Updates;')
    ]
    type: OpportunityTypeReference | None
    stage: OpportunityStageReference | None
    status: OpportunityStatusReference | None
    priority: OpportunityPriorityReference | None
    notes: str | None
    probability: OpportunityProbabilityReference | None
    source: Annotated[str | None, Field(description=' Max length: 50;')]
    rating: OpportunityRatingReference | None
    campaign: CampaignReference | None
    primarySalesRep: MemberReference
    secondarySalesRep: MemberReference | None
    locationId: Annotated[int | None, Field(description=' Required On Updates;')]
    businessUnitId: Annotated[int | None, Field(description=' Required On Updates;')]
    company: CompanyReference
    contact: ContactReference
    site: SiteReference | None
    customerPO: Annotated[str | None, Field(description=' Max length: 25;')]
    pipelineChangeDate: datetime | None
    dateBecameLead: datetime | None
    closedDate: datetime | None
    closedBy: MemberReference | None
    totalSalesTax: float | None
    shipToCompany: CompanyReference | None
    shipToContact: ContactReference | None
    shipToSite: SiteReference | None
    billToCompany: CompanyReference | None
    billToContact: ContactReference | None
    billToSite: SiteReference | None
    billingTerms: BillingTermsReference | None
    taxCode: TaxCodeReference | None
    currency: CurrencyReference | None
    companyLocationId: int | None
    technicalContact: ContactReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    customFields: list[CustomFieldValue] | None


class OpportunityContact(SparkModel):
    id: int | None
    contact: ContactReference
    company: CompanyReference | None
    role: OpportunitySalesRoleReference | None
    notes: str | None
    referralFlag: bool | None
    opportunityId: int | None
    phoneNumber: str | None
    emailAddress: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class OpportunityNote(SparkModel):
    id: int | None
    opportunityId: int | None
    type: NoteTypeReference | None
    text: str
    flagged: bool | None
    enteredBy: str | None
    mobileGuid: UUID | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class OpportunityPriorityReference(ActivityReference):
    pass


class OpportunityProbabilityReference(ActivityReference):
    pass


class OpportunityRating(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    sortOrder: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class OpportunityRatingInfo(SparkModel):
    id: int | None
    name: str | None
    sortOrder: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class OpportunityRatingReference(ActivityReference):
    pass


class OpportunityReference(ActivityReference):
    pass


class OpportunitySalesRoleReference(ActivityReference):
    pass


class OpportunityStage(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    probability: OpportunityProbabilityReference | None
    color: Annotated[str | None, Field(description=' Max length: 25;')]
    sequenceNumber: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class OpportunityStageInfo(SparkModel):
    id: int | None
    name: str | None
    probability: OpportunityProbabilityReference | None
    color: str | None
    sequenceNumber: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class OpportunityStageReference(ActivityReference):
    pass


class OpportunityStatus(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 30;')]
    wonFlag: bool | None
    lostFlag: bool | None
    closedFlag: bool | None
    inactiveFlag: bool | None
    defaultFlag: bool | None
    enteredBy: str | None
    dateEntered: datetime | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class OpportunityStatusInfo(SparkModel):
    id: int | None
    closedFlag: bool | None
    inactiveFlag: bool | None
    name: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class OpportunityStatusReference(ActivityReference):
    pass


class OpportunityToAgreementConversion(SparkModel):
    agreementId: int | None
    name: str | None
    type: AgreementTypeReference | None
    startDate: str | None
    endDate: str | None
    noEndingDateFlag: bool | None
    billCycleId: int | None
    billOneTimeFlag: bool | None
    locationId: int | None
    businessUnitId: int | None
    includeAllNotesFlag: bool | None
    includeAllDocumentsFlag: bool | None
    includeAllProductsFlag: bool | None
    includeNoteIds: list[int] | None
    includeDocumentIds: list[int] | None
    includeProductIds: list[int] | None


class OpportunityToProjectConversion(SparkModel):
    projectId: int | None
    name: str | None
    status: ProjectStatusReference | None
    locationId: int | None
    businessUnitId: int | None
    board: ProjectBoardReference | None
    manager: MemberReference | None
    estimatedStart: str | None
    estimatedEnd: str | None
    includeAllNotesFlag: bool | None
    includeAllDocumentsFlag: bool | None
    includeAllProductsFlag: bool | None
    includeNoteIds: list[int] | None
    includeDocumentIds: list[int] | None
    includeProductIds: list[int] | None


class OpportunityToSalesOrderConversion(SparkModel):
    salesOrderId: int | None
    name: str | None
    includeAllNotesFlag: bool | None
    includeAllDocumentsFlag: bool | None
    includeAllProductsFlag: bool | None
    includeNoteIds: list[int] | None
    includeDocumentIds: list[int] | None
    includeProductIds: list[int] | None


class OpportunityToServiceTicketConversion(SparkModel):
    ticketId: int | None
    summary: str | None
    includeAllNotesFlag: bool | None
    includeAllDocumentsFlag: bool | None
    includeAllProductsFlag: bool | None
    includeNoteIds: list[int] | None
    includeDocumentIds: list[int] | None
    includeProductIds: list[int] | None


class OpportunityType(SparkModel):
    id: int | None
    description: Annotated[str, Field(description=' Max length: 50;')]
    inactiveFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class OpportunityTypeInfo(SparkModel):
    id: int | None
    description: str | None
    inactiveFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class OpportunityTypeReference(ActivityReference):
    pass


class Order(SparkModel):
    id: int | None
    company: CompanyReference
    contact: ContactReference | None
    phone: str | None
    phoneExt: str | None
    email: str | None
    site: SiteReference | None
    status: OrderStatusReference
    opportunity: OpportunityReference | None
    orderDate: datetime | None
    dueDate: datetime | None
    billingTerms: BillingTermsReference | None
    taxCode: TaxCodeReference | None
    poNumber: Annotated[str | None, Field(description=' Max length: 50;')]
    location: SystemLocationReference | None
    department: SystemDepartmentReference | None
    salesRep: MemberReference
    notes: str | None
    billClosedFlag: bool | None
    billShippedFlag: bool | None
    restrictDownpaymentFlag: bool | None
    description: str | None
    topCommentFlag: bool | None
    bottomCommentFlag: bool | None
    shipToCompany: CompanyReference | None
    shipToContact: ContactReference | None
    shipToSite: SiteReference | None
    billToCompany: CompanyReference | None
    billToContact: ContactReference | None
    billToSite: SiteReference | None
    productIds: list[int] | None
    documentIds: list[int] | None
    invoiceIds: list[int] | None
    configIds: list[int] | None
    total: float | None
    taxTotal: float | None
    currency: CurrencyReference | None
    companyLocation: SystemLocationReference | None
    subTotal: float | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    customFields: list[CustomFieldValue] | None


class OrderStatus(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    defaultFlag: bool | None
    inactiveFlag: bool | None
    sortOrder: int | None
    closedFlag: bool | None
    emailTemplate: OrderStatusEmailTemplateReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class OrderStatusEmailTemplate(SparkModel):
    id: int | None
    status: OrderStatusReference | None
    useSenderFlag: bool | None
    firstName: Annotated[str | None, Field(description=' Max length: 100;')]
    lastName: Annotated[str | None, Field(description=' Max length: 100;')]
    emailAddress: Annotated[str | None, Field(description=' Max length: 100;')]
    subject: Annotated[str, Field(description=' Max length: 200;')]
    body: str
    copySenderFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class OrderStatusEmailTemplateReference(ActivityReference):
    pass


class OrderStatusInfo(LegacySubCategoryInfo):
    pass


class OrderStatusNotification(SparkModel):
    id: int | None
    notifyWho: NotificationRecipientReference
    status: OrderStatusReference | None
    member: MemberReference | None
    email: Annotated[
        str | None,
        Field(
            description='Order Status Notification sendEmail must be entered if the notify type is "Email Address". Max length: 50;'
        ),
    ]
    workflowStep: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class OrderStatusReference(ActivityReference):
    pass


class OsGradeWeight(SparkModel):
    id: int | None
    osGradeWeight: float | None
    osName: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class Other(SparkModel):
    id: int | None
    defaultLdap: LdapConfigurationReference | None
    defaultFromAddress: Annotated[str, Field(description=' Max length: 50;')]
    portalUrlOverride: Annotated[str, Field(description=' Max length: 100;')]
    siteUrl: Annotated[str, Field(description=' Max length: 100;')]
    logoPath: Annotated[str | None, Field(description=' Max length: 200;')]
    contactSync: OtherContactSync | None
    serverTimeZone: TimeZoneSetupReference
    defaultCalendar: CalendarReference
    defaultAddressFormat: AddressFormatReference
    useSslFlag: bool | None
    syncLeadsFlag: bool | None
    includePortalLinkFlag: bool | None
    useExpandedFormatTimeFlag: bool | None
    useExpandedFormatActivityFlag: bool | None
    disableZAdminLoginFlag: bool | None
    locale: LocaleReference
    updateMemberTimeZonesFlag: Annotated[
        bool | None,
        Field(
            description='If true, all Members time zone will also be set to serverTimeZone. Otherwise, only My Company time zone will be updated.'
        ),
    ]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class Other1RevenueReference(AgreementRevenueReference):
    pass


class Other2RevenueReference(AgreementRevenueReference):
    pass


class OtherContactSync(str, Enum):
    FL = 'FL'
    LF = 'LF'
    CFL = 'CFL'
    CLF = 'CLF'


class OwnerLevelReference(ActivityReference):
    pass


class OwnershipType(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 200;')]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class OwnershipTypeInfo(ActivityReference):
    pass


class OwnershipTypeReference(ActivityReference):
    pass


class PageValues(SparkModel):
    page: int | None
    pageSize: int | None
    pageId: int | None


class ParsingType(SparkModel):
    id: int | None
    name: str | None
    parseRule: str | None
    defaultFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ParsingVariable(SparkModel):
    id: int | None
    name: str | None
    code: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class PatchOperation(SparkModel):
    op: str | None
    path: str | None
    value: dict[str, Any_aliased] | None


class PaymentMethodReference(ActivityReference):
    pass


class PaymentType(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 30;')]
    classification: ClassificationReference
    defaultFlag: bool | None
    companyFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class PaymentTypeInfo(AddressFormatInfo):
    pass


class PersonasInfo(CorporateStructureLevel):
    pass


class PhaseStatus(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 30;')]
    defaultFlag: bool | None
    inactiveFlag: bool | None
    collapsedFlag: bool | None
    closedFlag: bool | None
    boardAssociationIds: list[int] | None
    statusIndicator: StatusIndicatorReference | None
    customStatusIndicatorName: Annotated[
        str | None,
        Field(description='Required when statusIndicator is Custom. Max length: 30;'),
    ]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class PhaseStatusInfo(SparkModel):
    id: int | None
    name: str | None
    defaultFlag: bool | None
    inactiveFlag: bool | None
    collapsedFlag: bool | None
    closedFlag: bool | None
    boardAssociationIds: list[int] | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class PhaseStatusReference(ActivityReference):
    pass


class PortalCalendar(SparkModel):
    id: int | None
    weekStart: PortalCalendarWeekStart
    adjust1Start: str | None
    adjust1End: str | None
    adjust1Hours: float | None
    adjust2Start: str | None
    adjust2End: str | None
    adjust2Hours: float | None
    adjust3Start: str | None
    adjust3End: str | None
    adjust3Hours: float | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class PortalCalendarWeekStart(str, Enum):
    Sunday = 'Sunday'
    Monday = 'Monday'
    Tuesday = 'Tuesday'
    Wednesday = 'Wednesday'
    Thursday = 'Thursday'
    Friday = 'Friday'
    Saturday = 'Saturday'


class PortalConfiguration(SparkModel):
    id: Annotated[
        int | None,
        Field(
            description='Gets or sets and Sets\n            An existing Portal Configuration id is required when copying a Portal Configuration.'
        ),
    ]
    name: Annotated[str, Field(description=' Max length: 150;')]
    defaultFlag: bool | None
    company: CompanyReference | None
    loginBackgroundColor: Annotated[str | None, Field(description=' Max length: 7;')]
    portalBackgroundColor: Annotated[str | None, Field(description=' Max length: 7;')]
    menuColor: Annotated[str | None, Field(description=' Max length: 7;')]
    buttonColor: Annotated[str | None, Field(description=' Max length: 7;')]
    headerColor: Annotated[str | None, Field(description=' Max length: 7;')]
    url: Annotated[str | None, Field(description=' Max length: 1000;')]
    language: PortalConfigurationLanguage | None
    welcomeText: Annotated[str | None, Field(description=' Max length: 4000;')]
    boardIds: list[int] | None
    agreementTypeIds: list[int] | None
    configTypeIds: list[int] | None
    locationIds: list[int] | None
    portalImageCopySuccessFlag: bool | None
    displayVendorFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class PortalConfigurationInvoiceSetup(SparkModel):
    id: int | None
    portalConfiguration: PortalConfigurationReference | None
    displayInvPmtFlag: bool | None
    allowInvPmtFlag: bool | None
    location: SystemLocationReference | None
    paymentProcessor: PortalConfigurationPaymentProcessorReference | None
    login: str | None
    password: str | None
    urlOverride: str | None
    billingStatusIds: list[int] | None
    addAllStatuses: bool | None
    removeAllStatuses: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class PortalConfigurationLanguage(str, Enum):
    English = 'English'
    Spanish = 'Spanish'
    French = 'French'
    British = 'British'
    Australian = 'Australian'
    BrazilianPortuguese = 'BrazilianPortuguese'
    CanadianFrench = 'CanadianFrench'
    German = 'German'
    NewZealand = 'NewZealand'
    Dutch = 'Dutch'


class PortalConfigurationOpportunitySetup(SparkModel):
    id: int | None
    opportunityStatusRecIDs: list[int] | None
    addAllOpportunityStatuses: bool | None
    removeAllOpportunityStatuses: bool | None
    opportunityTypeRecIDs: list[int] | None
    addAllOpportunityTypes: bool | None
    removeAllOpportunityTypes: bool | None
    restrictViewByOpportunityStatusFlag: bool | None
    restrictViewByOpportunityTypeFlag: bool | None
    acceptanceChangeStatusFlag: bool | None
    acceptanceCreateActivityFlag: bool | None
    acceptanceOpportunityStatus: OpportunityStatusReference | None
    acceptanceSendEmailFlag: bool | None
    acceptanceEmailFromFirstName: str | None
    acceptanceEmailFromLastName: str | None
    acceptanceEmailSubject: str | None
    acceptanceEmailBody: str | None
    acceptanceFromEmail: Annotated[
        str | None,
        Field(
            description='Gets or sets\n            required when acceptanceSendEmailFlag is true.'
        ),
    ]
    acceptanceEmailActivityType: ActivityTypeReference | None
    acceptanceEmailAssignedByMember: MemberReference | None
    rejectionChangeStatusFlag: bool | None
    rejectionCreateActivityFlag: bool | None
    rejectionOpportunityStatus: OpportunityStatusReference | None
    rejectionSendEmailFlag: bool | None
    rejectionEmailFromFirstName: str | None
    rejectionEmailFromLastName: str | None
    rejectionFromEmail: Annotated[
        str | None,
        Field(
            description='Gets or sets\n            required when rejectionSendEmailFlag is true.'
        ),
    ]
    rejectionEmailSubject: str | None
    rejectionEmailBody: str | None
    rejectionEmailActivityType: ActivityTypeReference | None
    rejectionEmailAssignedByMember: MemberReference | None
    confirmationSendEmailFlag: bool | None
    confirmationEmailUseDefaultCompanyEmailAddressFlag: bool | None
    confirmationEmailFromFirstName: str | None
    confirmationEmailFromLastName: str | None
    confirmationFromEmail: Annotated[
        str | None,
        Field(
            description='Gets or sets\n            required when confirmationSendEmailFlag is true.'
        ),
    ]
    confirmationEmailSubject: str | None
    confirmationEmailBody: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class PortalConfigurationPasswordEmailSetup(SparkModel):
    id: int | None
    validPasswordEmailUseCustomEmailFlag: bool | None
    validPasswordEmailFromFirstName: str | None
    validPasswordEmailFromLastName: str | None
    validPasswordEmailFromEmail: Annotated[
        str | None,
        Field(
            description='Gets or sets\n            required when validPasswordEmailUseCustomEmailFlag is true.'
        ),
    ]
    validPasswordEmailSubject: str | None
    validPasswordEmailBody: str | None
    invalidPasswordEmailUseCustomEmailFlag: bool | None
    invalidPasswordEmailFromFirstName: str | None
    invalidPasswordEmailFromLastName: str | None
    invalidPasswordEmailFromEmail: Annotated[
        str | None,
        Field(
            description='Gets or sets\n            required when invalidPasswordEmailUseCustomEmailFlag is true.'
        ),
    ]
    invalidPasswordEmailSubject: str | None
    invalidPasswordEmailBody: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class PortalConfigurationPaymentProcessor(SparkModel):
    id: int | None
    name: str | None
    testURL: str | None


class PortalConfigurationPaymentProcessorReference(ActivityReference):
    pass


class PortalConfigurationProjectSetup(SparkModel):
    id: int | None
    portalConfig: PortalConfigurationReference | None
    projectNameFlag: bool | None
    projectTypeFlag: bool | None
    statusFlag: bool | None
    projectManagerFlag: bool | None
    billingMethodFlag: bool | None
    contactFlag: bool | None
    estimatedStartFlag: bool | None
    estimatedEndFlag: bool | None
    descriptionFlag: bool | None
    lastUpdatedFlag: bool | None
    onlyDisplay: PortalConfigurationProjectSetupOnlyDisplay
    timeMaterialBudgetHrsFlag: bool | None
    timeMaterialScheduledStartFlag: bool | None
    timeMaterialScheduledFinishFlag: bool | None
    timeMaterialScheduledHrsFlag: bool | None
    timeMaterialActualStartFlag: bool | None
    timeMaterialActualFinishFlag: bool | None
    timeMaterialActualHrsFlag: bool | None
    timeMaterialBillFlag: bool | None
    timeMaterialStatusFlag: bool | None
    timeMaterialAssignedFlag: bool | None
    fixedFeeBudgetHrsFlag: bool | None
    fixedFeeScheduledStartFlag: bool | None
    fixedFeeScheduledFinishFlag: bool | None
    fixedFeeScheduledHrsFlag: bool | None
    fixedFeeActualStartFlag: bool | None
    fixedFeeActualFinishFlag: bool | None
    fixedFeeActualHrsFlag: bool | None
    fixedFeeBillFlag: bool | None
    fixedFeeStatusFlag: bool | None
    fixedFeeAssignedFlag: bool | None
    projectIssueBudgetHrsFlag: bool | None
    projectIssueScheduledStartFlag: bool | None
    projectIssueScheduledFinishFlag: bool | None
    projectIssueScheduledHrsFlag: bool | None
    projectIssueActualStartFlag: bool | None
    projectIssueActualFinishFlag: bool | None
    projectIssueActualHrsFlag: bool | None
    projectIssueBillFlag: bool | None
    projectIssueStatusFlag: bool | None
    projectIssueAssignedFlag: bool | None
    projectDetailTotalHoursFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class PortalConfigurationProjectSetupOnlyDisplay(str, Enum):
    DoNotDisplay = 'DoNotDisplay'
    Closed30Days = 'Closed30Days'
    Closed60Days = 'Closed60Days'
    Closed90Days = 'Closed90Days'
    Closed120Days = 'Closed120Days'
    AllClosed = 'AllClosed'


class PortalConfigurationReference(ActivityReference):
    pass


class PortalConfigurationServiceSetup(SparkModel):
    id: int | None
    serviceTypeFlag: bool | None
    serviceSubTypeFlag: bool | None
    serviceSubTypeItemFlag: bool | None
    statusFlag: bool | None
    siteNameFlag: bool | None
    enteredDateFlag: bool | None
    lastUpdateFlag: bool | None
    requiredDateFlag: bool | None
    contactFlag: bool | None
    assignedResourcesFlag: bool | None
    slaInfoFlag: bool | None
    serviceBoardFlag: bool | None
    budgetHoursFlag: bool | None
    actualHoursFlag: bool | None
    approvalStatusFlag: bool | None
    openTasksFlag: bool | None
    closedTasksFlag: bool | None
    enableChatAssistFlag: bool | None
    displayClosedTicketsOption: PortalConfigurationProjectSetupOnlyDisplay
    timeMaterialsTicketTemplate: ServiceSignoffReference
    fixedFeeTicketTemplate: ServiceSignoffReference
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class PortalReport(SparkModel):
    id: int | None
    portalConfiguration: PortalConfigurationReference | None
    name: Annotated[str, Field(description=' Max length: 255;')]
    url: Annotated[str, Field(description=' Max length: 255;')]
    openSameWindowFlag: bool | None
    customFlag: bool | None
    displayFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class PortalSecurity(SparkModel):
    identifier: str | None
    enabled: bool | None


class PortalSecurityLevel(SparkModel):
    id: int | None
    captionIdentifier: str | None
    isDefaultFlag: bool | None
    caption: Annotated[str | None, Field(description=' Max length: 50;')]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class PortalSecuritySetting(SparkModel):
    id: int | None
    functionIdentifier: str | None
    functionDescription: str | None
    levelOne: bool | None
    levelTwo: bool | None
    levelThree: bool | None
    levelFour: bool | None
    levelFive: bool | None
    levelSix: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class PricingBreak(SparkModel):
    id: int | None
    detailId: int | None
    amount: float | None
    quantityStart: float
    quantityEnd: float | None
    unlimited: bool | None
    priceMethod: PricingBreakPriceMethod
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class PricingBreakPriceMethod(str, Enum):
    FlatRateForRange = 'FlatRateForRange'
    PercentMarkupFromCost = 'PercentMarkupFromCost'
    PercentMarkdownFromPrice = 'PercentMarkdownFromPrice'
    PricePerUnit = 'PricePerUnit'


class PricingDetail(SparkModel):
    id: int | None
    product: CatalogItemReference | None
    category: ProductCategoryReference | None
    subCategory: ProductSubCategoryReference | None
    startDate: datetime
    endDate: datetime | None
    noEndDate: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class PricingSchedule(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 30;')]
    inactiveFlag: bool | None
    defaultFlag: bool | None
    currency: CurrencyReference | None
    companies: list[int] | None
    setAllCompaniesFlag: bool | None
    removeAllCompaniesFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class PricingScheduleReference(ActivityReference):
    pass


class Priority(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    color: PriorityColor
    sortOrder: int | None
    defaultFlag: bool | None
    imageLink: str | None
    urgencySortOrder: str | None
    level: PriorityLevel | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class PriorityColor(str, Enum):
    Black = 'Black'
    Blue = 'Blue'
    Cyan = 'Cyan'
    Gray = 'Gray'
    Green = 'Green'
    Lime = 'Lime'
    Orange = 'Orange'
    Pink = 'Pink'
    Purple = 'Purple'
    Red = 'Red'
    White = 'White'
    Yellow = 'Yellow'
    Custom = 'Custom'


class PriorityInfo(SparkModel):
    id: int | None
    name: str | None
    color: PriorityColor | None
    sortOrder: int | None
    defaultFlag: bool | None
    imageLink: str | None
    urgencySortOrder: str | None
    level: PriorityLevel | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class PriorityLevel(str, Enum):
    Critical = 'Critical'
    High = 'High'
    Medium = 'Medium'
    Low = 'Low'


class PriorityReference(SparkModel):
    id: int | None
    name: str | None
    sort: int | None
    level: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ProcurementAdjustment(SparkModel):
    id: int | None
    identifier: Annotated[str, Field(description=' Max length: 50;')]
    type: AdjustmentTypeReference
    reason: Annotated[str | None, Field(description=' Max length: 100;')]
    notes: str | None
    closedFlag: bool | None
    closedBy: str | None
    closedDate: datetime | None
    adjustmentDetails: list[AdjustmentDetail] | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ProcurementSetting(SparkModel):
    id: int | None
    startingPurchaseOrderNum: int
    purchaseOrderPrefix: Annotated[str | None, Field(description=' Max length: 5;')]
    purchaseOrderSuffix: Annotated[str | None, Field(description=' Max length: 5;')]
    prefixSuffixType: AgreementTypePrefixSuffixOption | None
    disableCostUpdatesFlag: bool | None
    disableNegativeInventoryFlag: bool | None
    costingMethod: ProcurementSettingCostingMethod
    autoClosePurchaseOrderFlag: bool | None
    autoClosePurchaseOrderItemFlag: bool | None
    autoApprovePurchaseOrderFlag: bool | None
    taxPurchaseOrderFlag: bool | None
    taxFreightFlag: bool | None
    useVendorTaxCodeFlag: bool | None
    numDecimalPlaces: int | None
    disableAutoPickFlag: bool | None
    defaultProductTaxableFlag: bool | None
    eoriNumber: Annotated[str | None, Field(description=' Max length: 50;')]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    notificationForChangesInShippingInfoFlag: bool | None
    shippingInfoNotificationEmail: Annotated[
        str | None, Field(description=' Max length: 250;')
    ]


class ProcurementSettingCostingMethod(str, Enum):
    FIFO = 'FIFO'
    LIFO = 'LIFO'
    AverageCosting = 'AverageCosting'


class ProductCategoryReference(ActivityReference):
    pass


class ProductComponent(SparkModel):
    id: int | None
    sequenceNumber: Annotated[int | None, Field(description=' Required On Updates;')]
    quantity: float
    catalogItem: CatalogItemReference
    hidePriceFlag: bool | None
    hideItemIdentifierFlag: bool | None
    hideDescriptionFlag: bool | None
    hideQuantityFlag: bool | None
    hideExtendedPriceFlag: bool | None
    vendor: CompanyReference | None
    parentProductItem: ProductItemReference | None
    productItem: ProductItemReference | None
    price: float | None
    cost: float | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ProductDemand(SparkModel):
    productRecId: int | None
    quantity: int | None
    cost: float | None


class ProductDetach(SparkModel):
    removeFromTicket: bool | None
    removeFromInvoice: bool | None
    removeFromOpportunity: bool | None
    removeFromSalesOrder: bool | None
    removeFromProject: bool | None


class ProductItem(SparkModel):
    id: int | None
    catalogItem: CatalogItemReference
    description: Annotated[str | None, Field(description=' Max length: 2000;')]
    sequenceNumber: float | None
    quantity: float | None
    unitOfMeasure: UnitOfMeasureReference | None
    price: float | None
    cost: float | None
    extPrice: float | None
    extCost: float | None
    discount: float | None
    margin: float | None
    agreementAmount: float | None
    priceMethod: PricingBreakPriceMethod | None
    billableOption: AdditionBillCustomer
    agreement: AgreementReference | None
    locationId: Annotated[int | None, Field(description=' Required On Updates;')]
    location: SystemLocationReference | None
    businessUnitId: Annotated[int | None, Field(description=' Required On Updates;')]
    businessUnit: BillingUnitReference | None
    vendor: CompanyReference | None
    vendorSku: Annotated[str | None, Field(description=' Max length: 50;')]
    taxableFlag: bool | None
    dropshipFlag: bool | None
    specialOrderFlag: bool | None
    phaseProductFlag: bool | None
    cancelledFlag: bool | None
    quantityCancelled: float | None
    cancelledReason: Annotated[str | None, Field(description=' Max length: 100;')]
    customerDescription: Annotated[
        str | None, Field(description=' Max length: 6000; Required On Updates;')
    ]
    internalNotes: Annotated[str | None, Field(description=' Max length: 1000;')]
    productSuppliedFlag: bool | None
    subContractorShipToId: int | None
    subContractorAmountLimit: float | None
    recurring: ProductRecurring | None
    sla: SLAReference | None
    entityType: EntityTypeReference | None
    ticket: TicketReference | None
    project: ProjectReference | None
    phase: ProjectPhaseReference | None
    salesOrder: SalesOrderReference | None
    opportunity: OpportunityReference | None
    invoice: InvoiceReference | None
    warehouseId: int | None
    warehouseIdObject: WarehouseReference | None
    warehouseBinId: int | None
    warehouseBinIdObject: WarehouseBinReference | None
    calculatedPriceFlag: bool | None
    calculatedCostFlag: bool | None
    forecastDetailId: int | None
    cancelledBy: int | None
    cancelledDate: datetime | None
    warehouse: str | None
    warehouseBin: str | None
    purchaseDate: datetime | None
    taxCode: TaxCodeReference | None
    integrationXRef: str | None
    listPrice: float | None
    serialNumberIds: list[int] | None
    serialNumbers: list[str] | None
    company: CompanyReference | None
    forecastStatus: OpportunityStatusReference | None
    productClass: CatalogItemProductClass | None
    needToPurchaseFlag: bool | None
    needToOrderQuantity: int | None
    minimumStockFlag: bool | None
    shipSet: Annotated[str | None, Field(description=' Max length: 10;')]
    calculatedPrice: float | None
    calculatedCost: float | None
    invoiceGrouping: InvoiceGroupingReference | None
    poApprovedFlag: bool | None
    uom: str | None
    addComponentsFlag: bool | None
    ignorePricingSchedulesFlag: bool | None
    asioSubscriptionsID: UUID | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    bypassForecastUpdate: bool | None
    customFields: list[CustomFieldValue] | None


class ProductItemReference(ActivityReference):
    pass


class ProductPickingShippingDetail(SparkModel):
    id: int | None
    pickedQuantity: int | None
    shippedQuantity: int | None
    warehouse: WarehouseReference
    warehouseBin: WarehouseBinReference
    shipmentMethod: ShipmentMethodReference | None
    serialNumber: str | None
    serialNumberIds: list[int] | None
    trackingNumber: str | None
    productItem: ProductItemReference | None
    lineNumber: int | None
    quantity: int | None
    expectedArrivalDate: datetime | None
    shipmentDate: datetime | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ProductRecurring(SparkModel):
    recurringRevenue: float | None
    recurringCost: float | None
    startDate: str | None
    endDate: Annotated[
        str | None,
        Field(
            description='The Recurring End Date is calculated based on the\n            start date, number of cycles, and cycle type.'
        ),
    ]
    billCycleId: int | None
    billCycle: BillingCycleReference | None
    cycles: int | None
    cycleType: AgreementInvoicingCycle | None
    agreementType: AgreementTypeReference | None


class ProductReference(InOutTypeInfo):
    pass


class ProductRevenueReference(AgreementRevenueReference):
    pass


class ProductSubCategoryReference(ActivityReference):
    pass


class ProductType(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    inactiveFlag: bool | None
    typeXref: ProductTypeTypeXref | None
    defaultFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ProductTypeExemption(SparkModel):
    id: int | None
    productType: ProductTypeReference
    taxableLevels: list[int] | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ProductTypeInfo(CategoryInfo):
    pass


class ProductTypeReference(ActivityReference):
    pass


class ProductTypeTypeXref(str, Enum):
    InventoryPart = 'InventoryPart'
    NonInventoryPart = 'NonInventoryPart'
    OtherCharge = 'OtherCharge'
    Service = 'Service'


class Project(SparkModel):
    id: int | None
    actualEnd: datetime | None
    actualHours: float | None
    actualStart: datetime | None
    agreement: AgreementReference | None
    billExpenses: Annotated[
        ActivityStopwatchBillableOption | None,
        Field(description=' Required On Updates;'),
    ]
    billingAmount: float | None
    billingAttention: Annotated[str | None, Field(description=' Max length: 50;')]
    billingMethod: ProjectBillingMethod
    billingRateType: Annotated[
        ProjectBillingRateType | None, Field(description=' Required On Updates;')
    ]
    billingTerms: BillingTermsReference | None
    billProducts: Annotated[
        ActivityStopwatchBillableOption | None,
        Field(description=' Required On Updates;'),
    ]
    billProjectAfterClosedFlag: bool | None
    billTime: Annotated[
        ActivityStopwatchBillableOption | None,
        Field(description=' Required On Updates;'),
    ]
    billToCompany: CompanyReference | None
    billToContact: ContactReference | None
    billToSite: SiteReference | None
    billUnapprovedTimeAndExpense: bool | None
    board: ProjectBoardReference
    budgetAnalysis: Annotated[
        ProjectBudgetAnalysis | None, Field(description=' Required On Updates;')
    ]
    budgetFlag: bool | None
    budgetHours: float | None
    company: CompanyReference
    contact: ContactReference | None
    customerPO: Annotated[str | None, Field(description=' Max length: 50;')]
    description: str | None
    currency: CurrencyReference | None
    downpayment: float | None
    estimatedEnd: datetime
    percentComplete: float | None
    estimatedExpenseRevenue: float | None
    estimatedHours: float | None
    estimatedProductRevenue: float | None
    estimatedStart: datetime
    estimatedTimeRevenue: float | None
    expenseApprover: MemberReference | None
    includeDependenciesFlag: bool | None
    includeEstimatesFlag: bool | None
    location: SystemLocationReference | None
    department: SystemDepartmentReference | None
    manager: MemberReference | None
    name: Annotated[str, Field(description=' Max length: 100;')]
    opportunity: OpportunityReference | None
    projectTemplateId: int | None
    restrictDownPaymentFlag: bool | None
    scheduledEnd: datetime | None
    scheduledHours: float | None
    scheduledStart: datetime | None
    shipToCompany: CompanyReference | None
    shipToContact: ContactReference | None
    shipToSite: SiteReference | None
    site: SiteReference | None
    status: ProjectStatusReference | None
    closedFlag: bool | None
    timeApprover: MemberReference | None
    type: ProjectTypeReference | None
    doNotDisplayInPortalFlag: bool | None
    billingStartDate: datetime | None
    poAmount: float | None
    estimatedTimeCost: float | None
    estimatedExpenseCost: float | None
    estimatedProductCost: float | None
    taxCode: TaxCodeReference | None
    companyLocation: SystemLocationReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    customFields: list[CustomFieldValue] | None


class ProjectBillingMethod(str, Enum):
    ActualRates = 'ActualRates'
    FixedFee = 'FixedFee'
    NotToExceed = 'NotToExceed'
    OverrideRate = 'OverrideRate'


class ProjectBillingRate(SparkModel):
    id: int | None
    projectRecId: int | None
    hourlyRate: float | None
    workRole: WorkRoleReference | None
    activityClassRecId: int | None
    member: MemberReference | None
    memberRecId: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ProjectBillingRateType(str, Enum):
    StaffMember = 'StaffMember'
    WorkRole = 'WorkRole'


class ProjectBoardKanbanSetting(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    color: Annotated[str | None, Field(description=' Max length: 4;')]
    order: int | None
    statuses: list[ProjectBoardKanbanStatus] | None
    updatedBy: Annotated[str | None, Field(description=' Max length: 15;')]
    lastUpdated: str | None


class ProjectBoardKanbanStatus(SparkModel):
    id: int | None
    srStatusId: int | None
    order: int | None
    name: str | None


class ProjectBoardReference(ActivityReference):
    pass


class ProjectBoardTeam(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    location: SystemLocationReference | None
    department: SystemDepartmentReference | None
    defaultFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ProjectBoardTeamInfo(ActivityReference):
    pass


class ProjectBoardTeamMember(SparkModel):
    id: int | None
    member: MemberReference
    projectRole: ProjectRoleReference
    workRole: WorkRoleReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ProjectBudgetAnalysis(str, Enum):
    ActualHours = 'ActualHours'
    BillableHours = 'BillableHours'


class ProjectContact(SparkModel):
    id: int | None
    projectId: int | None
    contact: ContactReference
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ProjectNote(SparkModel):
    id: int | None
    projectId: int | None
    text: str
    type: NoteTypeReference | None
    flagged: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ProjectPhase(SparkModel):
    id: int | None
    projectId: int | None
    description: Annotated[str, Field(description=' Max length: 100;')]
    board: ProjectBoardReference | None
    status: PhaseStatusReference | None
    agreement: AgreementReference | None
    opportunity: OpportunityReference | None
    department: BillingUnitReference | None
    parentPhase: ProjectPhaseReference | None
    wbsCode: Annotated[str | None, Field(description=' Max length: 50;')]
    billTime: Annotated[
        ActivityStopwatchBillableOption | None,
        Field(description=' Required On Updates;'),
    ]
    billExpenses: Annotated[
        ActivityStopwatchBillableOption | None,
        Field(description=' Required On Updates;'),
    ]
    billProducts: Annotated[
        ActivityStopwatchBillableOption | None,
        Field(description=' Required On Updates;'),
    ]
    markAsMilestoneFlag: bool | None
    notes: str | None
    deadlineDate: datetime | None
    billSeparatelyFlag: bool | None
    billingMethod: Annotated[
        ProjectBillingMethod | None,
        Field(
            description='billingMethod is required if the phase billSeparatelyFlag is true.'
        ),
    ]
    scheduledHours: float | None
    scheduledStart: str | None
    scheduledEnd: str | None
    actualHours: float | None
    actualStart: str | None
    actualEnd: str | None
    budgetHours: float | None
    startDate: str | None
    endDate: str | None
    locationId: int | None
    businessUnitId: int | None
    hourlyRate: float | None
    billingStartDate: datetime | None
    billPhaseClosedFlag: Annotated[
        bool | None,
        Field(description='This phase can only be billed after it has been closed.'),
    ]
    billProjectClosedFlag: Annotated[
        bool | None,
        Field(
            description='This phase can only be billed after the project has been closed.'
        ),
    ]
    downpayment: float | None
    poNumber: Annotated[str | None, Field(description=' Max length: 25;')]
    poAmount: float | None
    estimatedTimeCost: float | None
    estimatedExpenseCost: float | None
    estimatedProductCost: float | None
    estimatedTimeRevenue: float | None
    estimatedExpenseRevenue: float | None
    estimatedProductRevenue: float | None
    currency: CurrencyReference | None
    billToCompany: CompanyReference | None
    billToContact: ContactReference | None
    billToSite: SiteReference | None
    shipToCompany: CompanyReference | None
    shipToContact: ContactReference | None
    shipToSite: SiteReference | None
    billingTerms: BillingTermsReference | None
    taxCode: TaxCodeReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    customFields: list[CustomFieldValue] | None


class ProjectPhaseReference(ActivityReference):
    pass


class ProjectReference(ActivityReference):
    pass


class ProjectRoleReference(AdjustmentTypeReference):
    pass


class ProjectSecurityRole(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 30;')]
    managerRoleFlag: bool | None
    defaultContactFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ProjectSecurityRoleInfo(SparkModel):
    id: int | None
    name: str | None
    managerRoleFlag: bool | None
    defaultContactFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ProjectSecurityRoleSetting(SparkModel):
    id: int | None
    addLevel: MySecurityAddLevel | None
    editLevel: MySecurityAddLevel | None
    deleteLevel: MySecurityAddLevel | None
    inquireLevel: MySecurityAddLevel | None
    moduleIdentifier: Annotated[str | None, Field(description=' Max length: 50;')]
    myFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ProjectStatus(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 30;')]
    defaultFlag: bool | None
    inactiveFlag: bool | None
    noTimeFlag: bool | None
    closedFlag: bool | None
    statusIndicator: StatusIndicatorReference | None
    customStatusIndicatorName: Annotated[
        str | None,
        Field(description='Required when statusIndicator is Custom. Max length: 30;'),
    ]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ProjectStatusInfo(SparkModel):
    id: int | None
    name: str | None
    defaultFlag: bool | None
    inactiveFlag: bool | None
    noTimeFlag: bool | None
    closedFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ProjectStatusReference(ActivityReference):
    pass


class ProjectTeamMember(SparkModel):
    id: int | None
    projectId: int | None
    hours: float | None
    member: MemberReference
    projectRole: ProjectRoleReference
    workRole: WorkRoleReference | None
    startDate: datetime | None
    endDate: datetime | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ProjectTemplate(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 200;')]
    description: str | None
    connectWiseId: str | None
    type: ProjectTypeReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ProjectTemplatePhase(SparkModel):
    id: int | None
    templateRecId: int | None
    parentPhase: int | None
    description: str | None
    budgetHours: float | None
    notes: str | None
    markAsMilestone: bool | None
    phaseBilledSeparately: bool | None
    wbsCode: str | None
    connectWiseId: str | None
    parentId: int | None
    parentConnectWiseId: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ProjectTemplatePhaseReference(ActivityReference):
    pass


class ProjectTemplateTask(SparkModel):
    id: int | None
    ticketId: int | None
    sequence: int | None
    description: str | None
    connectWiseId: str | None
    parentId: int | None
    grandParentId: int | None
    parentConnectWiseId: str | None
    grandParentConnectWiseId: str | None
    summary: str | None
    code: ServiceCodeReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ProjectTemplateTicket(SparkModel):
    id: int | None
    projectTemplateId: int | None
    projectTemplatePhaseId: int | None
    lineNumber: float | None
    description: Annotated[str, Field(description=' Max length: 100;')]
    connectWiseId: str | None
    parentId: int | None
    parentConnectWiseId: str | None
    projectTemplatePhaseCwId: str | None
    notes: str | None
    internalAnalysis: str | None
    resolution: str | None
    budgetHours: float | None
    duration: int | None
    wbsCode: Annotated[str | None, Field(description=' Max length: 50;')]
    billSeparatelyFlag: bool | None
    markAsMilestoneFlag: bool | None
    recordType: Annotated[str | None, Field(description=' Max length: 1;')]
    pmTmpProjectRecID: int | None
    predecessorType: ProjectTemplateTicketPredecessorType | None
    predecessorId: int | None
    predecessorClosedFlag: bool | None
    lagDays: int | None
    lagNonworkingDaysFlag: bool | None
    priority: PriorityReference | None
    source: ServiceSourceReference | None
    workRole: WorkRoleReference | None
    workType: WorkTypeReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ProjectTemplateTicketPredecessorType(str, Enum):
    Ticket = 'Ticket'
    Phase = 'Phase'


class ProjectTemplateWorkPlan(SparkModel):
    templateId: int | None
    phases: list[TemplatePhase] | None


class ProjectTicket(SparkModel):
    id: int | None
    summary: Annotated[str, Field(description=' Max length: 100;')]
    isIssueFlag: bool | None
    board: BoardReference | None
    status: ServiceStatusReference | None
    workRole: WorkRoleReference | None
    workType: WorkTypeReference | None
    project: ProjectReference | None
    phase: ProjectPhaseReference
    wbsCode: Annotated[str | None, Field(description=' Max length: 50;')]
    company: CompanyReference | None
    site: SiteReference | None
    siteName: Annotated[str | None, Field(description=' Max length: 50;')]
    addressLine1: Annotated[str | None, Field(description=' Max length: 50;')]
    addressLine2: Annotated[str | None, Field(description=' Max length: 50;')]
    city: Annotated[str | None, Field(description=' Max length: 50;')]
    stateIdentifier: Annotated[str | None, Field(description=' Max length: 50;')]
    zip: Annotated[str | None, Field(description=' Max length: 12;')]
    country: CountryReference | None
    contact: ContactReference | None
    contactName: Annotated[str | None, Field(description=' Max length: 62;')]
    contactPhoneNumber: Annotated[str | None, Field(description=' Max length: 20;')]
    contactPhoneExtension: Annotated[str | None, Field(description=' Max length: 15;')]
    contactEmailAddress: Annotated[str | None, Field(description=' Max length: 250;')]
    type: ServiceTypeReference | None
    subType: ServiceSubTypeReference | None
    item: ServiceItemReference | None
    owner: MemberReference | None
    priority: PriorityReference | None
    serviceLocation: ServiceLocationReference | None
    source: ServiceSourceReference | None
    requiredDate: datetime | None
    budgetHours: float | None
    opportunity: OpportunityReference | None
    agreement: AgreementReference | None
    agreementType: str | None
    knowledgeBaseCategoryId: int | None
    knowledgeBaseSubCategoryId: int | None
    knowledgeBaseLinkId: int | None
    knowledgeBaseLinkType: ProjectTicketKnowledgeBaseLinkType | None
    allowAllClientsPortalView: bool | None
    customerUpdatedFlag: bool | None
    automaticEmailContactFlag: bool | None
    automaticEmailResourceFlag: bool | None
    automaticEmailCcFlag: bool | None
    automaticEmailCc: Annotated[str | None, Field(description=' Max length: 1000;')]
    closedDate: str | None
    closedBy: str | None
    closedFlag: bool | None
    actualHours: float | None
    approved: bool | None
    subBillingMethod: ProjectBillingMethod | None
    subBillingAmount: float | None
    subDateAccepted: str | None
    resources: str | None
    billTime: ActivityStopwatchBillableOption | None
    billExpenses: ActivityStopwatchBillableOption | None
    billProducts: ActivityStopwatchBillableOption | None
    predecessorType: ProjectTemplateTicketPredecessorType | None
    predecessorId: int | None
    predecessorClosedFlag: bool | None
    lagDays: int | None
    lagNonworkingDaysFlag: bool | None
    estimatedStartDate: datetime | None
    location: SystemLocationReference | None
    department: SystemDepartmentReference | None
    duration: int | None
    scheduleStartDate: datetime | None
    scheduleEndDate: datetime | None
    mobileGuid: UUID | None
    currency: CurrencyReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    tasks: list[TicketTask] | None
    initialDescription: Annotated[
        str | None,
        Field(
            description='Only available for POST, will not be returned in the response.'
        ),
    ]
    initialInternalAnalysis: Annotated[
        str | None,
        Field(
            description='Only available for POST, will not be returned in the response.'
        ),
    ]
    initialResolution: Annotated[
        str | None,
        Field(
            description='Only available for POST, will not be returned in the response.'
        ),
    ]
    contactEmailLookup: str | None
    processNotifications: Annotated[
        bool | None,
        Field(
            description='Can be set to false to skip notification processing when adding or updating a ticket (Defaults to True).'
        ),
    ]
    skipCallback: bool | None
    customFields: list[CustomFieldValue] | None


class ProjectTicketKnowledgeBaseLinkType(str, Enum):
    Activity = 'Activity'
    ProjectIssue = 'ProjectIssue'
    KnowledgeBaseArticle = 'KnowledgeBaseArticle'
    ProjectTicket = 'ProjectTicket'
    ServiceTicket = 'ServiceTicket'
    Time = 'Time'


class ProjectTicketNote(SparkModel):
    id: int | None
    noteType: ProjectTicketNoteNoteType | None
    ticket: TicketReference | None
    text: str | None
    detailDescriptionFlag: bool | None
    internalAnalysisFlag: bool | None
    resolutionFlag: bool | None
    timeStart: datetime | None
    timeEnd: datetime | None
    bundledFlag: bool | None
    mergedFlag: bool | None
    issueFlag: bool | None
    originalAuthor: str | None
    member: MemberReference | None
    contact: ContactReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ProjectTicketNoteNoteType(str, Enum):
    TicketNote = 'TicketNote'
    TimeEntryNote = 'TimeEntryNote'
    MeetingNote = 'MeetingNote'


class ProjectType(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 30;')]
    defaultFlag: bool | None
    inactiveFlag: bool | None
    integrationXref: Annotated[str | None, Field(description=' Max length: 50;')]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ProjectTypeInfo(SparkModel):
    id: int | None
    name: str | None
    defaultFlag: bool | None
    inactiveFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ProjectTypeReference(ActivityReference):
    pass


class ProjectWorkplan(SparkModel):
    projectId: int | None
    phases: list[ProjectWorkplanProjectPhase] | None


class ProjectWorkplanProjectPhase(SparkModel):
    id: int | None
    projectId: int | None
    description: str | None
    status: PhaseStatusReference | None
    parentPhase: ProjectPhaseReference | None
    wbsCode: str | None
    markAsMilestoneFlag: bool | None
    notes: str | None
    startDate: str | None
    endDate: str | None
    budgetHours: float | None
    actualHours: float | None
    billableHours: float | None
    scheduled_Hours: float | None
    scheduled_Start: str | None
    scheduled_End: str | None
    scheduled_Duration: int | None
    billPhaseSeparately: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    customFields: list[CustomFieldValue] | None


class PurchaseOrder(SparkModel):
    id: int | None
    businessUnitId: int | None
    businessUnit: BillingUnitReference | None
    cancelReason: str | None
    closedFlag: Annotated[
        bool | None,
        Field(
            description='The closed flag can only be updated via updating the purchase order status to a closed/open status.'
        ),
    ]
    closedBy: str | None
    customerCity: str | None
    customerCompany: CompanyReference | None
    customerContact: ContactReference | None
    customerCountry: CountryReference | None
    customerExtension: str | None
    customerName: str | None
    customerPhone: str | None
    customerSite: SiteReference | None
    customerSiteName: str | None
    customerState: str | None
    customerStreetLine1: str | None
    customerStreetLine2: str | None
    customerZip: str | None
    dateClosed: datetime | None
    dropShipCustomerFlag: bool | None
    enteredBy: str | None
    freightCost: float | None
    freightPackingSlip: str | None
    freightTaxTotal: float | None
    internalNotes: str | None
    locationId: int | None
    location: SystemLocationReference | None
    poDate: Annotated[datetime | None, Field(description=' Required On Updates;')]
    poNumber: Annotated[
        str | None, Field(description=' Required On Updates; Max length: 50;')
    ]
    salesTax: float | None
    shipmentDate: datetime | None
    shipmentMethod: ShipmentMethodReference | None
    shippingInstructions: str | None
    status: PurchaseOrderStatusReference
    subTotal: float | None
    taxCode: TaxCodeReference | None
    taxFreightFlag: bool | None
    taxPoFlag: bool | None
    terms: BillingTermsReference
    total: float | None
    trackingNumber: Annotated[str | None, Field(description=' Max length: 50;')]
    updateShipmentInfo: Annotated[
        bool | None,
        Field(
            description='Determines whether or not to update all of the shipment info for each associated line item when new shipment info is passed in.'
        ),
    ]
    updateVendorOrderNumber: Annotated[
        bool | None,
        Field(
            description='Determines whether or not to update vendor order number for each associated line item when new vendor order number is passed in.'
        ),
    ]
    vendorCompany: CompanyReference
    vendorContact: ContactReference | None
    vendorInvoiceDate: datetime | None
    vendorInvoiceNumber: Annotated[str | None, Field(description=' Max length: 50;')]
    vendorOrderNumber: Annotated[str | None, Field(description=' Max length: 50;')]
    vendorSite: SiteReference | None
    warehouse: WarehouseReference | None
    warehouseContact: ContactReference | None
    currency: CurrencyReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    customFields: list[CustomFieldValue] | None


class PurchaseOrderInfo(SparkModel):
    id: int | None
    currency: CurrencyReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class PurchaseOrderLineItem(SparkModel):
    id: int | None
    backorderedFlag: bool | None
    canceledBy: str | None
    canceledFlag: bool | None
    canceledReason: Annotated[str | None, Field(description=' Max length: 100;')]
    closedFlag: bool | None
    dateCanceled: datetime | None
    dateCanceledUtc: datetime | None
    description: Annotated[str, Field(description=' Max length: 6000;')]
    displayInternalNotesFlag: bool | None
    expectedShipDate: datetime | None
    internalNotes: Annotated[str | None, Field(description=' Max length: 1000;')]
    lineNumber: int
    packingSlip: Annotated[str | None, Field(description=' Max length: 50;')]
    product: IvItemReference
    purchaseOrderId: int | None
    purchaseOrderNumber: Annotated[str | None, Field(description=' Max length: 50;')]
    quantity: float
    receivedQuantity: int | None
    serialNumbers: str | None
    shipDate: datetime | None
    shipmentMethod: ShipmentMethodReference | None
    tax: float | None
    trackingNumber: Annotated[str | None, Field(description=' Max length: 50;')]
    unitCost: float | None
    unitOfMeasure: UnitOfMeasureReference
    vendorOrderNumber: Annotated[str | None, Field(description=' Max length: 50;')]
    vendorSku: Annotated[str | None, Field(description=' Max length: 50;')]
    warehouse: WarehouseReference | None
    warehouseBin: WarehouseBinReference | None
    shipSet: Annotated[str | None, Field(description=' Max length: 10;')]
    dateReceived: datetime | None
    receivedStatus: PurchaseOrderLineItemReceivedStatus | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    extCost: float | None
    expectedArrivalDate: datetime | None
    isDetachAvailable: bool | None
    batchedFlag: bool | None
    unbatchedRecId: int | None
    salesOrder: list[SalesOrderReference] | None
    customFields: list[CustomFieldValue] | None


class PurchaseOrderLineItemReceivedStatus(str, Enum):
    Waiting = 'Waiting'
    FullyReceived = 'FullyReceived'
    PartiallyReceiveCancelRest = 'PartiallyReceiveCancelRest'
    PartiallyReceiveCloneRest = 'PartiallyReceiveCloneRest'


class PurchaseOrderLineItemReference(AdjustmentTypeReference):
    pass


class PurchaseOrderNote(SparkModel):
    id: int | None
    purchaseHeaderRecID: int | None
    text: str | None
    type: NoteTypeReference | None
    flagged: bool | None
    enteredBy: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class PurchaseOrderReference(ActivityReference):
    pass


class PurchaseOrderStatus(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    defaultFlag: bool | None
    closedFlag: bool | None
    inactiveFlag: bool | None
    defaultClosedFlag: bool | None
    sortOrder: int | None
    emailTemplate: PurchaseOrderStatusEmailTemplateReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class PurchaseOrderStatusEmailTemplate(SparkModel):
    id: int | None
    status: PurchaseOrderStatusReference | None
    useSenderFlag: bool | None
    firstName: Annotated[str | None, Field(description=' Max length: 100;')]
    lastName: Annotated[str | None, Field(description=' Max length: 100;')]
    emailAddress: Annotated[str | None, Field(description=' Max length: 100;')]
    subject: Annotated[str, Field(description=' Max length: 200;')]
    body: str | None
    copySenderFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class PurchaseOrderStatusEmailTemplateReference(ActivityReference):
    pass


class PurchaseOrderStatusInfo(SparkModel):
    id: int | None
    name: str | None
    defaultFlag: bool | None
    closedFlag: bool | None
    inactiveFlag: bool | None
    defaultClosedFlag: bool | None
    sortOrder: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class PurchaseOrderStatusNotification(SparkModel):
    id: int | None
    notifyWho: NotificationRecipientReference
    status: PurchaseOrderStatusReference | None
    member: MemberReference | None
    email: Annotated[
        str | None,
        Field(
            description='Purchase Order Status Notification email must be entered if the notify type is "Email Address". Max length: 50;'
        ),
    ]
    workflowStep: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class PurchaseOrderStatusReference(ActivityReference):
    pass


class PurchasingDemand(SparkModel):
    warehouse: WarehouseReference | None
    vendor: CompanyReference | None
    products: list[ProductDemand] | None
    purchaseOrder: PurchaseOrder | None


class QuoteLink(SparkModel):
    id: int | None
    location: SystemLocationReference | None
    link: Annotated[str, Field(description=' Max length: 2000;')]
    allLocationsFlag: bool | None
    newWindowFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class RelationshipReference(ActivityReference):
    pass


class ReminderReference(ActivityReference):
    pass


class Report(SparkModel):
    name: str | None


class ReportCard(ContactRelationship):
    pass


class ReportCardDetail(SparkModel):
    id: int | None
    kpi: KPIReference
    sortOrder: int | None
    reportCard: ReportCardReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ReportCardInfo(ActivityReference):
    pass


class ReportCardReference(ActivityReference):
    pass


class ReportColumnDefinition(SparkModel):
    type: str | None
    isNullable: bool | None
    identityColumn: bool | None


class ReportDataResponse(SparkModel):
    column_definitions: list[dict[str, ReportColumnDefinition]] | None
    row_values: list[list[dict[str, Any_aliased]]] | None


class ReportingService(SparkModel):
    id: int | None
    reportingUserName: Annotated[str | None, Field(description=' Max length: 50;')]
    reportingPassword: Annotated[
        str | None,
        Field(
            description='To blank out the password, enter an empty string here. Max length: 50;'
        ),
    ]
    reportingDomain: Annotated[str | None, Field(description=' Max length: 50;')]
    reportingUrl: Annotated[str | None, Field(description=' Max length: 100;')]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class RequestPasswordRequest(SparkModel):
    email: str


class ResultInfo(SparkModel):
    success: bool | None
    originalIndex: int | None
    statusCode: int | None
    data: IRestIdentifiedItem | None
    error: ErrorResponseMessage | None


class RmaAction(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    defaultFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class RmaActionInfo(ActivityReference):
    pass


class RmaActionReference(ActivityReference):
    pass


class RmaDisposition(RmaAction):
    pass


class RmaDispositionInfo(ActivityReference):
    pass


class RmaDispositionReference(ActivityReference):
    pass


class RmaStatus(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    defaultFlag: bool | None
    sortOrder: int | None
    closedFlag: bool | None
    emailTemplate: RmaStatusEmailTemplateReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class RmaStatusEmailTemplate(SparkModel):
    id: int | None
    status: RmaStatusReference | None
    useSenderFlag: bool | None
    firstName: Annotated[str | None, Field(description=' Max length: 100;')]
    lastName: Annotated[str | None, Field(description=' Max length: 100;')]
    emailAddress: Annotated[str | None, Field(description=' Max length: 100;')]
    subject: Annotated[str, Field(description=' Max length: 200;')]
    body: str
    copySenderFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class RmaStatusEmailTemplateReference(ActivityReference):
    pass


class RmaStatusInfo(OpportunityRatingInfo):
    pass


class RmaStatusNotification(SparkModel):
    id: int | None
    notifyWho: NotificationRecipientReference
    status: RmaStatusReference | None
    member: MemberReference | None
    email: Annotated[
        str | None,
        Field(
            description='RMA Status Notification sendEmail must be entered if the notify type is "Email Address". Max length: 50;'
        ),
    ]
    workflowStep: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class RmaStatusReference(ActivityReference):
    pass


class RmaTag(SparkModel):
    id: int | None
    serviceTicket: TicketReference | None
    salesOrder: SalesOrderReference | None
    invoice: InvoiceReference | None
    project: ProjectReference | None
    summary: Annotated[str | None, Field(description=' Max length: 150;')]
    product: IvItemReference
    ivDescription: str | None
    productDescription: Annotated[str, Field(description=' Max length: 200;')]
    serialNumber: str | None
    mfgItemID: Annotated[str | None, Field(description=' Max length: 100;')]
    status: RmaStatusReference
    listPrice: float | None
    unitPrice: float | None
    location: SystemLocationReference
    department: SystemDepartmentReference
    problemDescription: Annotated[str | None, Field(description=' Max length: 1000;')]
    returnedCompany: CompanyReference
    returnedContact: ContactReference | None
    returnedContactType: str | None
    returnedContactPhone: str | None
    returnedContactExtension: str | None
    returnedContactEmail: str | None
    returnedContactAddressLine1: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    returnedContactAddressLine2: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    returnedContactCity: Annotated[str | None, Field(description=' Max length: 50;')]
    returnedContactState: Annotated[str | None, Field(description=' Max length: 50;')]
    returnedContactZip: Annotated[str | None, Field(description=' Max length: 12;')]
    returnedContactCountry: CountryReference | None
    rmaDisposition: RmaDispositionReference
    returnedSite: SiteReference | None
    purchasedCompany: CompanyReference | None
    purchasedContact: ContactReference | None
    purchasedContactType: str | None
    purchasedContactPhone: str | None
    purchasedContactExtension: str | None
    purchasedContactEmail: str | None
    purchasedContactAddressLine1: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    purchasedContactAddressLine2: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    purchasedContactCity: Annotated[str | None, Field(description=' Max length: 50;')]
    purchasedContactState: Annotated[str | None, Field(description=' Max length: 50;')]
    purchasedContactZip: Annotated[str | None, Field(description=' Max length: 12;')]
    purchasedContactCountry: CountryReference | None
    purchasedInvoiceNumber: Annotated[str | None, Field(description=' Max length: 50;')]
    purchasedInvoiceDate: date_aliased | None
    purchasedOrderNumber: Annotated[str | None, Field(description=' Max length: 50;')]
    purchasedVendorAction: RmaActionReference | None
    purchasedVendorRmaNumber: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    purchasedSite: SiteReference | None
    purchasedNotes: Annotated[str | None, Field(description=' Max length: 1000;')]
    warrantyCompany: CompanyReference | None
    warrantyContact: ContactReference | None
    warrantyContactType: str | None
    warrantyContactPhone: str | None
    warrantyContactEmail: str | None
    warrantyContactExtension: str | None
    warrantyContactAddressLine1: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    warrantyContactAddressLine2: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    warrantyContactCity: Annotated[str | None, Field(description=' Max length: 50;')]
    warrantyContactState: Annotated[str | None, Field(description=' Max length: 50;')]
    warrantyContactZip: Annotated[str | None, Field(description=' Max length: 12;')]
    warrantyContactCountry: CountryReference | None
    warrantySite: SiteReference | None
    warrantyNotes: Annotated[str | None, Field(description=' Max length: 1000;')]
    repairCompany: CompanyReference | None
    repairContact: ContactReference | None
    repairContactType: str | None
    repairContactPhone: str | None
    repairContactExtension: str | None
    repairContactEmail: str | None
    repairContactAddressLine1: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    repairContactAddressLine2: Annotated[
        str | None, Field(description=' Max length: 50;')
    ]
    repairContactCity: Annotated[str | None, Field(description=' Max length: 50;')]
    repairContactState: Annotated[str | None, Field(description=' Max length: 50;')]
    repairContactZip: Annotated[str | None, Field(description=' Max length: 12;')]
    repairContactCountry: CountryReference | None
    repairOrderNumber: Annotated[str | None, Field(description=' Max length: 50;')]
    repairSite: SiteReference | None
    repairNotes: Annotated[str | None, Field(description=' Max length: 1000;')]
    dropShipFlag: bool | None
    shipMethod: ShipmentMethodReference | None
    shippingDate: date_aliased | None
    shippingTrackingNumber: Annotated[str | None, Field(description=' Max length: 50;')]
    internalNotes: Annotated[str | None, Field(description=' Max length: 1000;')]
    closingNotes: Annotated[str | None, Field(description=' Max length: 1000;')]
    dateClosed: str | None
    accountManager: MemberReference | None
    technicalContact: MemberReference | None
    currency: CurrencyReference | None
    closedBy: MemberReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    customFields: list[CustomFieldValue] | None


class Role(ContactRelationship):
    pass


class SLA(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 25;')]
    basedOn: SLABasedOn
    customCalendar: CalendarReference | None
    defaultFlag: bool | None
    applicationOrder: int | None
    hiImpactHiUrgency: PriorityReference | None
    hiImpactMedUrgency: PriorityReference | None
    hiImpactLowUrgency: PriorityReference | None
    medImpactHiUrgency: PriorityReference | None
    medImpactMedUrgency: PriorityReference | None
    medImpactLowUrgency: PriorityReference | None
    lowImpactHiUrgency: PriorityReference | None
    lowImpactMedUrgency: PriorityReference | None
    lowImpactLowUrgency: PriorityReference | None
    respondHours: float | None
    respondPercent: int | None
    planWithin: float | None
    planWithinPercent: int | None
    resolutionHours: float | None
    resolutionPercent: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class SLABasedOn(str, Enum):
    AllHours = 'AllHours'
    Customer = 'Customer'
    MyCalendar = 'MyCalendar'
    Custom = 'Custom'


class SLAInfo(ActivityReference):
    pass


class SLAPriority(SparkModel):
    id: int | None
    priority: PriorityReference
    respondHours: float | None
    respondPercent: int | None
    planWithin: float | None
    planWithinPercent: int | None
    resolutionHours: float | None
    resolutionPercent: int | None
    sla: SLAReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class SLAReference(ActivityReference):
    pass


class SalesConversion(SparkModel):
    parentType: str | None
    convertedTo: ConversionTypeReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class SalesOrderRecap(SparkModel):
    id: int | None
    billableAmount: float | None
    cost: float | None
    margin: float | None
    percent: float | None


class SalesOrderReference(AdjustmentTypeReference):
    pass


class SalesOrdersLineItem(SparkModel):
    id: int | None
    purchaseOrderNumber: Annotated[str | None, Field(description=' Max length: 100;')]
    salesOrder: SalesOrderReference
    billStatus: str | None
    quantity: int | None
    quantityCancelled: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class SalesProbability(SparkModel):
    id: int | None
    probability: int
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class SalesProbabilityInfo(SparkModel):
    id: int | None
    probability: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class SalesQuota(SparkModel):
    id: int | None
    member: MemberReference
    forecastYear: int | None
    location: SystemLocationReference
    department: SystemDepartmentReference | None
    category: ProductCategoryReference | None
    subCategory: ProductSubCategoryReference | None
    januaryRevenue: float | None
    januaryMargin: float | None
    februaryRevenue: float | None
    februaryMargin: float | None
    marchRevenue: float | None
    marchMargin: float | None
    aprilRevenue: float | None
    aprilMargin: float | None
    mayRevenue: float | None
    mayMargin: float | None
    juneRevenue: float | None
    juneMargin: float | None
    julyRevenue: float | None
    julyMargin: float | None
    augustRevenue: float | None
    augustMargin: float | None
    septemberRevenue: float | None
    septemberMargin: float | None
    octoberRevenue: float | None
    octoberMargin: float | None
    novemberRevenue: float | None
    novemberMargin: float | None
    decemberRevenue: float | None
    decemberMargin: float | None
    currency: CurrencyReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class SalesTeam(SparkModel):
    id: int | None
    salesTeamIdentifier: Annotated[str, Field(description=' Max length: 20;')]
    salesTeamDescription: Annotated[str, Field(description=' Max length: 50;')]
    salesTeamLocation: SystemLocationReference
    inactiveFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class SalesTeamMember(SparkModel):
    id: int | None
    member: MemberReference
    location: SystemLocationReference | None
    department: SystemDepartmentReference | None
    allowAccessFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class SalesTeamReference(AdjustmentTypeReference):
    pass


class ScheduleColor(SparkModel):
    id: int | None
    startPercent: Annotated[
        int | None,
        Field(
            description='A startPercent (0 or higher) is required if endPercent has value.'
        ),
    ]
    endPercent: Annotated[
        int | None,
        Field(description='A endPercent is required if startPercent has value.'),
    ]
    color: Annotated[str, Field(description='Must be a valid Hexadecimal Color Code.')]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ScheduleDetail(SparkModel):
    id: int | None
    scheduleEntry: ScheduleEntryReference | None
    dateStart: str | None
    dateEnd: str | None
    member: MemberReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ScheduleEntry(SparkModel):
    id: int | None
    objectId: int | None
    name: Annotated[str | None, Field(description=' Max length: 250;')]
    member: MemberReference | None
    where: ServiceLocationReference | None
    dateStart: datetime | None
    dateEnd: datetime | None
    reminder: ReminderReference | None
    status: ScheduleStatusReference | None
    type: ScheduleTypeReference
    span: ScheduleSpanReference | None
    doneFlag: bool | None
    acknowledgedFlag: bool | None
    ownerFlag: bool | None
    meetingFlag: bool | None
    allowScheduleConflictsFlag: bool | None
    addMemberToProjectFlag: bool | None
    projectRoleId: int | None
    mobileGuid: UUID | None
    acknowledgedDate: datetime | None
    closeDate: datetime | None
    notifyResource: bool | None
    notificationSent: bool | None
    notificationResponse: str | None
    hours: float | None
    startTimeSet: bool | None
    endTimeSet: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ScheduleEntryDetail(SparkModel):
    id: int | None
    scheduleEntry: ScheduleEntryReference | None
    dateStart: str | None
    dateEnd: str | None
    hoursScheduled: float | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ScheduleEntryReference(InOutTypeInfo):
    pass


class ScheduleReminderTime(SparkModel):
    id: int | None
    time: Annotated[int | None, Field(description='Time is calculated in minutes.')]
    name: Annotated[str | None, Field(description=' Max length: 10;')]
    defaultFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ScheduleSpanReference(AdjustmentTypeReference):
    pass


class ScheduleStatus(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 30;')]
    defaultFlag: bool | None
    showAsTentativeFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ScheduleStatusInfo(SparkModel):
    id: int | None
    name: str | None
    defaultFlag: bool | None
    showAsTentativeFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ScheduleStatusReference(ActivityReference):
    pass


class ScheduleStopwatch(SparkModel):
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    agreement: AgreementReference | None
    billableOption: ActivityStopwatchBillableOption | None
    businessUnitId: int | None
    dateEntered: datetime | None
    endTime: datetime | None
    id: int | None
    internalNotes: str | None
    locationId: int | None
    member: MemberReference
    mobileGuid: UUID | None
    notes: Annotated[str | None, Field(description=' Max length: 4000;')]
    scheduleId: int
    scheduleMobileGuid: UUID | None
    startTime: datetime | None
    status: ActivityStopwatchStatus
    totalPauseTime: int | None
    workRole: WorkRoleReference | None
    workType: WorkTypeReference | None


class ScheduleType(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    identifier: Annotated[str, Field(description=' Max length: 1;')]
    chargeCode: ChargeCodeReference | None
    where: ServiceLocationReference | None
    systemFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ScheduleTypeInfo(SparkModel):
    id: int | None
    name: str | None
    identifier: str | None
    chargeCode: ChargeCodeReference | None
    where: ServiceLocationReference | None
    systemFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ScheduleTypeReference(AdjustmentTypeReference):
    pass


class SchedulingMemberInfo(SparkModel):
    id: int | None
    identifier: str | None
    firstName: str | None
    middleInitial: str | None
    lastName: str | None
    fullName: str | None
    defaultEmail: str | None
    inactiveFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class SecurityRole(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 30;')]
    roleType: Annotated[str | None, Field(description=' Max length: 30;')]
    adminFlag: bool | None
    inactiveFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class SecurityRoleInfo(SparkModel):
    id: int | None
    name: str | None
    roleType: str | None
    inactiveFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class SecurityRoleReference(ActivityReference):
    pass


class SecurityRoleSetting(SparkModel):
    id: int | None
    addLevel: MySecurityAddLevel | None
    editLevel: MySecurityAddLevel | None
    deleteLevel: MySecurityAddLevel | None
    inquireLevel: MySecurityAddLevel | None
    moduleFunctionName: str | None
    moduleFunctionDescription: str | None
    myAllFlag: bool | None
    moduleFunctionIdentifier: str | None
    reportFlag: bool | None
    restrictFlag: bool | None
    customFlag: bool | None
    moduleDescription: str | None
    moduleIdentifier: str | None
    moduleName: str | None
    sortOrder: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class Service(SparkModel):
    id: int | None
    srNotify: ServiceSrNotify
    scheduleSpan: ServiceScheduleSpan
    hideDelimiterFlag: bool | None
    allowCCFlag: bool | None
    allowTOFlag: bool | None
    headerColor: Annotated[str | None, Field(description=' Max length: 50;')]
    memberColor: Annotated[str | None, Field(description=' Max length: 50;')]
    contactColor: Annotated[str | None, Field(description=' Max length: 50;')]
    unknownColor: Annotated[str | None, Field(description=' Max length: 50;')]
    calendarSetup: CalendarSetupReference | None
    headerColorDisableFlag: bool | None
    memberColorDisableFlag: bool | None
    contactColorDisableFlag: bool | None
    unknownColorDisableFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ServiceCodeReference(ActivityReference):
    pass


class ServiceEmailTemplate(SparkModel):
    id: int | None
    type: ServiceEmailTemplateType
    serviceSurvey: ServiceSurveyReference | None
    serviceBoard: BoardReference | None
    useSenderFlag: bool | None
    firstName: Annotated[
        str | None,
        Field(
            description='From fields (first name, last name, email address) are required if useSenderFlag is false. Max length: 100;'
        ),
    ]
    lastName: Annotated[
        str | None,
        Field(
            description='From fields (first name, last name, email address) are required if useSenderFlag is false. Max length: 100;'
        ),
    ]
    emailAddress: Annotated[
        str | None,
        Field(
            description='From fields (first name, last name, email address) are required if useSenderFlag is false. Max length: 100;'
        ),
    ]
    subject: Annotated[str | None, Field(description=' Max length: 200;')]
    body: str | None
    copySenderFlag: bool | None
    tasksFlag: bool | None
    resourceRecordsFlag: bool | None
    externalContactNotifications: bool | None
    internalContactNotifications: bool | None
    serviceStatus: ServiceStatusReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ServiceEmailTemplateReference(SparkModel):
    id: int | None
    identifier: str | None
    name: str | None
    type: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ServiceEmailTemplateType(str, Enum):
    Any = 'Any'
    Closed = 'Closed'
    Invoice = 'Invoice'
    New = 'New'
    SalesOrder = 'SalesOrder'
    PurchaseOrder = 'PurchaseOrder'
    RMA = 'RMA'
    Specific = 'Specific'


class ServiceInfo(SparkModel):
    id: int | None
    headerColor: str | None
    memberColor: str | None
    contactColor: str | None
    unknownColor: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ServiceItemReference(ActivityReference):
    pass


class ServiceLocation(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 30;')]
    where: ServiceLocationWhere
    defaultFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ServiceLocationInfo(AddressFormatInfo):
    pass


class ServiceLocationReference(ActivityReference):
    pass


class ServiceLocationWhere(str, Enum):
    OnSite = 'OnSite'
    Remote = 'Remote'
    InHouse = 'InHouse'


class ServiceNote(SparkModel):
    id: int | None
    ticketId: int | None
    text: str | None
    detailDescriptionFlag: bool | None
    internalAnalysisFlag: bool | None
    resolutionFlag: bool | None
    issueFlag: bool | None
    member: MemberReference | None
    contact: ContactReference | None
    customerUpdatedFlag: bool | None
    processNotifications: bool | None
    dateCreated: str | None
    createdBy: str | None
    internalFlag: bool | None
    externalFlag: bool | None
    sentimentScore: float | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ServiceRevenueReference(AgreementRevenueReference):
    pass


class ServiceScheduleSpan(str, Enum):
    Standard = 'Standard'
    OfficeHours = 'OfficeHours'
    Overnight = 'Overnight'


class ServiceSignoff(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    defaultFlag: bool | None
    visibleLogoFlag: bool | None
    companyInfoFlag: bool | None
    billingTermsFlag: bool | None
    summaryFlag: bool | None
    discussionFlag: bool | None
    taskFlag: Annotated[
        bool | None,
        Field(
            description='On add/post, if this is set to true but no value is set for task, task is defaulted to ServiceTasks.All.'
        ),
    ]
    task: Annotated[
        ServiceSignoffTask | None,
        Field(
            description='On add/post, if this is set but no value is set for taskFlag, taskFlag is set to true.'
        ),
    ]
    configurationsFlag: bool | None
    internalNotesFlag: bool | None
    resolutionFlag: bool | None
    timeFlag: Annotated[
        bool | None,
        Field(
            description='On add/post, if any time related flag is set to true, this is also set to true.'
        ),
    ]
    timeMemberFlag: bool | None
    timeDateFlag: bool | None
    timeStartEndFlag: bool | None
    timeBillFlag: bool | None
    timeHoursFlag: bool | None
    timeRateFlag: bool | None
    timeExtendedAmountFlag: bool | None
    timeWorkTypeFlag: bool | None
    timeAgreementFlag: bool | None
    timeNotesFlag: bool | None
    timeManualFlag: bool | None
    timeManualEntry: int | None
    timeTaxFlag: bool | None
    expenseFlag: Annotated[
        bool | None,
        Field(
            description='On add/post, if any expense related flag is set to true, this is also set to true.'
        ),
    ]
    expenseDateFlag: bool | None
    expenseMemberFlag: bool | None
    expenseTypeFlag: bool | None
    expenseBillFlag: bool | None
    expenseAmountFlag: bool | None
    expenseAgreementFlag: bool | None
    expenseNotesFlag: bool | None
    expenseTaxFlag: bool | None
    expenseManualFlag: bool | None
    expenseManualEntry: int | None
    productFlag: Annotated[
        bool | None,
        Field(
            description='On add/post, if any product related flag is set to true, this is also set to true.'
        ),
    ]
    productDescriptionFlag: bool | None
    productBillFlag: bool | None
    productQuantityFlag: bool | None
    productPriceFlag: bool | None
    productExtendedAmountFlag: bool | None
    productAgreementFlag: bool | None
    productManualFlag: bool | None
    productManualEntry: int | None
    productTaxFlag: bool | None
    technicianSignoffFlag: bool | None
    customerSignoffTextFlag: Annotated[
        bool | None,
        Field(
            description='On add/post, if customerSignoffText.Length > 0, this is set to true.'
        ),
    ]
    customerSignoffText: Annotated[str | None, Field(description=' Max length: 4000;')]
    customerSignoffFieldsFlag: bool | None
    billingMethodsTextFlag: Annotated[
        bool | None,
        Field(
            description='On add/post, if billingMethodsText.Length > 0, this is set to true.'
        ),
    ]
    billingMethodsText: Annotated[str | None, Field(description=' Max length: 2000;')]
    creditCardFieldsFlag: bool | None
    defaultFFFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ServiceSignoffCustomField(SparkModel):
    id: int | None
    sequenceNumber: float
    displaySection: ServiceSignoffCustomFieldDisplaySection
    userDefinedField: UserDefinedFieldReference
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ServiceSignoffCustomFieldDisplaySection(str, Enum):
    CustomerInformation = 'CustomerInformation'
    Detail = 'Detail'
    Expenses = 'Expenses'
    Configurations = 'Configurations'
    AdditionalSignOffFields = 'AdditionalSignOffFields'
    InternalNotes = 'InternalNotes'
    Time = 'Time'
    Products = 'Products'
    Resolution = 'Resolution'
    Summary = 'Summary'
    Tasks = 'Tasks'


class ServiceSignoffInfo(AddressFormatInfo):
    pass


class ServiceSignoffReference(ActivityReference):
    pass


class ServiceSignoffTask(str, Enum):
    All = 'All'
    Closed = 'Closed'
    Open = 'Open'


class ServiceSourceReference(ActivityReference):
    pass


class ServiceSrNotify(str, Enum):
    All = 'All'
    NewAndClosedRequests = 'NewAndClosedRequests'
    ClosedRequestsOnly = 'ClosedRequestsOnly'
    NewRequestsOnly = 'NewRequestsOnly'
    None_ = 'None'


class ServiceStatusReference(SparkModel):
    id: int | None
    name: str | None
    sort: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ServiceSubTypeReference(ActivityReference):
    pass


class ServiceSurvey(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    inactiveFlag: bool | None
    headerIncludeLogoFlag: bool | None
    headerText: Annotated[str | None, Field(description=' Max length: 4000;')]
    headerTextVisibleFlag: bool | None
    footerText: Annotated[str | None, Field(description=' Max length: 500;')]
    footerTextVisibleFlag: bool | None
    thankYouText: Annotated[str | None, Field(description=' Max length: 4000;')]
    notifyWho: GenericIdIdentifierReference | None
    notifyWhoVisibleFlag: bool | None
    notifyMember: MemberReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ServiceSurveyQuestion(SparkModel):
    id: int | None
    sequenceNumber: int | None
    type: ServiceSurveyQuestionType
    question: Annotated[str, Field(description=' Max length: 1000;')]
    options: list[ServiceSurveyQuestionOption] | None
    includeFlag: bool | None
    requiredFlag: bool | None
    noAnswerPoints: int | None
    surveyId: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ServiceSurveyQuestionOption(SparkModel):
    includeFlag: bool | None
    caption: str | None
    points: int | None


class ServiceSurveyQuestionType(str, Enum):
    OpenEnded = 'OpenEnded'
    Selection = 'Selection'


class ServiceSurveyReference(ActivityReference):
    pass


class ServiceTask(SparkModel):
    id: int | None
    ticketId: int | None
    notes: str | None
    closedFlag: bool | None
    priority: int | None
    schedule: ScheduleEntryReference | None
    code: ServiceCodeReference | None
    member: MemberReference | None
    resolution: str | None
    childScheduleAction: ServiceTaskChildScheduleAction | None
    childTicketId: int | None
    summary: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ServiceTaskChildScheduleAction(str, Enum):
    Transfer = 'Transfer'
    Delete = 'Delete'
    Done = 'Done'


class ServiceTeam(SparkModel):
    id: int | None
    name: str | None
    leader: MemberReference | None
    location: SystemLocationReference | None
    department: SystemDepartmentReference | None
    deleteNotifyFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ServiceTeamReference(ActivityReference):
    pass


class ServiceTemplate(SparkModel):
    id: int | None
    name: str | None
    board: BoardReference | None
    type: ServiceTypeReference | None
    item: ServiceItemReference | None
    subtype: ServiceSubTypeReference | None
    serviceLocation: ServiceLocationReference | None
    status: ServiceStatusReference | None
    source: ServiceSourceReference | None
    priority: PriorityReference | None
    team: ServiceTeamReference | None
    company: CompanyReference | None
    contact: ContactReference | None
    site: SiteReference | None
    assignedNotifyFlag: bool | None
    location: SystemLocationReference | None
    department: SystemDepartmentReference | None
    summary: str | None
    problem: str | None
    hoursBudget: float | None
    internalAnalysis: str | None
    timeBillableFlag: bool | None
    expenseBillableFlag: bool | None
    purchaseOrderNumber: str | None
    reference: str | None
    billComplete_Flag: bool | None
    billServiceSeparatelyFlag: bool | None
    billingAmount: float | None
    billUnapprovedTimeAndExpensesFlag: bool | None
    overrideFlag: bool | None
    timeInvoiceFlag: bool | None
    expenseInvoiceFlag: bool | None
    productInvoiceFlag: bool | None
    agreement: AgreementReference | None
    billingMethod: ProjectBillingMethod | None
    severity: ServiceTemplateSeverity | None
    impact: ServiceTemplateSeverity | None
    assignedBy: MemberReference | None
    scheduleDaysBefore: int | None
    serviceDaysBefore: int | None
    attachScheduleToNewServiceFlag: bool | None
    templateFlag: bool | None
    emailContactFlag: bool | None
    emailResourceFlag: bool | None
    emailCCFlag: bool | None
    emailCC: str | None
    restrictDownpaymentFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ServiceTemplateInfo(SparkModel):
    id: int | None
    name: str | None
    templateFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ServiceTemplateReference(SparkModel):
    id: int | None
    name: str | None
    summary: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ServiceTemplateSeverity(str, Enum):
    Low = 'Low'
    Medium = 'Medium'
    High = 'High'


class ServiceTicketLink(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    enabledFlag: bool | None
    linkText: Annotated[str, Field(description=' Max length: 50;')]
    url: Annotated[str, Field(description=' Max length: 1000;')]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ServiceTicketLinkInfo(SparkModel):
    id: int | None
    name: str | None
    linkText: str | None
    url: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ServiceTicketNote(SparkModel):
    id: int | None
    noteType: ProjectTicketNoteNoteType | None
    ticket: TicketReference | None
    text: str | None
    isMarkdownFlag: bool | None
    detailDescriptionFlag: bool | None
    internalAnalysisFlag: bool | None
    resolutionFlag: bool | None
    timeStart: str | None
    timeEnd: str | None
    bundledFlag: bool | None
    mergedFlag: bool | None
    issueFlag: bool | None
    originalAuthor: str | None
    createdByParentFlag: bool | None
    member: MemberReference | None
    contact: ContactReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ServiceTypeReference(ActivityReference):
    pass


class SetupScreen(SparkModel):
    id: int | None
    category: str | None
    name: str | None
    description: str | None
    moduleDescription: str | None
    moduleIdentifier: str | None
    moduleName: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class Severity(Impact):
    pass


class ShipmentMethod(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    defaultFlag: bool | None
    trackingUrl: Annotated[str | None, Field(description=' Max length: 200;')]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ShipmentMethodInfo(SparkModel):
    id: int | None
    name: str | None
    defaultFlag: bool | None
    trackingUrl: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ShipmentMethodReference(ActivityReference):
    pass


class SicCodeReference(ActivityReference):
    pass


class SiteReference(ActivityReference):
    pass


class Skill(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    category: SkillCategoryReference
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class SkillCategory(ContactDepartment):
    pass


class SkillCategoryReference(ActivityReference):
    pass


class SkillInfo(ActivityReference):
    pass


class SkillReference(ActivityReference):
    pass


class Source(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    defaultFlag: bool | None
    enteredBy: str | None
    dateEntered: datetime | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class SourceInfo(AddressFormatInfo):
    pass


class SsoConfiguration(SparkModel):
    id: Annotated[
        int | None, Field(description='Unique identifier of the SSO Configuration')
    ]
    name: Annotated[
        str, Field(description='Descriptor of the SSO Configuration Max length: 100;')
    ]
    ssoType: Annotated[
        SsoConfigurationSsoType, Field(description='Type of SSO Configuration')
    ]
    inactiveFlag: Annotated[
        bool | None, Field(description='Whether the SSO configuration is not active')
    ]
    samlEntityId: Annotated[
        str | None, Field(description='SAML Identity Provider Id Max length: 1000;')
    ]
    samlSignInUrl: Annotated[
        str | None,
        Field(
            description='Sign in url for the SAML Identity Provider Max length: 1000;'
        ),
    ]
    samlIdpCertificate: Annotated[
        str | None,
        Field(description='Public certificate for Identity Provider signatures'),
    ]
    samlCertificateName: Annotated[
        str | None,
        Field(
            description='Name of the SAML certificate. Metadata on SAML_Idp_Certificate'
        ),
    ]
    samlCertificateIssuedTo: Annotated[
        str | None,
        Field(
            description='Who the SAML certificate was issued to. Metadata on SAML_Idp_Certificate'
        ),
    ]
    samlCertificateThumbprint: Annotated[
        str | None,
        Field(
            description='Thumbprint of the SAML certificate. Metadata on SAML_Idp_Certificate'
        ),
    ]
    samlCertificateValidFrom: Annotated[
        datetime | None,
        Field(
            description='Date when the SAML certificate becomes valid. Metadata on SAML_Idp_Certificate'
        ),
    ]
    samlCertificateValidTo: Annotated[
        datetime | None,
        Field(
            description='Date when the SAML certificate is no longer valid. Metadata on SAML_Idp_Certificate'
        ),
    ]
    locationIds: Annotated[
        list[int],
        Field(description='The locations where the SAML Idp Configuration is used'),
    ]
    clientId: Annotated[
        str | None,
        Field(
            description='Client identity for this configuration of ConnectWise SSO Max length: 1000;'
        ),
    ]
    stsBaseUrl: Annotated[
        str | None, Field(description='Sign in URL for ConnectWise SSO')
    ]
    stsUserAdminUrl: Annotated[
        str | None, Field(description='User Admin Url for ConnectWise SSO')
    ]
    token: str | None
    submittedMemberCount: int | None
    allMembersSubmitted: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    isSsoOnByDefault: bool | None


class SsoConfigurationSsoType(str, Enum):
    CWSSO = 'CWSSO'
    SAML = 'SAML'


class SsoUser(SparkModel):
    id: int | None
    ssoUserId: str | None
    userName: str | None
    firstName: str | None
    lastName: str | None
    email: str | None
    emailConfirmed: bool | None
    disabledFlag: bool | None
    linkedFlag: bool | None
    dateEntered: str | None
    lastUpdated: str | None
    linkedMember: MemberReference | None


class StandardNote(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    contents: str
    location: SystemLocationReference | None
    department: SystemDepartmentReference | None
    board: BoardReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class StandardNoteInfo(SparkModel):
    id: int | None
    name: str | None
    contents: str | None
    location: SystemLocationReference | None
    department: SystemDepartmentReference | None
    board: BoardReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class State(SparkModel):
    id: int | None
    identifier: Annotated[str, Field(description=' Max length: 50;')]
    name: Annotated[str, Field(description=' Max length: 50;')]
    country: CountryReference
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class StateInfo(SparkModel):
    id: int | None
    name: str | None
    identifier: str | None
    country: CountryReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class StateReference(CatalogItemReference):
    pass


class StatusIndicator(SparkModel):
    id: int | None
    identifier: str | None
    name: str | None
    color: str | None
    icon: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class StatusIndicatorReference(CatalogItemReference):
    pass


class StructureReference(ActivityReference):
    pass


class SubCategory(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    inactiveFlag: bool | None
    integrationXref: Annotated[str | None, Field(description=' Max length: 50;')]
    defaultFlag: bool | None
    category: ProductCategoryReference
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class SubCategoryInfo(SparkModel):
    id: int | None
    name: str | None
    category: ProductCategoryReference | None
    inactiveFlag: bool | None
    defaultFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class SuccessResponse(SparkModel):
    success: bool | None
    message: str | None


class Survey(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    instructions: Annotated[str | None, Field(description=' Max length: 1000;')]
    inactiveFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class SurveyInfo(LegacySubCategoryInfo):
    pass


class SurveyOption(SparkModel):
    id: int | None
    caption: Annotated[str, Field(description=' Max length: 100;')]
    points: int
    visibleflag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class SurveyQuestion(SparkModel):
    id: int | None
    survey: SurveyReference | None
    fieldType: SurveyQuestionFieldType
    entryType: ConfigurationTypeQuestionEntryType
    sequenceNumber: float
    question: Annotated[str, Field(description=' Max length: 1000;')]
    numberOfDecimals: int | None
    requiredFlag: bool | None
    inactiveFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class SurveyQuestionFieldType(str, Enum):
    TextArea = 'TextArea'
    Button = 'Button'
    Currency = 'Currency'
    Date = 'Date'
    Hyperlink = 'Hyperlink'
    IPAddress = 'IPAddress'
    Checkbox = 'Checkbox'
    Number = 'Number'
    Percent = 'Percent'
    Text = 'Text'
    Password = 'Password'


class SurveyQuestionReference(ConfigurationTypeQuestionReference):
    pass


class SurveyQuestionValue(SparkModel):
    id: int | None
    survey: SurveyReference | None
    question: SurveyQuestionReference | None
    value: Annotated[str, Field(description=' Max length: 1000;')]
    defaultFlag: bool | None
    pointValue: int | None
    inactiveFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class SurveyReference(ActivityReference):
    pass


class SurveyResult(SparkModel):
    id: int | None
    ticketId: int
    emailAddress: str | None
    footerResponse: str | None
    contactMeFlag: bool | None
    contact: ContactReference | None
    results: list[SurveyResultDetail] | None
    totalPoints: int | None
    company: CompanyReference | None
    surveyId: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class SurveyResultDetail(SparkModel):
    questionId: int | None
    answer: Annotated[
        dict[str, Any_aliased] | None,
        Field(
            description='If question type is Selection, this should be the option array index.'
        ),
    ]


class SystemDepartmentReference(CatalogItemReference):
    pass


class SystemLocationReference(ActivityReference):
    pass


class SystemMenuEntryReference(ActivityReference):
    pass


class SystemSetting(SparkModel):
    id: int | None
    description: str | None
    value: str
    valueType: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TaxCode(SparkModel):
    id: int | None
    identifier: Annotated[str, Field(description=' Max length: 8;')]
    description: Annotated[str, Field(description=' Max length: 50;')]
    invoiceCaption: Annotated[str, Field(description=' Max length: 25;')]
    country: CountryReference | None
    effectiveDate: datetime
    defaultFlag: bool | None
    displayOnInvoiceFlag: bool | None
    canadaCalculateGSTFlag: bool | None
    cancelDate: datetime | None
    levelOneRate: float | None
    levelOneRateType: TaxCodeLevelOneRateType | None
    levelOneTaxableMax: float | None
    levelOneCaption: Annotated[str | None, Field(description=' Max length: 25;')]
    levelOneTaxCodeXref: Annotated[str | None, Field(description=' Max length: 50;')]
    levelOneAgencyXref: Annotated[str | None, Field(description=' Max length: 100;')]
    levelOneServicesFlag: bool | None
    levelOneExpensesFlag: bool | None
    levelOneProductsFlag: bool | None
    levelOneApplySingleUnitFlag: bool | None
    levelOneApplySingleUnitMin: float | None
    levelOneApplySingleUnitMax: float | None
    levelTwoRate: float | None
    levelTwoRateType: TaxCodeLevelOneRateType | None
    levelTwoTaxableMax: float | None
    levelTwoCaption: Annotated[str | None, Field(description=' Max length: 25;')]
    levelTwoTaxCodeXref: Annotated[str | None, Field(description=' Max length: 50;')]
    levelTwoAgencyXref: Annotated[str | None, Field(description=' Max length: 100;')]
    levelTwoServicesFlag: bool | None
    levelTwoExpensesFlag: bool | None
    levelTwoProductsFlag: bool | None
    levelTwoApplySingleUnitFlag: bool | None
    levelTwoApplySingleUnitMin: float | None
    levelTwoApplySingleUnitMax: float | None
    levelThreeRate: float | None
    levelThreeRateType: TaxCodeLevelOneRateType | None
    levelThreeTaxableMax: float | None
    levelThreeCaption: Annotated[str | None, Field(description=' Max length: 25;')]
    levelThreeTaxCodeXref: Annotated[str | None, Field(description=' Max length: 50;')]
    levelThreeAgencyXref: Annotated[str | None, Field(description=' Max length: 100;')]
    levelThreeServicesFlag: bool | None
    levelThreeExpensesFlag: bool | None
    levelThreeProductsFlag: bool | None
    levelThreeApplySingleUnitFlag: bool | None
    levelThreeApplySingleUnitMin: float | None
    levelThreeApplySingleUnitMax: float | None
    levelFourRate: float | None
    levelFourRateType: TaxCodeLevelOneRateType | None
    levelFourTaxableMax: float | None
    levelFourCaption: Annotated[str | None, Field(description=' Max length: 25;')]
    levelFourTaxCodeXref: Annotated[str | None, Field(description=' Max length: 50;')]
    levelFourAgencyXref: Annotated[str | None, Field(description=' Max length: 100;')]
    levelFourServicesFlag: bool | None
    levelFourExpensesFlag: bool | None
    levelFourProductsFlag: bool | None
    levelFourApplySingleUnitFlag: bool | None
    levelFourApplySingleUnitMin: float | None
    levelFourApplySingleUnitMax: float | None
    levelFiveRate: float | None
    levelFiveRateType: TaxCodeLevelOneRateType | None
    levelFiveTaxableMax: float | None
    levelFiveCaption: Annotated[str | None, Field(description=' Max length: 25;')]
    levelFiveTaxCodeXref: Annotated[str | None, Field(description=' Max length: 50;')]
    levelFiveAgencyXref: Annotated[str | None, Field(description=' Max length: 100;')]
    levelFiveServicesFlag: bool | None
    levelFiveExpensesFlag: bool | None
    levelFiveProductsFlag: bool | None
    levelFiveApplySingleUnitFlag: bool | None
    levelFiveApplySingleUnitMin: float | None
    levelFiveApplySingleUnitMax: float | None
    levelSixRate: float | None
    levelSixRateType: TaxCodeLevelOneRateType | None
    levelSixTaxableMax: float | None
    levelSixCaption: Annotated[str | None, Field(description=' Max length: 25;')]
    levelSixTaxCodeXref: Annotated[str | None, Field(description=' Max length: 50;')]
    levelSixAgencyXref: Annotated[str | None, Field(description=' Max length: 100;')]
    levelSixServicesFlag: bool | None
    levelSixExpensesFlag: bool | None
    levelSixProductsFlag: bool | None
    levelSixApplySingleUnitFlag: bool | None
    levelSixApplySingleUnitMin: float | None
    levelSixApplySingleUnitMax: float | None
    workRoleIds: Annotated[
        list[int] | None,
        Field(description='Array of work role exemptions for the tax code.'),
    ]
    addAllWorkRoles: bool | None
    removeAllWorkRoles: bool | None
    expenseTypeIds: Annotated[
        list[int] | None,
        Field(description='Array of expense type exemptions for the tax code.'),
    ]
    addAllExpenseTypes: bool | None
    removeAllExpenseTypes: bool | None
    productTypeIds: Annotated[
        list[int] | None,
        Field(description='Array of product type exemptions for the tax code.'),
    ]
    addAllProductTypes: bool | None
    removeAllProductTypes: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TaxCodeInfo(SparkModel):
    id: int | None
    identifier: str | None
    description: str | None
    effectiveDate: str | None
    cancelDate: str | None
    defaultFlag: bool | None
    levelOneRate: float | None
    levelTwoRate: float | None
    levelThreeRate: float | None
    levelFourRate: float | None
    levelFiveRate: float | None
    levelSixRate: float | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TaxCodeLevel(SparkModel):
    id: int | None
    taxLevel: int | None
    taxRate: float
    rateType: TaxCodeLevelOneRateType
    taxableMax: float | None
    caption: Annotated[str | None, Field(description=' Max length: 25;')]
    taxCodeXref: Annotated[str | None, Field(description=' Max length: 50;')]
    agencyXref: Annotated[str | None, Field(description=' Max length: 100;')]
    taxServicesFlag: bool | None
    taxExpensesFlag: bool | None
    taxProductsFlag: bool | None
    singleUnitFlag: bool | None
    singleUnitMinimum: float | None
    singleUnitMaximum: float | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TaxCodeLevelOneRateType(str, Enum):
    Amount = 'Amount'
    Percent = 'Percent'


class TaxCodeLevelReference(ActivityReference):
    pass


class TaxCodeReference(ActivityReference):
    pass


class TaxCodeXRef(SparkModel):
    id: int | None
    description: Annotated[str, Field(description=' Max length: 50;')]
    defaultFlag: bool | None
    levelOne: TaxCodeXRefLevelOne | None
    levelTwo: TaxCodeXRefLevelOne | None
    levelThree: TaxCodeXRefLevelOne | None
    levelFour: TaxCodeXRefLevelOne | None
    levelFive: TaxCodeXRefLevelOne | None
    levelSix: TaxCodeXRefLevelOne | None
    taxCode: TaxCodeReference | None
    taxableLevels: list[int] | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TaxCodeXRefLevelOne(str, Enum):
    NonTaxable = 'NonTaxable'
    Taxable = 'Taxable'


class TaxIntegration(SparkModel):
    taxIntegrationType: TaxIntegrationTaxIntegrationType | None
    id: int | None
    accountNumber: Annotated[str | None, Field(description=' Max length: 50;')]
    licenseKey: Annotated[str | None, Field(description=' Max length: 50;')]
    serviceUrl: Annotated[str | None, Field(description=' Max length: 250;')]
    companyCode: Annotated[str | None, Field(description=' Max length: 50;')]
    timeTaxCode: Annotated[str | None, Field(description=' Max length: 50;')]
    expenseTaxCode: Annotated[str | None, Field(description=' Max length: 50;')]
    productTaxCode: Annotated[str | None, Field(description=' Max length: 50;')]
    invoiceAmountTaxCode: Annotated[str | None, Field(description=' Max length: 50;')]
    enabledFlag: bool | None
    commitTransactionsFlag: bool | None
    salesInvoiceFlag: bool | None
    freightTaxCode: Annotated[str | None, Field(description=' Max length: 50;')]
    accountingIntegrationFlag: bool | None
    taxLineFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TaxIntegrationInfo(SparkModel):
    id: int | None
    enabledFlag: bool | None
    taxIntegrationType: TaxIntegrationTaxIntegrationType | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TaxIntegrationTaxIntegrationType(str, Enum):
    Avalara = 'Avalara'


class TaxableExpenseTypeLevel(SparkModel):
    id: int | None
    taxCodeLevel: TaxCodeLevelReference
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TaxableProductTypeLevel(TaxableExpenseTypeLevel):
    pass


class TaxableWorkRoleLevel(TaxableExpenseTypeLevel):
    pass


class TaxableXRefLevel(TaxableExpenseTypeLevel):
    pass


class Team(SparkModel):
    id: int | None
    type: TeamType
    member: MemberReference | None
    salesTeam: SalesTeamReference | None
    commissionPercent: int | None
    referralFlag: bool | None
    opportunityId: int | None
    responsibleFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TeamMember(SparkModel):
    id: int | None
    board: BoardReference | None
    team: ServiceTeamReference
    member: MemberReference
    teamLeaderFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TeamRole(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 20;')]
    accountManagerFlag: bool | None
    techFlag: bool | None
    salesFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TeamRoleInfo(ActivityReference):
    pass


class TeamRoleReference(ActivityReference):
    pass


class TeamType(str, Enum):
    Individual = 'Individual'
    Team = 'Team'


class TemplateGeneratedCountsModel(SparkModel):
    serviceCount: int | None
    scheduleCount: int | None


class TemplatePhase(SparkModel):
    parentPhase: ProjectTemplatePhaseReference | None
    id: int | None
    templateId: int | None
    description: str | None
    notes: str | None
    markAsMilestoneFlag: bool | None
    billPhaseSeparately: bool | None
    wbsCode: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class Ticket(SparkModel):
    id: int | None
    summary: Annotated[str, Field(description=' Max length: 100;')]
    recordType: ConvertItemRecordType | None
    board: BoardReference | None
    status: ServiceStatusReference | None
    workRole: WorkRoleReference | None
    workType: WorkTypeReference | None
    company: CompanyReference
    site: SiteReference | None
    siteName: Annotated[str | None, Field(description=' Max length: 50;')]
    addressLine1: Annotated[str | None, Field(description=' Max length: 50;')]
    addressLine2: Annotated[str | None, Field(description=' Max length: 50;')]
    city: Annotated[str | None, Field(description=' Max length: 50;')]
    stateIdentifier: Annotated[str | None, Field(description=' Max length: 50;')]
    zip: Annotated[str | None, Field(description=' Max length: 12;')]
    country: CountryReference | None
    contact: ContactReference | None
    contactName: Annotated[str | None, Field(description=' Max length: 62;')]
    contactPhoneNumber: Annotated[str | None, Field(description=' Max length: 20;')]
    contactPhoneExtension: Annotated[str | None, Field(description=' Max length: 15;')]
    contactEmailAddress: Annotated[str | None, Field(description=' Max length: 250;')]
    type: ServiceTypeReference | None
    subType: ServiceSubTypeReference | None
    item: ServiceItemReference | None
    team: ServiceTeamReference | None
    owner: MemberReference | None
    priority: PriorityReference | None
    serviceLocation: ServiceLocationReference | None
    source: ServiceSourceReference | None
    requiredDate: datetime | None
    budgetHours: float | None
    opportunity: OpportunityReference | None
    agreement: AgreementReference | None
    agreementType: str | None
    severity: Annotated[
        ServiceTemplateSeverity | None, Field(description=' Required On Updates;')
    ]
    impact: Annotated[
        ServiceTemplateSeverity | None, Field(description=' Required On Updates;')
    ]
    externalXRef: Annotated[str | None, Field(description=' Max length: 100;')]
    poNumber: Annotated[str | None, Field(description=' Max length: 50;')]
    knowledgeBaseCategoryId: int | None
    knowledgeBaseSubCategoryId: int | None
    allowAllClientsPortalView: bool | None
    customerUpdatedFlag: bool | None
    automaticEmailContactFlag: bool | None
    automaticEmailResourceFlag: bool | None
    automaticEmailCcFlag: bool | None
    automaticEmailCc: Annotated[str | None, Field(description=' Max length: 1000;')]
    initialDescription: Annotated[
        str | None,
        Field(
            description='Only available for POST, will not be returned in the response.'
        ),
    ]
    initialInternalAnalysis: Annotated[
        str | None,
        Field(
            description='Only available for POST, will not be returned in the response.'
        ),
    ]
    initialResolution: Annotated[
        str | None,
        Field(
            description='Only available for POST, will not be returned in the response.'
        ),
    ]
    initialDescriptionFrom: str | None
    contactEmailLookup: str | None
    processNotifications: Annotated[
        bool | None,
        Field(
            description='Can be set to false to skip notification processing when adding or updating a ticket (Defaults to True).'
        ),
    ]
    skipCallback: bool | None
    closedDate: str | None
    closedBy: str | None
    closedFlag: bool | None
    actualHours: float | None
    approved: bool | None
    estimatedExpenseCost: float | None
    estimatedExpenseRevenue: float | None
    estimatedProductCost: float | None
    estimatedProductRevenue: float | None
    estimatedTimeCost: float | None
    estimatedTimeRevenue: float | None
    billingMethod: ProjectBillingMethod | None
    billingAmount: float | None
    hourlyRate: float | None
    subBillingMethod: ProjectBillingMethod | None
    subBillingAmount: float | None
    subDateAccepted: str | None
    dateResolved: str | None
    dateResplan: str | None
    dateResponded: str | None
    resolveMinutes: int | None
    resPlanMinutes: int | None
    respondMinutes: int | None
    isInSla: bool | None
    knowledgeBaseLinkId: int | None
    resources: str | None
    parentTicketId: int | None
    hasChildTicket: bool | None
    hasMergedChildTicketFlag: bool | None
    knowledgeBaseLinkType: ProjectTicketKnowledgeBaseLinkType | None
    billTime: ActivityStopwatchBillableOption | None
    billExpenses: ActivityStopwatchBillableOption | None
    billProducts: ActivityStopwatchBillableOption | None
    predecessorType: ProjectTemplateTicketPredecessorType | None
    predecessorId: int | None
    predecessorClosedFlag: bool | None
    lagDays: int | None
    lagNonworkingDaysFlag: bool | None
    estimatedStartDate: datetime | None
    duration: int | None
    location: SystemLocationReference | None
    department: SystemDepartmentReference | None
    mobileGuid: UUID | None
    sla: SLAReference | None
    slaStatus: str | None
    requestForChangeFlag: bool | None
    currency: CurrencyReference | None
    mergedParentTicket: TicketReference | None
    integratorTags: list[str] | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    escalationStartDateUTC: str | None
    escalationLevel: int | None
    minutesBeforeWaiting: int | None
    respondedSkippedMinutes: int | None
    resplanSkippedMinutes: int | None
    respondedHours: float | None
    respondedBy: str | None
    resplanHours: float | None
    resplanBy: str | None
    resolutionHours: float | None
    resolvedBy: str | None
    minutesWaiting: int | None
    customFields: list[CustomFieldValue] | None


class TicketBundle(SparkModel):
    childTicketIds: list[int] | None


class TicketChangeLog(SparkModel):
    id: Annotated[int | None, Field(description='Ticket Change Log ID')]
    partnerId: Annotated[str | None, Field(description='Partner ID.')]
    productInstanceId: Annotated[str | None, Field(description='Product Instance ID.')]
    action: Annotated[str | None, Field(description='Action.')]
    boardId: Annotated[int | None, Field(description='Board ID.')]
    boardName: Annotated[str | None, Field(description='Board Name.')]
    companyIdentifier: Annotated[int | None, Field(description='Company Identifier.')]
    companyName: Annotated[str | None, Field(description='Company Name.')]
    contactId: Annotated[int | None, Field(description='Contact ID.')]
    contactName: Annotated[str | None, Field(description='Contact Name.')]
    impact: Annotated[str | None, Field(description='Impact.')]
    ownerIdentifier: Annotated[int | None, Field(description='Owner Identifier.')]
    priorityId: Annotated[int | None, Field(description='Priority ID.')]
    priorityLevel: Annotated[str | None, Field(description='Priority Level.')]
    priorityName: Annotated[str | None, Field(description='Priority Name.')]
    prioritySort: Annotated[int | None, Field(description='Priority Sort.')]
    resourceList: Annotated[str | None, Field(description='Resource List.')]
    severity: Annotated[str | None, Field(description='Severity.')]
    slaName: Annotated[str | None, Field(description='SLA Name.')]
    slaStatus: Annotated[str | None, Field(description='SLA Status.')]
    status: Annotated[str | None, Field(description='Status.')]
    summary: Annotated[str | None, Field(description='Summary.')]
    teamName: Annotated[str | None, Field(description='Team Name.')]
    ticketNumber: Annotated[int | None, Field(description='Ticket Number.')]
    recordType: Annotated[str | None, Field(description='Record Type.')]
    ticketOwner: Annotated[str | None, Field(description='Ticket Owner.')]
    closedFlag: Annotated[bool | None, Field(description='Closed Flag.')]
    customerUpdatedFlag: Annotated[
        bool | None, Field(description='Customer Updated Flag.')
    ]
    processingStatus: Annotated[str | None, Field(description='Processing Status.')]
    parentTicketId: Annotated[int | None, Field(description='Parent Ticket ID.')]
    mergedParentTicketId: Annotated[
        int | None, Field(description='Merged Parent Ticket ID.')
    ]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TicketInfo(SparkModel):
    id: int | None
    summary: str | None
    company: CompanyReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TicketMerge(SparkModel):
    mergeTicketIds: list[int]
    status: ServiceStatusReference


class TicketNote(SparkModel):
    id: int | None
    ticketId: int | None
    text: str | None
    detailDescriptionFlag: bool | None
    internalAnalysisFlag: bool | None
    resolutionFlag: bool | None
    issueFlag: bool | None
    member: MemberReference | None
    contact: ContactReference | None
    customerUpdatedFlag: bool | None
    processNotifications: bool | None
    internalFlag: bool | None
    externalFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TicketReference(SparkModel):
    id: int | None
    summary: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TicketStopwatch(SparkModel):
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    agreement: AgreementReference | None
    billableOption: ActivityStopwatchBillableOption | None
    businessUnitId: int | None
    dateEntered: datetime | None
    endTime: datetime | None
    id: int | None
    internalNotes: str | None
    locationId: int | None
    member: MemberReference
    mobileGuid: UUID | None
    notes: Annotated[str | None, Field(description=' Max length: 4000;')]
    serviceStatus: ServiceStatusReference | None
    startTime: datetime | None
    status: ActivityStopwatchStatus
    ticket: TicketReference
    ticketMobileGuid: UUID | None
    totalPauseTime: int | None
    workRole: WorkRoleReference | None
    workType: WorkTypeReference | None
    showNotesInDiscussionFlag: bool | None
    showNotesInInternalFlag: bool | None
    showNotesInResolutionFlag: bool | None
    emailNotesToContactFlag: bool | None
    emailNotesToResourcesFlag: bool | None


class TicketSync(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 80;')]
    vendorType: TicketSyncVendorType
    integratorLogin: IntegratorLoginReference
    company: CompanyReference
    url: str
    userName: str | None
    password: str | None
    psg: str | None
    problemDescriptionFlag: bool | None
    internalAnalysisFlag: bool | None
    resolutionFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TicketSyncVendorType(str, Enum):
    Zenith = 'Zenith'


class TicketTask(SparkModel):
    id: int | None
    ticketId: int | None
    notes: str | None
    closedFlag: bool | None
    priority: int | None
    schedule: ScheduleEntryReference | None
    code: ServiceCodeReference | None
    member: MemberReference | None
    resolution: str | None
    summary: str | None
    childScheduleAction: ServiceTaskChildScheduleAction | None
    childTicketId: int | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TimeAccrual(SparkModel):
    id: int | None
    location: SystemLocationReference | None
    vacationFlag: Annotated[
        bool | None,
        Field(
            description='if vacationFlag is set to false, system will clear out or ingore the values of vacationAvailableType, vacationCarryoverAllowedFlag, vacationCarryoverLimit'
        ),
    ]
    vacationAvailableType: TimeAccrualVacationAvailableType | None
    vacationCarryoverAllowedFlag: bool | None
    vacationCarryoverLimit: float | None
    sickFlag: Annotated[
        bool | None,
        Field(
            description='if sickFlag is set to false, system will clear out or ignore the values of sickAvailableType, sickCarryoverAllowedFlag, sickCarryoverLimit'
        ),
    ]
    sickAvailableType: TimeAccrualVacationAvailableType | None
    sickCarryoverAllowedFlag: bool | None
    sickCarryoverLimit: float | None
    ptoFlag: Annotated[
        bool | None,
        Field(
            description='if ptoFlag is set to false, system will clear out or ignore the values of ptoAvailableType, ptoCarryoverAllowedFlag, ptoCarryoverLimit'
        ),
    ]
    ptoAvailableType: TimeAccrualVacationAvailableType | None
    ptoCarryoverAllowedFlag: bool | None
    ptoCarryoverLimit: float | None
    holidayFlag: Annotated[
        bool | None,
        Field(
            description='if holidayFlag is set to false, system will clear out or ignore the values of holidayAvailableType, holidayCarryoverAllowedFlag, holidayCarryoverLimit'
        ),
    ]
    holidayAvailableType: TimeAccrualVacationAvailableType | None
    holidayCarryoverAllowedFlag: bool | None
    holidayCarryoverLimit: float | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TimeAccrualDetail(SparkModel):
    id: int | None
    accrualType: Annotated[
        MemberAccrualAccrualType,
        Field(description='Available types are: Holiday, PTO, Sick and Vacation.'),
    ]
    startYear: int
    endYear: int
    hours: float
    timeAccrual: TimeAccrualReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TimeAccrualReference(ActivityReference):
    pass


class TimeAccrualVacationAvailableType(str, Enum):
    AnniversaryYear = 'AnniversaryYear'
    CalendarYear = 'CalendarYear'


class TimeEntry(SparkModel):
    id: int | None
    company: CompanyReference | None
    companyType: str | None
    chargeToId: Annotated[
        int | None,
        Field(
            description='If chargeToId is not specified, we asume you enter time against the company specified'
        ),
    ]
    chargeToType: Annotated[
        ExpenseEntryChargeToType | None,
        Field(
            description='If chargeToId is not specified, we asume you enter time against the company specified'
        ),
    ]
    member: MemberReference | None
    locationId: int | None
    businessUnitId: int | None
    businessGroupDesc: str | None
    location: OwnerLevelReference | None
    department: BillingUnitReference | None
    workType: WorkTypeReference | None
    workRole: WorkRoleReference | None
    agreement: AgreementReference | None
    agreementType: str | None
    activity: ActivityReference | None
    opportunityRecid: int | None
    projectActivity: str | None
    territory: str | None
    timeStart: datetime
    timeEnd: datetime | None
    hoursDeduct: float | None
    actualHours: float | None
    billableOption: Annotated[
        ActivityStopwatchBillableOption | None,
        Field(description=' Required On Updates;'),
    ]
    notes: str | None
    internalNotes: str | None
    addToDetailDescriptionFlag: bool | None
    addToInternalAnalysisFlag: bool | None
    addToResolutionFlag: bool | None
    emailResourceFlag: Annotated[
        bool | None,
        Field(
            description='This is an action flag. To update this value use the /service/tickets endpoint automaticEmailResourceFlag field'
        ),
    ]
    emailContactFlag: Annotated[
        bool | None,
        Field(
            description='This is an action flag. To update this value use the /service/tickets endpoint automaticEmailContactFlag field'
        ),
    ]
    emailCcFlag: Annotated[
        bool | None,
        Field(
            description='This is an action flag. To update this value use the /service/tickets endpoint automaticEmailCcFlag field'
        ),
    ]
    emailCc: Annotated[
        str | None,
        Field(
            description='To update this value use the /service/tickets endpoint automaticEmailCc field'
        ),
    ]
    hoursBilled: float | None
    invoiceHours: float | None
    hourlyCost: str | None
    enteredBy: str | None
    dateEntered: datetime | None
    invoice: InvoiceReference | None
    mobileGuid: UUID | None
    hourlyRate: Annotated[
        float | None,
        Field(description='This field may only be Updated, it is defaulted on Create'),
    ]
    overageRate: float | None
    agreementHours: float | None
    agreementAmount: float | None
    agreementAdjustment: float | None
    adjustment: float | None
    invoiceReady: int | None
    timeSheet: TimeSheetReference | None
    status: ExpenseEntryStatus | None
    ticket: TicketReference | None
    project: ProjectReference | None
    phase: ProjectPhaseReference | None
    ticketBoard: str | None
    ticketStatus: str | None
    ticketType: str | None
    ticketSubType: str | None
    invoiceFlag: bool | None
    extendedInvoiceAmount: float | None
    locationName: str | None
    taxCode: TaxCodeReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    customFields: list[CustomFieldValue] | None


class TimeEntryAudit(SparkModel):
    id: int | None
    member: MemberReference | None
    source: ExpenseEntryAuditSource | None
    type: ExpenseEntryAuditType | None
    message: str | None
    oldValue: str | None
    newValue: str | None
    value: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TimeEntryChangeLog(SparkModel):
    id: Annotated[int | None, Field(description='Time Entry Change Log ID.')]
    partnerId: Annotated[str | None, Field(description='Partner ID.')]
    productInstanceId: Annotated[str | None, Field(description='Product Instance ID.')]
    action: Annotated[str | None, Field(description='Action.')]
    activitySubject: Annotated[str | None, Field(description='Activity Subject.')]
    actualUtilizedHrs: Annotated[
        float | None, Field(description='Actual Utilized Hours.')
    ]
    agreementAdjustmentFirm: Annotated[
        float | None, Field(description='Agreement Adjustment Firm.')
    ]
    agreementAdjustmentTotal: Annotated[
        float | None, Field(description='Agreement Adjustment Total.')
    ]
    agreementAmountCovered: Annotated[
        float | None, Field(description='Agreement Amount Covered.')
    ]
    agreementHoursCovered: Annotated[
        float | None, Field(description='Agreement Hours Covered.')
    ]
    billableAmount: Annotated[float | None, Field(description='Billable Amount.')]
    billableFlag: Annotated[bool | None, Field(description='Billable Flag.')]
    billableHours: Annotated[float | None, Field(description='Billable Hours.')]
    billableUtilizedHours: Annotated[
        float | None, Field(description='Billable Utilized Hours.')
    ]
    memberDailyCapacity: Annotated[
        float | None, Field(description='Member Daily Capacity.')
    ]
    billableOption: Annotated[
        ActivityStopwatchBillableOption | None, Field(description='Billable Option.')
    ]
    businessGroup: Annotated[str | None, Field(description='Business Group.')]
    locationName: Annotated[str | None, Field(description='Location Name.')]
    chargeCode: Annotated[str | None, Field(description='Charge Code.')]
    chargeTo: Annotated[str | None, Field(description='Charge To.')]
    chargeToType: Annotated[
        ExpenseEntryChargeToType | None, Field(description='Charge To Type.')
    ]
    chargeToRecId: Annotated[int | None, Field(description='Charge To Record ID.')]
    companyAndAgreement: Annotated[
        str | None, Field(description='Company and Agreement.')
    ]
    companyName: Annotated[str | None, Field(description='Company Name.')]
    timeStart: Annotated[str | None, Field(description='Time Start.')]
    timeStartUtc: Annotated[str | None, Field(description='Time Start UTC.')]
    timeEnd: Annotated[str | None, Field(description='Time End.')]
    timeEndUtc: Annotated[str | None, Field(description='Time End UTC.')]
    dateStart: Annotated[str | None, Field(description='Date Start.')]
    dateInvoice: Annotated[str | None, Field(description='Date Invoice.')]
    firstName: Annotated[str | None, Field(description='First Name.')]
    hourlyCost: Annotated[str | None, Field(description='Hourly Cost.')]
    hourlyCostDecimal: Annotated[
        float | None, Field(description='Hourly Cost in Decimal.')
    ]
    hourlyRate: Annotated[float | None, Field(description='Hourly Rate.')]
    hoursActual: Annotated[float | None, Field(description='Actual Hours.')]
    internalNote: Annotated[str | None, Field(description='Internal Note.')]
    invoiceAdjustmentFirm: Annotated[
        float | None, Field(description='Invoice Adjustment Firm.')
    ]
    invoiceAdjustmentTotal: Annotated[
        float | None, Field(description='Invoice Adjustment Total.')
    ]
    invoiceFlag: Annotated[bool | None, Field(description='Invoice Flag.')]
    invoiceNumber: Annotated[str | None, Field(description='Invoice Number.')]
    invoiceReady: Annotated[bool | None, Field(description='Invoice Ready status.')]
    lastName: Annotated[str | None, Field(description='Last Name.')]
    memberId: Annotated[str | None, Field(description='Member ID.')]
    nonBillableAmt: Annotated[float | None, Field(description='Non-Billable Amount.')]
    nonBillableHrs: Annotated[float | None, Field(description='Non-Billable Hours.')]
    notes: Annotated[str | None, Field(description='Notes.')]
    opportunityRecId: Annotated[int | None, Field(description='Opportunity Record ID.')]
    optionId: Annotated[str | None, Field(description='Option ID.')]
    projectActivity: Annotated[str | None, Field(description='Project Activity.')]
    projectName: Annotated[str | None, Field(description='Project Name.')]
    projectPhase: Annotated[str | None, Field(description='Project Phase.')]
    serviceRequestStatus: Annotated[
        str | None, Field(description='Service Request Status.')
    ]
    serviceRequestSummary: Annotated[
        str | None, Field(description='Service Request Summary.')
    ]
    territory: Annotated[str | None, Field(description='Territory.')]
    timeRecId: Annotated[int | None, Field(description='Time Record ID.')]
    timeStatus: Annotated[str | None, Field(description='Time Status.')]
    utilizationFlag: Annotated[bool | None, Field(description='Utilization Flag.')]
    companyType: Annotated[str | None, Field(description='Company Type.')]
    ticketCurrentBoard: Annotated[
        str | None, Field(description='Current Board of the Ticket.')
    ]
    ticketType: Annotated[str | None, Field(description='Type of the Ticket.')]
    ticketSubtype: Annotated[str | None, Field(description='Subtype of the Ticket.')]
    agreementType: Annotated[str | None, Field(description='Type of the Agreement.')]
    billingStatus: Annotated[str | None, Field(description='Billing Status.')]
    processingStatus: Annotated[str | None, Field(description='Processing Status.')]
    invoicedhours: Annotated[float | None, Field(description='Invoiced Hours.')]
    company: CompanyReference | None
    member: MemberReference | None
    workType: WorkTypeReference | None
    workRole: WorkRoleReference | None
    agreement: AgreementReference | None
    invoice: InvoiceReference | None
    ticket: TicketReference | None
    project: ProjectReference | None
    phase: ProjectPhaseReference | None
    activity: ActivityReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TimeEntryReference(CalendarSetupReference):
    pass


class TimeExpense(SparkModel):
    id: int | None
    tier1ApprovalFlag: bool | None
    tier2ApprovalFlag: bool | None
    disableTimeEntryFlag: bool | None
    requireTimeNoteFlag: bool | None
    requireExpenseNoteFlag: bool | None
    roundingFactor: float | None
    invoiceStart: int | None
    defaultSpecialInvoiceType: CommissionBillingMethod | None
    internalCompany: CompanyReference
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TimePeriod(SparkModel):
    id: int | None
    timePeriodSetup: TimePeriodSetupReference | None
    period: int | None
    startDate: str | None
    endDate: str | None
    deadlineDate: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TimePeriodSetup(SparkModel):
    id: int | None
    periodApplyTo: TimePeriodSetupPeriodApplyTo
    year: int
    numberFuturePeriods: int
    type: TimePeriodSetupType
    description: Annotated[str | None, Field(description=' Max length: 100;')]
    firstPeriodEndDate: date_aliased
    monthlyPeriodEnds: Annotated[
        int | None, Field(description='Only needed when type is monthly')
    ]
    semiMonthlyFirstPeriod: Annotated[
        int | None, Field(description='Only needed when type is semi-monthly')
    ]
    semiMonthlySecondPeriod: Annotated[
        int | None, Field(description='Only needed when type is semi-monthly')
    ]
    semiMonthlyLastDayFlag: bool | None
    lastDayFlag: Annotated[
        bool | None, Field(description='Only needed when type is monthly')
    ]
    daysPastEndDate: int
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TimePeriodSetupDefaults(AgreementTabsCount):
    pass


class TimePeriodSetupPeriodApplyTo(str, Enum):
    Both = 'Both'
    Expense = 'Expense'
    Time = 'Time'


class TimePeriodSetupReference(CalendarSetupReference):
    pass


class TimePeriodSetupType(str, Enum):
    Weekly = 'Weekly'
    BiWeekly = 'BiWeekly'
    SemiMonthly = 'SemiMonthly'
    Monthly = 'Monthly'


class TimeRevenueReference(AgreementRevenueReference):
    pass


class TimeSheet(SparkModel):
    id: int | None
    member: MemberReference | None
    year: int | None
    period: int | None
    dateStart: str | None
    dateEnd: str | None
    status: ExpenseEntryStatus | None
    hours: float | None
    deadline: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TimeSheetAudit(TimeEntryAudit):
    pass


class TimeSheetReference(ActivityReference):
    pass


class TimeSheetTierUpdate(ExpenseReportTierUpdate):
    pass


class TimeZoneReference(ActivityReference):
    pass


class TimeZoneSetup(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    timeZone: TimeZoneReference
    offset: Annotated[
        float | None, Field(description='The hours offset from UTC (+/-)')
    ]
    defaultFlag: Annotated[
        bool | None, Field(description='Identifies the default system time zone setup')
    ]
    daylightSavingsFlag: Annotated[
        bool | None,
        Field(
            description='Determined based on system library value for specified timeZone.\n            Not able to be used in query params at this time'
        ),
    ]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TimeZoneSetupInfo(SparkModel):
    id: int | None
    name: str | None
    offset: float | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TimeZoneSetupReference(ActivityReference):
    pass


class TodayPageCategory(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 30;')]
    sortOrder: int
    location: SystemLocationReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class Token(SparkModel):
    publicKey: str | None
    privateKey: str | None
    expiration: str | None


class Track(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 100;')]
    inactiveFlag: bool | None
    notifyActionIds: list[int] | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TrackAction(SparkModel):
    id: int | None
    notifyType: TrackActionNotifyType
    serviceTemplate: ServiceTemplateReference | None
    specificMemberTo: MemberReference | None
    emailRecipient: Annotated[str | None, Field(description=' Max length: 250;')]
    specificMemberFrom: MemberReference | None
    emailFrom: Annotated[str | None, Field(description=' Max length: 250;')]
    subject: Annotated[str | None, Field(description=' Max length: 100;')]
    notes: str | None
    activityType: ActivityTypeReference | None
    activityStatus: ActivityStatusReference | None
    companyStatus: CompanyStatusReference | None
    track: TrackReference | None
    attachedTrack: TrackReference | None
    group: GroupReference | None
    ccContact: ContactReference | None
    bccContact: ContactReference | None
    daysToExecute: int | None
    notifyWho: NotificationRecipientReference | None
    notifyFrom: NotificationRecipientReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class TrackActionNotifyType(str, Enum):
    CreateActivity = 'CreateActivity'
    SendEmail = 'SendEmail'
    AddToGroup = 'AddToGroup'
    AttachTrack = 'AttachTrack'
    ChangeCompanyStatus = 'ChangeCompanyStatus'
    CreateServiceTicket = 'CreateServiceTicket'


class TrackReference(ActivityReference):
    pass


class UnitOfMeasure(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    inactiveFlag: bool | None
    defaultFlag: bool | None
    uomScheduleXref: Annotated[str | None, Field(description=' Max length: 31;')]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class UnitOfMeasureReference(ActivityReference):
    pass


class UnpostedExpense(SparkModel):
    id: int | None
    locationId: int | None
    departmentId: int | None
    company: CompanyReference | None
    accountNumber: str | None
    creditAccount: str | None
    expenseDetailId: int | None
    expenseType: ExpenseTypeReference | None
    classification: UnpostedExpenseClassification | None
    glType: GLAccountGlType | None
    member: MemberReference | None
    dateExpense: str | None
    chargeCode: ChargeCodeReference | None
    chargeDescription: str | None
    inPolicy: bool | None
    paymentMethod: PaymentMethodReference | None
    currency: CurrencyReference | None
    total: float | None
    billableAmount: float | None
    nonBillableAmount: float | None
    agreement: AgreementReference | None
    agreementAmountCovered: float | None
    ticket: TicketReference | None
    project: ProjectReference | None
    projectPhase: ProjectPhaseReference | None
    taxCode: TaxCodeReference | None
    avalaraTaxFlag: Annotated[
        bool | None, Field(description='Used to determine if Avalara tax is enabled.')
    ]
    itemTaxableFlag: bool | None
    salesTaxAmount: float | None
    stateTaxFlag: Annotated[
        bool | None,
        Field(description='Set to true if transaction is taxable at the state level.'),
    ]
    stateTaxXref: str | None
    stateTaxAmount: float | None
    countyTaxFlag: Annotated[
        bool | None,
        Field(description='Set to true if transaction is taxable at the county level.'),
    ]
    countyTaxXref: str | None
    countyTaxAmount: float | None
    cityTaxFlag: Annotated[
        bool | None,
        Field(description='Set to true if transaction is taxable at the city level.'),
    ]
    cityTaxXref: str | None
    cityTaxAmount: float | None
    countryTaxFlag: Annotated[
        bool | None,
        Field(
            description='Set to true if transaction is taxable at the country level.'
        ),
    ]
    countryTaxXref: str | None
    countryTaxAmount: float | None
    compositeTaxFlag: Annotated[
        bool | None,
        Field(
            description='Set to true if transaction is taxable at the composite level.'
        ),
    ]
    compositeTaxXref: str | None
    compositeTaxAmount: float | None
    levelSixTaxFlag: Annotated[
        bool | None,
        Field(description='Set to true if transaction is taxable at level six.'),
    ]
    levelSixTaxXref: str | None
    levelSixTaxAmount: float | None
    dateClosed: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class UnpostedExpenseClassification(str, Enum):
    NonReimbursable = 'NonReimbursable'
    Reimbursable = 'Reimbursable'
    Personal = 'Personal'


class UnpostedExpenseTaxableLevel(SparkModel):
    id: int | None
    taxLevel: int | None
    taxCodeXref: str | None
    taxAmount: float | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class UnpostedInvoice(SparkModel):
    id: int | None
    billingLogId: int | None
    locationId: int | None
    location: OwnerLevelReference | None
    departmentId: int | None
    department: SystemDepartmentReference | None
    company: CompanyReference | None
    accountNumber: str | None
    billToCompany: CompanyReference | None
    billToSite: SiteReference | None
    shipToCompany: CompanyReference | None
    shipToSite: SiteReference | None
    invoiceNumber: str | None
    invoiceDate: str | None
    invoiceType: CommissionBillingMethod | None
    description: str | None
    billingTerms: BillingTermsReference | None
    dueDays: str | None
    dueDate: str | None
    currency: CurrencyReference | None
    subTotal: float | None
    total: float | None
    hasTime: bool | None
    hasExpenses: bool | None
    hasProducts: bool | None
    invoiceTaxableFlag: bool | None
    taxCode: TaxCodeReference | None
    avalaraTaxFlag: Annotated[
        bool | None, Field(description='Used to determine if Avalara tax is enabled.')
    ]
    itemTaxableFlag: bool | None
    salesTaxAmount: float | None
    stateTaxFlag: Annotated[
        bool | None,
        Field(description='Set to true if transaction is taxable at the state level.'),
    ]
    stateTaxXref: str | None
    stateTaxAmount: float | None
    countyTaxFlag: Annotated[
        bool | None,
        Field(description='Set to true if transaction is taxable at the county level.'),
    ]
    countyTaxXref: str | None
    countyTaxAmount: float | None
    cityTaxFlag: Annotated[
        bool | None,
        Field(description='Set to true if transaction is taxable at the city level.'),
    ]
    cityTaxXref: str | None
    cityTaxAmount: float | None
    countryTaxFlag: Annotated[
        bool | None,
        Field(
            description='Set to true if transaction is taxable at the country level.'
        ),
    ]
    countryTaxXref: str | None
    countryTaxAmount: float | None
    compositeTaxFlag: Annotated[
        bool | None,
        Field(
            description='Set to true if transaction is taxable at the composite level.'
        ),
    ]
    compositeTaxXref: str | None
    compositeTaxAmount: float | None
    levelSixTaxFlag: Annotated[
        bool | None,
        Field(description='Set to true if transaction is taxable at level six.'),
    ]
    levelSixTaxXref: str | None
    levelSixTaxAmount: float | None
    createdBy: str | None
    dateClosed: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class UnpostedInvoiceTaxableLevel(UnpostedExpenseTaxableLevel):
    pass


class UnpostedPayments(SparkModel):
    id: int | None
    type: str | None
    source: InvoicePaymentSource | None
    invoice: InvoiceReference | None
    amount: float | None
    paymentDate: str | None
    appliedBy: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]
    wisePayPayment: WisePayPayment | None
    paymentSyncStatus: str | None
    paymentSyncDate: str | None
    paymentAccount: str | None
    aRPaymentAccount: str | None


class UnpostedProcurement(SparkModel):
    id: int | None
    description: str | None
    unpostedProductId: str | None
    locationId: int | None
    departmentId: int | None
    procurementType: UnpostedProcurementProcurementType | None
    purchaseOrder: PurchaseOrderReference | None
    purchaseDate: str | None
    trackingNumber: str | None
    billingTerms: BillingTermsReference | None
    currency: CurrencyReference | None
    total: float | None
    taxCode: TaxCodeReference | None
    avalaraTaxFlag: Annotated[
        bool | None, Field(description='Used to determine if Avalara tax is enabled.')
    ]
    itemTaxableFlag: bool | None
    purchaseOrderTaxableFlag: bool | None
    stateTaxFlag: Annotated[
        bool | None,
        Field(description='Set to true if transaction is taxable at the state level.'),
    ]
    stateTaxXref: str | None
    stateTaxAmount: float | None
    countyTaxFlag: Annotated[
        bool | None,
        Field(description='Set to true if transaction is taxable at the county level.'),
    ]
    countyTaxXref: str | None
    countyTaxAmount: float | None
    cityTaxFlag: Annotated[
        bool | None,
        Field(description='Set to true if transaction is taxable at the city level.'),
    ]
    cityTaxXref: str | None
    cityTaxAmount: float | None
    countryTaxFlag: Annotated[
        bool | None,
        Field(
            description='Set to true if transaction is taxable at the country level.'
        ),
    ]
    countryTaxXref: str | None
    countryTaxAmount: float | None
    compositeTaxFlag: Annotated[
        bool | None,
        Field(
            description='Set to true if transaction is taxable at the composite level.'
        ),
    ]
    compositeTaxXref: str | None
    compositeTaxAmount: float | None
    levelSixTaxFlag: Annotated[
        bool | None,
        Field(description='Set to true if transaction is taxable at level six.'),
    ]
    levelSixTaxXref: str | None
    levelSixTaxAmount: float | None
    taxTotal: float | None
    customer: CompanyReference | None
    vendor: CompanyReference | None
    vendorAccountNumber: str | None
    vendorInvoiceNumber: str | None
    vendorInvoiceDate: str | None
    taxFreightFlag: bool | None
    freightTaxTotal: float | None
    freightCost: float | None
    dateClosed: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class UnpostedProcurementProcurementType(str, Enum):
    Purchase = 'Purchase'
    Adjustment = 'Adjustment'
    Transfer = 'Transfer'


class UnpostedProcurementTaxableLevel(UnpostedExpenseTaxableLevel):
    pass


class Usage(SparkModel):
    type: str | None
    count: int | None
    id: int | None
    description: str | None
    hyperlink: str | None
    typeKey: str | None


class UserDefinedField(SparkModel):
    id: Annotated[int | None, Field(description='ID of the custom user defined field')]
    podId: Annotated[
        int, Field(description='Id of the Pod where the custom field will be placed')
    ]
    caption: Annotated[str, Field(description='Field caption Max length: 25;')]
    sequenceNumber: Annotated[
        int,
        Field(
            description='Must be between 1 and 500.  This defines the order in which the custom fields will appear'
        ),
    ]
    screenId: Annotated[str | None, Field(description='Field ScreenID Max length: 25;')]
    helpText: Annotated[
        str | None,
        Field(description='Help text to accompany the custom field Max length: 1000;'),
    ]
    fieldTypeIdentifier: CustomFieldValueType
    numberDecimals: Annotated[
        int | None, Field(description='Only valid for Number or percent')
    ]
    entryTypeIdentifier: ConfigurationTypeQuestionEntryType | None
    requiredFlag: bool | None
    displayOnScreenFlag: bool | None
    readOnlyFlag: bool | None
    listViewFlag: Annotated[
        bool | None,
        Field(description='Denotes that this custom field is included on a list view'),
    ]
    buttonUrl: Annotated[
        str | None,
        Field(
            description='Only available with Button Field Type. Required when entryTypeIdentifier is button Max length: 1000;'
        ),
    ]
    options: list[UserDefinedFieldOption] | None
    businessUnitIds: list[int] | None
    locationIds: list[int] | None
    addAllBusinessUnits: bool | None
    removeAllBusinessUnits: bool | None
    addAllLocations: bool | None
    removeAllLocations: bool | None
    connectWiseID: str | None
    dateCreated: Annotated[
        datetime | None, Field(description='Date in UTC the custom field was created')
    ]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class UserDefinedFieldInfo(SparkModel):
    id: Annotated[int | None, Field(description='ID of the custom user defined field')]
    podId: Annotated[
        int | None,
        Field(description='Id of the Pod where the custom field will be placed'),
    ]
    caption: Annotated[str | None, Field(description='Field caption')]
    sequenceNumber: Annotated[
        int | None,
        Field(
            description='Must be between 1 and 500.  This defines the order in which the custom fields will appear'
        ),
    ]
    helpText: Annotated[
        str | None, Field(description='Help text to accompany the custom field')
    ]
    fieldTypeIdentifier: CustomFieldValueType | None
    numberDecimals: Annotated[
        int | None, Field(description='Only valid for Number or percent')
    ]
    entryTypeIdentifier: ConfigurationTypeQuestionEntryType | None
    requiredFlag: bool | None
    displayOnScreenFlag: bool | None
    readOnlyFlag: bool | None
    listViewFlag: Annotated[
        bool | None,
        Field(description='Denotes that this custom field is included on a list view'),
    ]
    buttonUrl: Annotated[
        str | None,
        Field(
            description='Only available with Button Field Type. Required when entryTypeIdentifier is button'
        ),
    ]
    options: list[UserDefinedFieldOption] | None
    businessUnitIds: Annotated[
        list[int] | None,
        Field(description='List of business unit ids using custom field'),
    ]
    locationIds: Annotated[
        list[int] | None, Field(description='List of locations ids using custom field')
    ]
    dateCreated: Annotated[
        str | None, Field(description='Date in UTC the custom field was created')
    ]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class UserDefinedFieldOption(SparkModel):
    id: int | None
    optionValue: str | None
    defaultFlag: bool | None
    inactiveFlag: bool | None
    sortOrder: int | None


class UserDefinedFieldReference(ActivityReference):
    pass


class UserDefinedFieldValueModel(SparkModel):
    userDefinedFieldRecId: int | None
    value: str | None
    rowNum: int | None
    skipLocationAndBillingUnit: bool | None
    filtered: bool | None


class UserEmail(SparkModel):
    id: str | None
    displayName: str | None
    userPrincipalName: str | None


class ValidatePortalRequest(SparkModel):
    email: str
    password: str


class ValidatePortalResponse(SparkModel):
    success: bool | None
    contactId: int | None


class ValidationError(SparkModel):
    code: str | None
    message: str | None
    resource: str | None
    field: str | None
    details: str | None


class Version(SparkModel):
    major: int | None
    minor: int | None
    build: int | None
    revision: int | None
    majorRevision: int | None
    minorRevision: int | None


class Warehouse(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    company: CompanyReference | None
    location: SystemLocationReference
    contact: ContactReference | None
    department: SystemDepartmentReference
    manager: MemberReference | None
    site: SiteReference | None
    locationXref: Annotated[str | None, Field(description=' Max length: 10;')]
    locationDefaultFlag: bool | None
    overallDefaultFlag: bool | None
    inactiveFlag: bool | None
    lockedFlag: bool | None
    currency: CurrencyReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class WarehouseBin(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    warehouse: WarehouseReference
    location: SystemLocationReference | None
    department: SystemDepartmentReference | None
    minQuantity: float | None
    maxQuantity: float | None
    overflowBin: WarehouseBinReference | None
    manager: MemberReference | None
    length: float | None
    width: float | None
    height: float | None
    weight: float | None
    defaultFlag: bool | None
    inactiveFlag: bool | None
    quantityOnHand: int | None
    company: CompanyReference | None
    transferBin: WarehouseBinReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class WarehouseBinInfo(SparkModel):
    id: int | None
    name: str | None
    warehouse: WarehouseReference | None
    inactiveFlag: bool | None
    defaultFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class WarehouseBinReference(ActivityReference):
    pass


class WarehouseInfo(SparkModel):
    id: int | None
    name: str | None
    inactiveFlag: bool | None
    overallDefaultFlag: bool | None
    company: CompanyReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class WarehouseReference(SparkModel):
    id: int | None
    name: str | None
    lockedFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class WisePayBatchPayment(SparkModel):
    amount: float | None
    wisePayHref: str | None


class WisePayFeeInvoice(SparkModel):
    id: int | None
    invoiceNumber: str | None
    amount: float | None
    invoiceHref: str | None


class WisePayPayment(SparkModel):
    paymentDateUtc: str | None
    wisePayReference: str | None
    batchPayment: WisePayBatchPayment | None
    feeInvoice: WisePayFeeInvoice | None


class WonRevenueReference(AgreementRevenueReference):
    pass


class WorkRole(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    hourlyRate: float | None
    integrationXref: Annotated[str | None, Field(description=' Max length: 50;')]
    inactiveFlag: bool | None
    addAllLocations: bool | None
    removeAllLocations: bool | None
    addAllAgreementExclusions: Annotated[
        bool | None,
        Field(
            description='Used only on create to add the work role to all agreement and agreement type exclusion lists'
        ),
    ]
    locationIds: list[int] | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class WorkRoleExemption(SparkModel):
    id: int | None
    workRole: WorkRoleReference
    taxableLevels: list[int] | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class WorkRoleInfo(LegacySubCategoryInfo):
    pass


class WorkRoleLocation(SparkModel):
    id: int | None
    location: SystemLocationReference
    hourlyRate: float | None
    workRole: WorkRoleReference | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class WorkRoleReference(ActivityReference):
    pass


class WorkType(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 50;')]
    billTime: AdditionBillCustomer
    rateType: AgreementTypeWorkRoleRateType
    rate: float
    hoursMin: float | None
    hoursMax: float | None
    roundBillHoursTo: float | None
    accrualType: MemberAccrualAccrualType | None
    inactiveFlag: bool | None
    overallDefaultFlag: bool | None
    activityDefaultFlag: bool | None
    utilizationFlag: bool | None
    costMultiplier: float | None
    integrationXRef: Annotated[str | None, Field(description=' Max length: 50;')]
    addAllAgreementExclusions: Annotated[
        bool | None,
        Field(
            description='Used only on create to add the work type to all agreement and agreement type exclusion lists'
        ),
    ]
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class WorkTypeInfo(SparkModel):
    id: int | None
    name: str | None
    defaultFlag: bool | None
    inactiveFlag: bool | None
    activityDefaultFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class WorkTypeReference(SparkModel):
    id: int | None
    name: str | None
    utilizationFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class Workflow(SparkModel):
    id: int | None
    name: Annotated[str, Field(description=' Max length: 100;')]
    tableType: WorkflowTableTypeReference
    location: SystemLocationReference | None
    department: SystemDepartmentReference | None
    activateFlag: Annotated[
        bool | None,
        Field(
            description='Batches can not be turned on until after the workflow is created and it has atleast one event associated with it'
        ),
    ]
    batchInterval: int | None
    batchFrequencyUnit: Annotated[
        WorkflowBatchFrequencyUnit | None,
        Field(
            description='If not specified, defaults to Minutes. Months is not supported as month length varies'
        ),
    ]
    batchLastRan: datetime | None
    batchSchedule: Annotated[
        WorkflowBatchSchedule | None,
        Field(description='If activateFlag is true, batchSchedule is required'),
    ]
    board: BoardReference | None
    connectWiseID: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class WorkflowAction(SparkModel):
    id: int | None
    notifyType: NotifyTypeReference
    notifyWho: NotificationRecipientReference | None
    specificMemberTo: MemberReference | None
    emailRecipient: Annotated[
        str | None,
        Field(
            description='Required when notifyWho is set to: "Email Address" Max length: 250;'
        ),
    ]
    notifyFrom: NotificationRecipientReference | None
    specificMemberFrom: MemberReference | None
    emailFrom: Annotated[
        str | None,
        Field(
            description='Required when notifyFrom is set to: "Email Address" Max length: 250;'
        ),
    ]
    ccContact: ContactReference | None
    bccContact: ContactReference | None
    subject: Annotated[
        str | None,
        Field(
            description='Required when notifyType is set to: "Create Activity", "Send Email", "Assign Resource" Max length: 100;'
        ),
    ]
    notes: str | None
    activityStatus: ActivityStatusReference | None
    activityType: ActivityTypeReference | None
    attachedTrack: TrackReference | None
    daysToExecute: int | None
    board: BoardReference | None
    boardStatus: ServiceStatusReference | None
    serviceType: ServiceTypeReference | None
    serviceSubType: ServiceSubTypeReference | None
    serviceItem: ServiceItemReference | None
    group: GroupReference | None
    serviceTemplate: ServiceTemplateReference | None
    invoiceMinDays: int | None
    automateScript: AutomateScriptReference | None
    scriptSuccessStatus: ServiceStatusReference | None
    scriptFailStatus: ServiceStatusReference | None
    detailNotesFlag: bool | None
    internalNotesFlag: bool | None
    auditNotesFlag: bool | None
    servicePriority: PriorityReference | None
    updateOwnerFlag: bool | None
    salesOrderStatus: OrderStatusReference | None
    projectStatus: ProjectStatusReference | None
    companyStatus: CompanyStatusReference | None
    attachments: list[int] | None
    serviceSurvey: ServiceSurveyReference | None
    specificTeamTo: GenericBoardTeamReference | None
    attachConfigurationsFor: Annotated[
        WorkflowActionAttachConfigurationsFor | None,
        Field(description='Required when notifyType is set to: "Attach Configuration"'),
    ]
    configurationType: ConfigurationTypeReference | None
    configurationStatus: ConfigurationStatusReference | None
    connectWiseID: str | None
    parentId: Annotated[int | None, Field(description='WF_NotifyEvents_RecID')]
    grandParentId: Annotated[int | None, Field(description='WF_NotifyHeader_RecID')]
    parentConnectWiseId: str | None
    grandParentConnectWiseId: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class WorkflowActionAttachConfigurationsFor(str, Enum):
    Company = 'Company'
    Contact = 'Contact'


class WorkflowActionAutomateParameter(SparkModel):
    id: int | None
    name: str
    value: str | None
    connectWiseID: str | None
    parentId: Annotated[int | None, Field(description='WF_NotifyActions_RecID')]
    parentConnectWiseId: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class WorkflowActionUserDefinedField(SparkModel):
    id: int | None
    eventId: int | None
    actionId: int | None
    caption: str | None
    userDefinedFieldId: int | None
    value: str | None
    overwriteFlag: bool | None
    podDescription: str | None
    fieldTypeId: str | None
    entryTypeId: str | None
    requiredFlag: bool | None
    inactiveFlag: bool | None
    connectWiseID: str | None
    parentId: Annotated[int | None, Field(description='WF_NotifyActions_RecID')]
    grandParentId: Annotated[int | None, Field(description='WF_NotifyEvents_RecID')]
    parentConnectWiseId: str | None
    grandParentConnectWiseId: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class WorkflowAttachment(SparkModel):
    id: int | None
    name: str | None
    connectWiseID: str | None
    parentId: Annotated[int | None, Field(description='WF_NotifyHeader_RecID')]
    parentConnectWiseId: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class WorkflowBatchFrequencyUnit(str, Enum):
    Minutes = 'Minutes'
    Hours = 'Hours'
    Days = 'Days'


class WorkflowBatchSchedule(str, Enum):
    AnyTime = 'AnyTime'
    MyCompanyOfficeHours = 'MyCompanyOfficeHours'
    SlaHours = 'SlaHours'


class WorkflowEvent(SparkModel):
    id: int | None
    name: str | None
    eventCondition: str
    frequencyUnit: Annotated[
        WorkflowEventFrequencyUnit | None,
        Field(
            description='Required when exectionTimes is set to MultipleTimes or Continuously'
        ),
    ]
    frequencyOfExecution: Annotated[
        int | None,
        Field(
            description='Required when exectionTimes is set to MultipleTimes or Continuously'
        ),
    ]
    maxNumberOfExecution: Annotated[
        int | None,
        Field(description='Required when exectionTimes is set to MultipleTimes'),
    ]
    executionTime: Annotated[
        WorkflowEventExecutionTime | None,
        Field(description='Defaults to Once when not specified'),
    ]
    dateTestedUTC: datetime | None
    testRecordsMatched: int | None
    connectWiseID: str | None
    parentId: Annotated[int | None, Field(description='WF_NotifyHeader_RecID')]
    parentConnectWiseId: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class WorkflowEventExecutionTime(str, Enum):
    Once = 'Once'
    MultipleTimes = 'MultipleTimes'
    Continuously = 'Continuously'


class WorkflowEventFrequencyUnit(str, Enum):
    Minutes = 'Minutes'
    Hours = 'Hours'
    Days = 'Days'
    Months = 'Months'


class WorkflowNotifyType(SparkModel):
    id: int | None
    identifier: str | None
    name: str | None
    isSetupFlag: Annotated[
        bool | None,
        Field(
            description='If the current action is available because it is already set up. Pertains to integrations such as Automate'
        ),
    ]
    externalFlag: Annotated[
        bool | None,
        Field(
            description='If the current action effects external objects e.g. integrations or sending an email'
        ),
    ]
    connectWiseID: str | None
    parentId: Annotated[int | None, Field(description='WF_NotifyHeader_RecID')]
    parentConnectWiseId: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class WorkflowNotifyTypeInfo(SparkModel):
    id: int | None
    identifier: str | None
    name: str | None
    isSetupFlag: bool | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class WorkflowTableType(SparkModel):
    id: int | None
    identifier: str | None
    name: str | None
    connectWiseID: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class WorkflowTableTypeInfo(CatalogItemReference):
    pass


class WorkflowTableTypeReference(CatalogItemReference):
    pass


class WorkflowTrigger(SparkModel):
    id: int | None
    name: str | None
    description: str | None
    hasOptionsFlag: bool | None
    hasOperatorFlag: bool | None
    customField: UserDefinedFieldReference | None
    expectedType: str | None
    connectWiseID: str | None
    parentId: int | None
    parentConnectWiseId: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class WorkflowTriggerOption(SparkModel):
    value: str | None
    name: str | None
    customField: UserDefinedFieldReference | None
    connectWiseID: str | None
    parentId: int | None
    grandParentId: int | None
    parentConnectWiseId: str | None
    grandParentConnectWiseId: str | None
    field_info: Annotated[dict[str, str] | None, Field(alias='_info')]


class ExpenseEntryAudit(TimeEntryAudit):
    pass


class ExpenseReportAudit(TimeEntryAudit):
    pass


HttpMethod.update_forward_refs()
