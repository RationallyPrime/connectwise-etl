"""
PSA API models generated from OpenAPI schema by datamodel-code-generator.

Compatible with Pydantic v2 and SparkDantic for Spark schema generation.
This file contains all models to avoid circular imports and manage dependencies.
This file is autogenerated. Do not edit manually.
Generated by unified_etl/generators/generate_psa_models.py
"""
# flake8: noqa
# fmt: off

from __future__ import annotations

from datetime import datetime
from typing import Any, Literal
from uuid import UUID

from pydantic import Field
from sparkdantic import SparkModel

# generated by datamodel-codegen:
#   filename:  tmpnmqa28l4.json

from __future__ import annotations

from datetime import datetime
from typing import Any, Literal
from uuid import UUID

from pydantic import Field
from sparkdantic import SparkModel


class PaymentMethodReference(SparkModel):
    id: int | None = None
    name: str | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')


ProjectPhaseReference = PaymentMethodReference


class CustomFieldValue(SparkModel):
    id: int | None = None
    caption: str | None = None
    type: (
        Literal[
            'TextArea',
            'Button',
            'Currency',
            'Date',
            'Hyperlink',
            'IPAddress',
            'Checkbox',
            'Number',
            'Percent',
            'PhoneNumber',
            'Text',
            'Password',
        ]
        | None
    ) = None
    entryMethod: Literal['Date', 'EntryField', 'List', 'Option'] | None = None
    numberOfDecimals: int | None = None
    value: dict[str, Any] | None = None
    connectWiseId: str | None = None


class TicketReference(SparkModel):
    id: int | None = None
    summary: str | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')


AgreementTypeReference = PaymentMethodReference


ExpenseTypeReference = PaymentMethodReference


class CompanyReference(SparkModel):
    id: int | None = None
    identifier: str | None = None
    name: str | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')


class SalesOrderReference(SparkModel):
    id: int | None = None
    identifier: str | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')


ExpenseReportReference = PaymentMethodReference


class InvoiceReference(SparkModel):
    id: int | None = None
    identifier: str | None = None
    billingType: str | None = None
    applyToType: str | None = None
    invoiceDate: str | None = None
    chargeFirmFlag: bool | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')


class BillingStatusReference(SparkModel):
    id: int | None = None
    name: str | None = None
    isClosed: bool | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')


BatchReference = PaymentMethodReference


BillingSetupReference = PaymentMethodReference


class MemberReference(SparkModel):
    id: int | None = None
    identifier: str | None = None
    name: str | None = None
    dailyCapacity: float | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')


SiteReference = PaymentMethodReference


InvoiceTemplateDetailReference = PaymentMethodReference


ActivityReference = PaymentMethodReference


ClassificationReference = PaymentMethodReference


BillingTermsReference = PaymentMethodReference


class InvoiceTemplateReference(SparkModel):
    id: int | None = None
    """
    Gets or sets invoice Template Setup Id.
    """
    name: str | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')


class CurrencyReference(SparkModel):
    id: int | None = None
    symbol: str | None = None
    currencyCode: str | None = None
    decimalSeparator: str | None = None
    numberOfDecimals: int | None = None
    thousandsSeparator: str | None = None
    negativeParenthesesFlag: bool | None = None
    displaySymbolFlag: bool | None = None
    currencyIdentifier: str | None = None
    displayIdFlag: bool | None = None
    rightAlign: bool | None = None
    name: str | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')


OpportunityReference = PaymentMethodReference


SystemLocationReference = PaymentMethodReference


ContactReference = PaymentMethodReference


class AgreementReference(SparkModel):
    id: int | None = None
    name: str | None = None
    type: str | None = None
    chargeFirmFlag: bool | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')


SystemDepartmentReference = CompanyReference


ProjectReference = PaymentMethodReference


BillingUnitReference = PaymentMethodReference


EntityTypeReference = PaymentMethodReference


OpportunityStatusReference = PaymentMethodReference


ProjectTypeReference = PaymentMethodReference


ExpenseTaxTypeReference = PaymentMethodReference


CatalogItemReference = CompanyReference


SLAReference = PaymentMethodReference


TaxCodeReference = PaymentMethodReference


class WorkTypeReference(SparkModel):
    id: int | None = None
    name: str | None = None
    utilizationFlag: bool | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')


TimeSheetReference = PaymentMethodReference


WorkRoleReference = PaymentMethodReference


OwnerLevelReference = PaymentMethodReference


BillingCycleReference = PaymentMethodReference


UnitOfMeasureReference = PaymentMethodReference


class InvoiceGroupingReference(SparkModel):
    id: int | None = None
    name: str | None = None
    description: str | None = None
    showPriceFlag: bool | None = None
    showSubItemsFlag: bool | None = None
    groupParentChildAdditionsFlag: bool | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')


class WarehouseReference(SparkModel):
    id: int | None = None
    name: str | None = None
    lockedFlag: bool | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')


WarehouseBinReference = PaymentMethodReference


class ExpenseTax(SparkModel):
    id: int | None = None
    amount: float | None = None
    type: ExpenseTaxTypeReference | None = None


class Invoice(SparkModel):
    id: int | None = None
    invoiceNumber: str | None = None
    """
     Max length: 15; Required On Updates;
    """
    type: (
        Literal[
            'Agreement',
            'CreditMemo',
            'DownPayment',
            'Miscellaneous',
            'Progress',
            'Standard',
        ]
        | None
    ) = Field(...)
    status: BillingStatusReference | None = None
    company: CompanyReference
    billToCompany: CompanyReference | None = None
    shipToCompany: CompanyReference | None = None
    accountNumber: str | None = None
    applyToType: (
        Literal['All', 'Agreement', 'Project', 'ProjectPhase', 'SalesOrder', 'Ticket']
        | None
    ) = None
    applyToId: int | None = None
    attention: str | None = None
    """
     Max length: 60;
    """
    shipToAttention: str | None = None
    """
     Max length: 60;
    """
    billingSite: SiteReference | None = None
    billingSiteAddressLine1: str | None = None
    billingSiteAddressLine2: str | None = None
    billingSiteCity: str | None = None
    billingSiteState: str | None = None
    billingSiteZip: str | None = None
    billingSiteCountry: str | None = None
    shippingSite: SiteReference | None = None
    shippingSiteAddressLine1: str | None = None
    shippingSiteAddressLine2: str | None = None
    shippingSiteCity: str | None = None
    shippingSiteState: str | None = None
    shippingSiteZip: str | None = None
    shippingSiteCountry: str | None = None
    billingTerms: BillingTermsReference | None = None
    reference: str | None = None
    """
     Max length: 50;
    """
    customerPO: str | None = None
    """
     Max length: 50;
    """
    templateSetupId: int | None = None
    """
    Can be obtained via InvoiceTemplate report.
    """
    invoiceTemplate: InvoiceTemplateDetailReference | None = None
    emailTemplateId: int | None = None
    """
    Can be obtained via InvoiceEmailTemplate report.
    """
    addToBatchEmailList: bool | None = None
    date: datetime | None = None
    restrictDownpaymentFlag: bool | None = None
    locationId: int | None = None
    """
     Required On Updates;
    """
    location: SystemLocationReference | None = None
    departmentId: int | None = None
    """
    departmentId is only required for special invoices.
    """
    department: BillingUnitReference | None = None
    territoryId: int | None = None
    territory: SystemLocationReference | None = None
    topComment: str | None = None
    bottomComment: str | None = None
    taxableFlag: bool | None = None
    taxCode: TaxCodeReference | None = None
    internalNotes: str | None = None
    downpaymentPreviouslyTaxedFlag: bool | None = None
    serviceTotal: float | None = None
    overrideDownPaymentAmountFlag: bool | None = None
    currency: CurrencyReference | None = None
    dueDate: datetime | None = None
    expenseTotal: float | None = None
    productTotal: float | None = None
    previousProgressApplied: float | None = None
    serviceAdjustmentAmount: float | None = None
    agreementAmount: float | None = None
    downpaymentApplied: float | None = None
    subtotal: float | None = None
    total: float | None = None
    remainingDownpayment: float | None = None
    salesTax: float | None = None
    adjustmentReason: str | None = None
    adjustedBy: str | None = None
    closedBy: str | None = None
    payments: float | None = None
    credits: float | None = None
    balance: float | None = None
    specialInvoiceFlag: bool | None = None
    billingSetupReference: BillingSetupReference | None = None
    ticket: TicketReference | None = None
    project: ProjectReference | None = None
    phase: ProjectPhaseReference | None = None
    salesOrder: SalesOrderReference | None = None
    agreement: AgreementReference | None = None
    glBatch: BatchReference | None = None
    unbatchedBatch: BatchReference | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')
    customFields: list[CustomFieldValue] | None = None


class Agreement(SparkModel):
    id: int | None = None
    name: str
    """
     Max length: 100;
    """
    type: AgreementTypeReference
    company: CompanyReference
    contact: ContactReference
    site: SiteReference | None = None
    subContractCompany: CompanyReference | None = None
    subContractContact: ContactReference | None = None
    parentAgreement: AgreementReference | None = None
    customerPO: str | None = None
    """
     Max length: 50;
    """
    location: SystemLocationReference | None = None
    department: SystemDepartmentReference | None = None
    restrictLocationFlag: bool | None = None
    restrictDepartmentFlag: bool | None = None
    startDate: datetime | None = None
    endDate: datetime | None = None
    noEndingDateFlag: bool | None = None
    opportunity: OpportunityReference | None = None
    cancelledFlag: bool | None = None
    dateCancelled: datetime | None = None
    reasonCancelled: str | None = None
    """
     Max length: 100;
    """
    sla: SLAReference | None = None
    workOrder: str | None = None
    """
     Max length: 20;
    """
    internalNotes: str | None = None
    applicationUnits: Literal['Amount', 'Hours', 'Incidents'] | None = None
    applicationLimit: float | None = None
    applicationCycle: (
        Literal[
            'Contract2Weeks',
            'Contract4Weeks',
            'ContractYear',
            'CalendarMonth',
            'CalendarQuarter',
            'CalendarWeek',
            'ContractQuarter',
            'CalendarYear',
        ]
        | None
    ) = None
    applicationUnlimitedFlag: bool | None = None
    oneTimeFlag: bool | None = None
    coverAgreementTime: bool | None = None
    coverAgreementProduct: bool | None = None
    coverAgreementExpense: bool | None = None
    coverSalesTax: bool | None = None
    carryOverUnused: bool | None = None
    allowOverruns: bool | None = None
    expiredDays: int | None = None
    limit: int | None = None
    expireWhenZero: bool | None = None
    chargeToFirm: bool | None = None
    employeeCompRate: Literal['Actual', 'Hourly'] | None = None
    """
     Required On Updates;
    """
    employeeCompNotExceed: Literal['Billing', 'Amount', 'Percent'] | None = None
    compHourlyRate: float | None = None
    compLimitAmount: float | None = None
    billingCycle: BillingCycleReference | None = None
    billOneTimeFlag: bool | None = None
    billingTerms: BillingTermsReference | None = None
    invoicingCycle: Literal['ContractYear', 'CalendarYear'] | None = None
    """
     Required On Updates;
    """
    billToCompany: CompanyReference | None = None
    billToContact: ContactReference | None = None
    billToSite: SiteReference | None = None
    billAmount: float | None = None
    taxable: bool | None = None
    prorateFirstBill: float | None = None
    billStartDate: datetime | None = None
    taxCode: TaxCodeReference | None = None
    restrictDownPayment: bool | None = None
    prorateFlag: bool | None = None
    invoiceProratedAdditionsFlag: bool | None = None
    invoiceDescription: str | None = None
    topComment: bool | None = None
    bottomComment: bool | None = None
    workRole: WorkRoleReference | None = None
    workType: WorkTypeReference | None = None
    projectType: ProjectTypeReference | None = None
    invoiceTemplate: InvoiceTemplateReference | None = None
    billTime: Literal['Billable', 'DoNotBill', 'NoCharge', 'NoDefault'] | None = None
    """
     Required On Updates;
    """
    billExpenses: Literal['Billable', 'DoNotBill', 'NoCharge', 'NoDefault'] | None = (
        None
    )
    """
     Required On Updates;
    """
    billProducts: Literal['Billable', 'DoNotBill', 'NoCharge', 'NoDefault'] | None = (
        None
    )
    """
     Required On Updates;
    """
    billableTimeInvoice: bool | None = None
    billableExpenseInvoice: bool | None = None
    billableProductInvoice: bool | None = None
    currency: CurrencyReference | None = None
    periodType: Literal['Current', 'Future', 'Both', 'Undefined'] | None = None
    autoInvoiceFlag: bool | None = None
    nextInvoiceDate: str | None = None
    companyLocation: SystemLocationReference | None = None
    shipToCompany: CompanyReference | None = None
    shipToContact: ContactReference | None = None
    shipToSite: SiteReference | None = None
    agreementStatus: Literal['Active', 'Cancelled', 'Expired', 'Inactive'] | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')
    customFields: list[CustomFieldValue] | None = None


class TimeEntry(SparkModel):
    id: int | None = None
    company: CompanyReference | None = None
    companyType: str | None = None
    chargeToId: int | None = None
    """
    If chargeToId is not specified, we asume you enter time against the company specified
    """
    chargeToType: (
        Literal['Company', 'ServiceTicket', 'ProjectTicket', 'ChargeCode', 'Activity']
        | None
    ) = None
    """
    If chargeToId is not specified, we asume you enter time against the company specified
    """
    member: MemberReference | None = None
    locationId: int | None = None
    businessUnitId: int | None = None
    businessGroupDesc: str | None = None
    location: OwnerLevelReference | None = None
    department: BillingUnitReference | None = None
    workType: WorkTypeReference | None = None
    workRole: WorkRoleReference | None = None
    agreement: AgreementReference | None = None
    agreementType: str | None = None
    activity: ActivityReference | None = None
    opportunityRecid: int | None = None
    projectActivity: str | None = None
    territory: str | None = None
    timeStart: datetime
    timeEnd: datetime | None = None
    hoursDeduct: float | None = None
    actualHours: float | None = None
    billableOption: Literal['Billable', 'DoNotBill', 'NoCharge', 'NoDefault'] | None = (
        None
    )
    """
     Required On Updates;
    """
    notes: str | None = None
    internalNotes: str | None = None
    addToDetailDescriptionFlag: bool | None = None
    addToInternalAnalysisFlag: bool | None = None
    addToResolutionFlag: bool | None = None
    emailResourceFlag: bool | None = None
    """
    This is an action flag. To update this value use the /service/tickets endpoint automaticEmailResourceFlag field
    """
    emailContactFlag: bool | None = None
    """
    This is an action flag. To update this value use the /service/tickets endpoint automaticEmailContactFlag field
    """
    emailCcFlag: bool | None = None
    """
    This is an action flag. To update this value use the /service/tickets endpoint automaticEmailCcFlag field
    """
    emailCc: str | None = None
    """
    To update this value use the /service/tickets endpoint automaticEmailCc field
    """
    hoursBilled: float | None = None
    invoiceHours: float | None = None
    hourlyCost: str | None = None
    enteredBy: str | None = None
    dateEntered: datetime | None = None
    invoice: InvoiceReference | None = None
    mobileGuid: UUID | None = None
    hourlyRate: float | None = None
    """
    This field may only be Updated, it is defaulted on Create
    """
    overageRate: float | None = None
    agreementHours: float | None = None
    agreementAmount: float | None = None
    agreementAdjustment: float | None = None
    adjustment: float | None = None
    invoiceReady: int | None = None
    timeSheet: TimeSheetReference | None = None
    status: (
        Literal[
            'Open',
            'Rejected',
            'PendingApproval',
            'ErrorsCorrected',
            'PendingProjectApproval',
            'ApprovedByTierOne',
            'RejectBySecondTier',
            'ApprovedByTierTwo',
            'ReadyToBill',
            'Billed',
            'WrittenOff',
            'BilledAgreement',
        ]
        | None
    ) = None
    ticket: TicketReference | None = None
    project: ProjectReference | None = None
    phase: ProjectPhaseReference | None = None
    ticketBoard: str | None = None
    ticketStatus: str | None = None
    ticketType: str | None = None
    ticketSubType: str | None = None
    invoiceFlag: bool | None = None
    extendedInvoiceAmount: float | None = None
    locationName: str | None = None
    taxCode: TaxCodeReference | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')
    customFields: list[CustomFieldValue] | None = None


class ProductRecurring(SparkModel):
    recurringRevenue: float | None = None
    recurringCost: float | None = None
    startDate: str | None = None
    endDate: str | None = None
    """
    The Recurring End Date is calculated based on the
                start date, number of cycles, and cycle type.
    """
    billCycleId: int | None = None
    billCycle: BillingCycleReference | None = None
    cycles: int | None = None
    cycleType: Literal['ContractYear', 'CalendarYear'] | None = None
    agreementType: AgreementTypeReference | None = None


class ExpenseEntry(SparkModel):
    id: int | None = None
    expenseReport: ExpenseReportReference | None = None
    company: CompanyReference | None = None
    chargeToId: int | None = None
    chargeToType: (
        Literal['Company', 'ServiceTicket', 'ProjectTicket', 'ChargeCode', 'Activity']
        | None
    ) = None
    """
    Gets or sets
                company or chargeToType is required.
    """
    type: ExpenseTypeReference
    member: MemberReference | None = None
    paymentMethod: PaymentMethodReference | None = None
    classification: ClassificationReference | None = None
    amount: float | None = Field(...)
    billableOption: Literal['Billable', 'DoNotBill', 'NoCharge', 'NoDefault'] | None = (
        None
    )
    date: datetime
    locationId: int | None = None
    businessUnitId: int | None = None
    notes: str | None = None
    agreement: AgreementReference | None = None
    invoiceAmount: float | None = None
    mobileGuid: UUID | None = None
    taxes: list[ExpenseTax] | None = None
    invoice: InvoiceReference | None = None
    currency: CurrencyReference | None = None
    status: (
        Literal[
            'Open',
            'Rejected',
            'PendingApproval',
            'ErrorsCorrected',
            'PendingProjectApproval',
            'ApprovedByTierOne',
            'RejectBySecondTier',
            'ApprovedByTierTwo',
            'ReadyToBill',
            'Billed',
            'WrittenOff',
            'BilledAgreement',
        ]
        | None
    ) = None
    billAmount: float | None = None
    agreementAmount: float | None = None
    odometerStart: float | None = None
    odometerEnd: float | None = None
    ticket: TicketReference | None = None
    project: ProjectReference | None = None
    phase: ProjectPhaseReference | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')
    customFields: list[CustomFieldValue] | None = None


class ProductItem(SparkModel):
    id: int | None = None
    catalogItem: CatalogItemReference
    description: str | None = None
    """
     Max length: 2000;
    """
    sequenceNumber: float | None = None
    quantity: float | None = None
    unitOfMeasure: UnitOfMeasureReference | None = None
    price: float | None = None
    cost: float | None = None
    extPrice: float | None = None
    extCost: float | None = None
    discount: float | None = None
    margin: float | None = None
    agreementAmount: float | None = None
    priceMethod: (
        Literal[
            'FlatRateForRange',
            'PercentMarkupFromCost',
            'PercentMarkdownFromPrice',
            'PricePerUnit',
        ]
        | None
    ) = None
    billableOption: Literal['Billable', 'DoNotBill', 'NoCharge'] | None = Field(...)
    agreement: AgreementReference | None = None
    locationId: int | None = None
    """
     Required On Updates;
    """
    location: SystemLocationReference | None = None
    businessUnitId: int | None = None
    """
     Required On Updates;
    """
    businessUnit: BillingUnitReference | None = None
    vendor: CompanyReference | None = None
    vendorSku: str | None = None
    """
     Max length: 50;
    """
    taxableFlag: bool | None = None
    dropshipFlag: bool | None = None
    specialOrderFlag: bool | None = None
    phaseProductFlag: bool | None = None
    cancelledFlag: bool | None = None
    quantityCancelled: float | None = None
    cancelledReason: str | None = None
    """
     Max length: 100;
    """
    customerDescription: str | None = None
    """
     Max length: 6000; Required On Updates;
    """
    internalNotes: str | None = None
    """
     Max length: 1000;
    """
    productSuppliedFlag: bool | None = None
    subContractorShipToId: int | None = None
    subContractorAmountLimit: float | None = None
    recurring: ProductRecurring | None = None
    sla: SLAReference | None = None
    entityType: EntityTypeReference | None = None
    ticket: TicketReference | None = None
    project: ProjectReference | None = None
    phase: ProjectPhaseReference | None = None
    salesOrder: SalesOrderReference | None = None
    opportunity: OpportunityReference | None = None
    invoice: InvoiceReference | None = None
    warehouseId: int | None = None
    warehouseIdObject: WarehouseReference | None = None
    warehouseBinId: int | None = None
    warehouseBinIdObject: WarehouseBinReference | None = None
    calculatedPriceFlag: bool | None = None
    calculatedCostFlag: bool | None = None
    forecastDetailId: int | None = None
    cancelledBy: int | None = None
    cancelledDate: datetime | None = None
    warehouse: str | None = None
    warehouseBin: str | None = None
    purchaseDate: datetime | None = None
    taxCode: TaxCodeReference | None = None
    integrationXRef: str | None = None
    listPrice: float | None = None
    serialNumberIds: list[int] | None = None
    serialNumbers: list[str] | None = None
    company: CompanyReference | None = None
    forecastStatus: OpportunityStatusReference | None = None
    productClass: (
        Literal['Agreement', 'Bundle', 'Inventory', 'NonInventory', 'Service'] | None
    ) = None
    needToPurchaseFlag: bool | None = None
    needToOrderQuantity: int | None = None
    minimumStockFlag: bool | None = None
    shipSet: str | None = None
    """
     Max length: 10;
    """
    calculatedPrice: float | None = None
    calculatedCost: float | None = None
    invoiceGrouping: InvoiceGroupingReference | None = None
    poApprovedFlag: bool | None = None
    uom: str | None = None
    addComponentsFlag: bool | None = None
    ignorePricingSchedulesFlag: bool | None = None
    asioSubscriptionsID: UUID | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')
    bypassForecastUpdate: bool | None = None
    customFields: list[CustomFieldValue] | None = None


# PostedInvoice is an alias of Invoice, used for consistency in some contexts
PostedInvoice = Invoice
