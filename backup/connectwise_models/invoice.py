# generated by datamodel-codegen:
#   filename:  PostedInvoice.json
#   timestamp: 2025-05-09T13:38:48+00:00

from __future__ import annotations

from pydantic import Field
from sparkdantic import SparkModel


class Status(SparkModel):
    id: int
    name: str
    isClosed: bool


class FieldInfo(SparkModel):
    company_href: str


class Company(SparkModel):
    id: int
    identifier: str
    name: str
    field_info: FieldInfo = Field(..., alias="_info")


class BillToCompany(SparkModel):
    id: int
    identifier: str
    name: str
    field_info: FieldInfo = Field(..., alias="_info")


class ShipToCompany(SparkModel):
    id: int
    identifier: str
    name: str
    field_info: FieldInfo = Field(..., alias="_info")


class FieldInfo3(SparkModel):
    site_href: str


class BillingSite(SparkModel):
    id: int
    name: str
    field_info: FieldInfo3 = Field(..., alias="_info")


class ShippingSite(SparkModel):
    id: int
    name: str
    field_info: FieldInfo3 = Field(..., alias="_info")


class BillingTerms(SparkModel):
    id: int
    name: str


class FieldInfo5(SparkModel):
    location_href: str


class Location(SparkModel):
    id: int
    name: str
    field_info: FieldInfo5 = Field(..., alias="_info")


class FieldInfo6(SparkModel):
    department_href: str


class Department(SparkModel):
    id: int
    name: str
    field_info: FieldInfo6 = Field(..., alias="_info")


class FieldInfo7(SparkModel):
    location_href: str


class Territory(SparkModel):
    id: int
    name: str
    field_info: FieldInfo7 = Field(..., alias="_info")


class FieldInfo8(SparkModel):
    taxCode_href: str


class TaxCode(SparkModel):
    id: int
    name: str
    field_info: FieldInfo8 = Field(..., alias="_info")


class FieldInfo9(SparkModel):
    currency_href: str


class Currency(SparkModel):
    id: int
    symbol: str
    currencyCode: str
    decimalSeparator: str
    numberOfDecimals: int
    thousandsSeparator: str
    negativeParenthesesFlag: bool
    displaySymbolFlag: bool
    currencyIdentifier: str
    displayIdFlag: bool
    rightAlign: bool
    name: str
    field_info: FieldInfo9 = Field(..., alias="_info")


class FieldInfo10(SparkModel):
    batch_href: str


class GlBatch(SparkModel):
    id: int
    name: str
    field_info: FieldInfo10 = Field(..., alias="_info")


class PostedInvoice(SparkModel):
    id: int
    invoiceNumber: str
    type: str
    status: Status
    company: Company
    billToCompany: BillToCompany
    shipToCompany: ShipToCompany
    accountNumber: str
    attention: str
    billingSite: BillingSite
    billingSiteAddressLine1: str
    billingSiteCity: str
    billingSiteZip: str
    billingSiteCountry: str
    shippingSite: ShippingSite
    shippingSiteAddressLine1: str
    shippingSiteCity: str
    shippingSiteZip: str
    shippingSiteCountry: str
    billingTerms: BillingTerms
    reference: str
    templateSetupId: int
    emailTemplateId: int
    addToBatchEmailList: bool
    date: str
    restrictDownpaymentFlag: bool
    locationId: int
    location: Location
    departmentId: int
    department: Department
    territoryId: int
    territory: Territory
    topComment: str
    bottomComment: str
    taxableFlag: bool
    taxCode: TaxCode
    downpaymentPreviouslyTaxedFlag: bool
    serviceTotal: float
    overrideDownPaymentAmountFlag: bool
    currency: Currency
    dueDate: str
    expenseTotal: float
    productTotal: float
    previousProgressApplied: float
    serviceAdjustmentAmount: float
    agreementAmount: float
    downpaymentApplied: float
    subtotal: float
    total: float
    remainingDownpayment: float
    salesTax: float
    closedBy: str
    payments: float
    credits: float
    balance: float
    specialInvoiceFlag: bool
    glBatch: GlBatch
