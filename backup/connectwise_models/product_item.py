# generated by datamodel-codegen:
#   filename:  ProductItem.json
#   timestamp: 2025-05-09T13:38:52+00:00

from __future__ import annotations

from pydantic import Field
from sparkdantic import SparkModel
from typing import Optional

class FieldInfo(SparkModel):
    typeId: str
    catalog_href: str


class CatalogItem(SparkModel):
    id: int
    identifier: str
    field_info: FieldInfo = Field(..., alias='_info')


class FieldInfo1(SparkModel):
    uom_href: str


class UnitOfMeasure(SparkModel):
    id: int
    name: str
    field_info: FieldInfo1 = Field(..., alias='_info')


class FieldInfo2(SparkModel):
    location_href: str


class Location(SparkModel):
    id: int
    name: str
    field_info: FieldInfo2 = Field(..., alias='_info')


class FieldInfo3(SparkModel):
    department_href: str


class BusinessUnit(SparkModel):
    id: int
    name: str
    field_info: FieldInfo3 = Field(..., alias='_info')


class FieldInfo4(SparkModel):
    opportunity_href: str


class Opportunity(SparkModel):
    id: int
    name: str
    field_info: FieldInfo4 = Field(..., alias='_info')


class FieldInfo5(SparkModel):
    taxCode_href: str


class TaxCode(SparkModel):
    id: int
    name: str
    field_info: FieldInfo5 = Field(..., alias='_info')


class FieldInfo6(SparkModel):
    company_href: str


class Company(SparkModel):
    id: int
    identifier: str
    name: str
    field_info: FieldInfo6 = Field(..., alias='_info')


class ProductItem(SparkModel):
    id: int
    catalogItem: CatalogItem
    description: str
    sequenceNumber: float
    quantity: float
    unitOfMeasure: UnitOfMeasure
    price: float
    cost: float
    extPrice: float
    extCost: float
    margin: float
    agreementAmount: float
    priceMethod: str = Field(default="")  # Made optional with default value to fix validation errors
    billableOption: str
    locationId: int
    location: Location
    businessUnitId: int
    businessUnit: BusinessUnit
    vendorSku: str = Field(default="")  # Made optional with default value to fix validation errors
    taxableFlag: bool
    dropshipFlag: bool
    specialOrderFlag: bool
    phaseProductFlag: bool
    cancelledFlag: bool
    quantityCancelled: float
    cancelledReason: str = Field(default="")  # Made optional with default value to fix validation errors
    customerDescription: str
    productSuppliedFlag: bool
    subContractorAmountLimit: float = Field(default=0.0)  # Made optional with default value to fix validation errors
    opportunity: Optional[Opportunity] = None
    calculatedPriceFlag: bool = Field(default=False)
    calculatedCostFlag: bool = Field(default=False)
    forecastDetailId: int = Field(default=0)
    cancelledBy: int = Field(default=0)  # Made optional with default value to fix validation errors
    cancelledDate: str = Field(default="")  # Made optional with default value to fix validation errors
    taxCode: TaxCode
    listPrice: float
    company: Company
    productClass: str
    needToPurchaseFlag: bool
    minimumStockFlag: bool
    poApprovedFlag: bool
    uom: str
