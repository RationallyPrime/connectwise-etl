# generated by datamodel-codegen:
#   filename:  Agreement.json
#   timestamp: 2025-05-09T13:38:38+00:00

from __future__ import annotations

from pydantic import Field
from sparkdantic import SparkModel


class FieldInfo(SparkModel):
    type_href: str


class Type(SparkModel):
    id: int
    name: str
    field_info: FieldInfo = Field(..., alias="_info")


class FieldInfo1(SparkModel):
    company_href: str


class Company(SparkModel):
    id: int
    identifier: str
    name: str
    field_info: FieldInfo1 = Field(..., alias="_info")


class FieldInfo2(SparkModel):
    contact_href: str


class Contact(SparkModel):
    id: int
    name: str
    field_info: FieldInfo2 = Field(..., alias="_info")


class FieldInfo3(SparkModel):
    site_href: str


class Site(SparkModel):
    id: int
    name: str
    field_info: FieldInfo3 = Field(..., alias="_info")


class FieldInfo4(SparkModel):
    location_href: str


class Location(SparkModel):
    id: int
    name: str
    field_info: FieldInfo4 = Field(..., alias="_info")


class FieldInfo5(SparkModel):
    department_href: str


class Department(SparkModel):
    id: int
    identifier: str
    name: str
    field_info: FieldInfo5 = Field(..., alias="_info")


class FieldInfo6(SparkModel):
    billingCycle_href: str


class BillingCycle(SparkModel):
    id: int
    name: str
    field_info: FieldInfo6 = Field(..., alias="_info")


class FieldInfo7(SparkModel):
    company_href: str


class BillToCompany(SparkModel):
    id: int
    identifier: str
    name: str
    field_info: FieldInfo7 = Field(..., alias="_info")


class FieldInfo8(SparkModel):
    contact_href: str


class BillToContact(SparkModel):
    id: int
    name: str
    field_info: FieldInfo8 = Field(..., alias="_info")


class FieldInfo9(SparkModel):
    site_href: str


class BillToSite(SparkModel):
    id: int
    name: str
    field_info: FieldInfo9 = Field(..., alias="_info")


class FieldInfo10(SparkModel):
    taxCode_href: str


class TaxCode(SparkModel):
    id: int
    name: str
    field_info: FieldInfo10 = Field(..., alias="_info")


class FieldInfo11(SparkModel):
    currency_href: str


class Currency(SparkModel):
    id: int
    symbol: str
    currencyCode: str
    decimalSeparator: str
    numberOfDecimals: int
    thousandsSeparator: str
    negativeParenthesesFlag: bool
    displaySymbolFlag: bool
    currencyIdentifier: str
    displayIdFlag: bool
    rightAlign: bool
    name: str
    field_info: FieldInfo11 = Field(..., alias="_info")


class FieldInfo12(SparkModel):
    location_href: str


class CompanyLocation(SparkModel):
    id: int
    name: str
    field_info: FieldInfo12 = Field(..., alias="_info")


class FieldInfo13(SparkModel):
    company_href: str


class ShipToCompany(SparkModel):
    id: int
    identifier: str
    name: str
    field_info: FieldInfo13 = Field(..., alias="_info")


class FieldInfo14(SparkModel):
    site_href: str


class ShipToSite(SparkModel):
    id: int
    name: str
    field_info: FieldInfo14 = Field(..., alias="_info")


class CustomField(SparkModel):
    id: int
    caption: str
    type: str
    entryMethod: str
    numberOfDecimals: int
    connectWiseId: str


class Agreement(SparkModel):
    id: int
    name: str
    type: Type
    company: Company
    contact: Contact
    site: Site
    location: Location
    department: Department
    restrictLocationFlag: bool
    restrictDepartmentFlag: bool
    startDate: str
    endDate: str = Field(default="")  # Made optional for agreements without end dates
    noEndingDateFlag: bool
    cancelledFlag: bool
    applicationUnits: str = Field(
        default="Hours"
    )  # Made optional with default value to fix validation errors
    applicationLimit: float
    applicationCycle: str = Field(
        default="None"
    )  # Made optional with default value to fix validation errors
    applicationUnlimitedFlag: bool
    oneTimeFlag: bool
    coverAgreementTime: bool
    coverAgreementProduct: bool
    coverAgreementExpense: bool
    coverSalesTax: bool
    carryOverUnused: bool
    allowOverruns: bool
    expireWhenZero: bool
    chargeToFirm: bool
    employeeCompRate: str
    employeeCompNotExceed: str
    compHourlyRate: float
    compLimitAmount: float
    billingCycle: BillingCycle
    billOneTimeFlag: bool
    invoicingCycle: str
    billToCompany: BillToCompany
    billToContact: BillToContact
    billToSite: BillToSite
    billAmount: float
    taxable: bool
    billStartDate: str
    taxCode: TaxCode
    restrictDownPayment: bool
    prorateFlag: bool
    invoiceProratedAdditionsFlag: bool
    topComment: bool
    bottomComment: bool
    billTime: str
    billExpenses: str
    billProducts: str
    billableTimeInvoice: bool
    billableExpenseInvoice: bool
    billableProductInvoice: bool
    currency: Currency
    autoInvoiceFlag: bool
    companyLocation: CompanyLocation
    shipToCompany: ShipToCompany
    shipToSite: ShipToSite
    agreementStatus: str
    customFields: list[CustomField]
