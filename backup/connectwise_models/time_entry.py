# generated by datamodel-codegen:
#   filename:  TimeEntry.json
#   timestamp: 2025-05-09T13:38:56+00:00

from __future__ import annotations

from pydantic import Field
from sparkdantic import SparkModel


class FieldInfo(SparkModel):
    company_href: str
    mobileGuid: str


class Company(SparkModel):
    id: int
    identifier: str
    name: str
    field_info: FieldInfo = Field(..., alias="_info")


class FieldInfo1(SparkModel):
    member_href: str
    image_href: str


class Member(SparkModel):
    id: int
    identifier: str
    name: str
    dailyCapacity: float
    field_info: FieldInfo1 = Field(..., alias="_info")


class FieldInfo2(SparkModel):
    location_href: str


class Location(SparkModel):
    id: int
    name: str
    field_info: FieldInfo2 = Field(..., alias="_info")


class FieldInfo3(SparkModel):
    department_href: str


class Department(SparkModel):
    id: int
    name: str
    field_info: FieldInfo3 = Field(..., alias="_info")


class FieldInfo4(SparkModel):
    workType_href: str


class WorkType(SparkModel):
    id: int
    name: str
    utilizationFlag: bool
    field_info: FieldInfo4 = Field(..., alias="_info")


class FieldInfo5(SparkModel):
    workRole_href: str


class WorkRole(SparkModel):
    id: int
    name: str
    field_info: FieldInfo5 = Field(..., alias="_info")


class FieldInfo6(SparkModel):
    timeSheet_href: str


class TimeSheet(SparkModel):
    id: int
    name: str
    field_info: FieldInfo6 = Field(..., alias="_info")


class FieldInfo7(SparkModel):
    ticket_href: str
    billingMethod: str
    status: str


class Ticket(SparkModel):
    id: int
    summary: str
    field_info: FieldInfo7 = Field(..., alias="_info")


class FieldInfo8(SparkModel):
    project_href: str
    billingMethod: str
    status: str


class Project(SparkModel):
    id: int
    name: str
    field_info: FieldInfo8 = Field(..., alias="_info")


class FieldInfo9(SparkModel):
    phase_href: str
    billingMethod: str


class Phase(SparkModel):
    id: int
    name: str
    field_info: FieldInfo9 = Field(..., alias="_info")


class FieldInfo10(SparkModel):
    taxCode_href: str


class TaxCode(SparkModel):
    id: int
    name: str
    field_info: FieldInfo10 = Field(..., alias="_info")


class TimeEntry(SparkModel):
    id: int
    company: Company
    companyType: str
    chargeToId: int
    chargeToType: str
    member: Member
    locationId: int
    businessUnitId: int
    businessGroupDesc: str
    location: Location
    department: Department
    workType: WorkType
    workRole: WorkRole
    projectActivity: str = Field(
        default=""
    )  # Made optional with default value to fix validation errors
    territory: str
    timeStart: str
    timeEnd: str
    hoursDeduct: float
    actualHours: float
    billableOption: str
    addToDetailDescriptionFlag: bool
    addToInternalAnalysisFlag: bool
    addToResolutionFlag: bool
    emailResourceFlag: bool = Field(
        default=False
    )  # Made optional with default value to fix validation errors
    emailContactFlag: bool = Field(
        default=False
    )  # Made optional with default value to fix validation errors
    emailCcFlag: bool = Field(
        default=False
    )  # Made optional with default value to fix validation errors
    hoursBilled: float
    invoiceHours: float
    hourlyCost: str
    enteredBy: str
    dateEntered: str
    mobileGuid: str
    hourlyRate: float
    agreementHours: float
    agreementAmount: float
    agreementAdjustment: float
    adjustment: float
    invoiceReady: int
    timeSheet: TimeSheet
    status: str
    ticket: Ticket | None = None  # Made optional with default value to fix validation errors
    project: Project | None = None  # Made optional with default value to fix validation errors
    phase: Phase | None = None  # Made optional with default value to fix validation errors
    ticketBoard: str = Field(
        default=""
    )  # Made optional with default value to fix validation errors
    ticketStatus: str = Field(
        default=""
    )  # Made optional with default value to fix validation errors
    invoiceFlag: bool = Field(
        default=False
    )  # Made optional with default value to fix validation errors
    extendedInvoiceAmount: float = Field(
        default=0.0
    )  # Made optional with default value to fix validation errors
    locationName: str = Field(
        default=""
    )  # Made optional with default value to fix validation errors
    taxCode: TaxCode | None = None  # Made optional with default value to fix validation errors
