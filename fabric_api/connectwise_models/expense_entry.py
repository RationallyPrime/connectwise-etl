# generated by datamodel-codegen:
#   filename:  tmpofaqe4_v.json
#   timestamp: 2025-05-14T10:54:56+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, Literal
from uuid import UUID

from pydantic import Field
from sparkdantic import SparkModel


class AgreementReference(ActivityReference):
    pass


class AgreementTypeReference(ActivityReference):
    pass


class BatchReference(ActivityReference):
    pass


class BillingCycleReference(ActivityReference):
    pass


class BillingSetupReference(ActivityReference):
    pass


class BillingStatusReference(ActivityReference):
    pass


class BillingTermsReference(ActivityReference):
    pass


class BillingUnitReference(ActivityReference):
    pass


class CatalogItemReference(ActivityReference):
    pass


class ClassificationReference(ActivityReference):
    pass


class CompanyReference(ActivityReference):
    pass


class ContactReference(ActivityReference):
    pass


class CurrencyReference(ActivityReference):
    pass


class EntityTypeReference(ActivityReference):
    pass


class ExpenseReportReference(ActivityReference):
    pass


class ExpenseTax(ActivityReference):
    pass


class ExpenseTypeReference(ActivityReference):
    pass


class InvoiceGroupingReference(ActivityReference):
    pass


class InvoiceReference(ActivityReference):
    pass


class InvoiceTemplateDetailReference(ActivityReference):
    pass


class InvoiceTemplateReference(ActivityReference):
    pass


class MemberReference(ActivityReference):
    pass


class OpportunityReference(ActivityReference):
    pass


class OpportunityStatusReference(ActivityReference):
    pass


class OwnerLevelReference(ActivityReference):
    pass


class PaymentMethodReference(ActivityReference):
    pass


class ProductRecurring(ActivityReference):
    pass


class ProjectPhaseReference(ActivityReference):
    pass


class ProjectReference(ActivityReference):
    pass


class ProjectTypeReference(ActivityReference):
    pass


class SLAReference(ActivityReference):
    pass


class SalesOrderReference(ActivityReference):
    pass


class SiteReference(ActivityReference):
    pass


class SystemDepartmentReference(ActivityReference):
    pass


class SystemLocationReference(ActivityReference):
    pass


class TaxCodeReference(ActivityReference):
    pass


class TicketReference(ActivityReference):
    pass


class TimeSheetReference(ActivityReference):
    pass


class UnitOfMeasureReference(ActivityReference):
    pass


class WarehouseBinReference(ActivityReference):
    pass


class WarehouseReference(ActivityReference):
    pass


class WorkRoleReference(ActivityReference):
    pass


class WorkTypeReference(ActivityReference):
    pass


class Agreement(SparkModel):
    id: int | None = None
    name: str
    """
     Max length: 100;
    """
    type: Any
    company: Any
    contact: Any
    site: Any | None = None
    subContractCompany: Any | None = None
    subContractContact: Any | None = None
    parentAgreement: Any | None = None
    customerPO: str | None = None
    """
     Max length: 50;
    """
    location: Any | None = None
    department: Any | None = None
    restrictLocationFlag: bool | None = None
    restrictDepartmentFlag: bool | None = None
    startDate: datetime | None = None
    endDate: datetime | None = None
    noEndingDateFlag: bool | None = None
    opportunity: Any | None = None
    cancelledFlag: bool | None = None
    dateCancelled: datetime | None = None
    reasonCancelled: str | None = None
    """
     Max length: 100;
    """
    sla: Any | None = None
    workOrder: str | None = None
    """
     Max length: 20;
    """
    internalNotes: str | None = None
    applicationUnits: Literal['Amount', 'Hours', 'Incidents'] | None = None
    applicationLimit: float | None = None
    applicationCycle: (
        Literal[
            'Contract2Weeks',
            'Contract4Weeks',
            'ContractYear',
            'CalendarMonth',
            'CalendarQuarter',
            'CalendarWeek',
            'ContractQuarter',
            'CalendarYear',
        ]
        | None
    ) = None
    applicationUnlimitedFlag: bool | None = None
    oneTimeFlag: bool | None = None
    coverAgreementTime: bool | None = None
    coverAgreementProduct: bool | None = None
    coverAgreementExpense: bool | None = None
    coverSalesTax: bool | None = None
    carryOverUnused: bool | None = None
    allowOverruns: bool | None = None
    expiredDays: int | None = None
    limit: int | None = None
    expireWhenZero: bool | None = None
    chargeToFirm: bool | None = None
    employeeCompRate: Literal['Actual', 'Hourly'] | None = None
    """
     Required On Updates;
    """
    employeeCompNotExceed: Literal['Billing', 'Amount', 'Percent'] | None = None
    compHourlyRate: float | None = None
    compLimitAmount: float | None = None
    billingCycle: Any | None = None
    billOneTimeFlag: bool | None = None
    billingTerms: Any | None = None
    invoicingCycle: Literal['ContractYear', 'CalendarYear'] | None = None
    """
     Required On Updates;
    """
    billToCompany: Any | None = None
    billToContact: Any | None = None
    billToSite: Any | None = None
    billAmount: float | None = None
    taxable: bool | None = None
    prorateFirstBill: float | None = None
    billStartDate: datetime | None = None
    taxCode: Any | None = None
    restrictDownPayment: bool | None = None
    prorateFlag: bool | None = None
    invoiceProratedAdditionsFlag: bool | None = None
    invoiceDescription: str | None = None
    topComment: bool | None = None
    bottomComment: bool | None = None
    workRole: Any | None = None
    workType: Any | None = None
    projectType: Any | None = None
    invoiceTemplate: Any | None = None
    billTime: Literal['Billable', 'DoNotBill', 'NoCharge', 'NoDefault'] | None = None
    """
     Required On Updates;
    """
    billExpenses: Literal['Billable', 'DoNotBill', 'NoCharge', 'NoDefault'] | None = (
        None
    )
    """
     Required On Updates;
    """
    billProducts: Literal['Billable', 'DoNotBill', 'NoCharge', 'NoDefault'] | None = (
        None
    )
    """
     Required On Updates;
    """
    billableTimeInvoice: bool | None = None
    billableExpenseInvoice: bool | None = None
    billableProductInvoice: bool | None = None
    currency: Any | None = None
    periodType: Literal['Current', 'Future', 'Both', 'Undefined'] | None = None
    autoInvoiceFlag: bool | None = None
    nextInvoiceDate: str | None = None
    companyLocation: Any | None = None
    shipToCompany: Any | None = None
    shipToContact: Any | None = None
    shipToSite: Any | None = None
    agreementStatus: Literal['Active', 'Cancelled', 'Expired', 'Inactive'] | None = None


class TimeEntry(SparkModel):
    id: int | None = None
    company: Any | None = None
    companyType: str | None = None
    chargeToId: int | None = None
    """
    If chargeToId is not specified, we asume you enter time against the company specified
    """
    chargeToType: (
        Literal['Company', 'ServiceTicket', 'ProjectTicket', 'ChargeCode', 'Activity']
        | None
    ) = None
    """
    If chargeToId is not specified, we asume you enter time against the company specified
    """
    member: Any | None = None
    locationId: int | None = None
    businessUnitId: int | None = None
    businessGroupDesc: str | None = None
    location: Any | None = None
    department: Any | None = None
    workType: Any | None = None
    workRole: Any | None = None
    agreement: Any | None = None
    agreementType: str | None = None
    activity: Any | None = None
    opportunityRecid: int | None = None
    projectActivity: str | None = None
    territory: str | None = None
    timeStart: datetime
    timeEnd: datetime | None = None
    hoursDeduct: float | None = None
    actualHours: float | None = None
    billableOption: Literal['Billable', 'DoNotBill', 'NoCharge', 'NoDefault'] | None = (
        None
    )
    """
     Required On Updates;
    """
    notes: str | None = None
    internalNotes: str | None = None
    addToDetailDescriptionFlag: bool | None = None
    addToInternalAnalysisFlag: bool | None = None
    addToResolutionFlag: bool | None = None
    emailResourceFlag: bool | None = None
    """
    This is an action flag. To update this value use the /service/tickets endpoint automaticEmailResourceFlag field
    """
    emailContactFlag: bool | None = None
    """
    This is an action flag. To update this value use the /service/tickets endpoint automaticEmailContactFlag field
    """
    emailCcFlag: bool | None = None
    """
    This is an action flag. To update this value use the /service/tickets endpoint automaticEmailCcFlag field
    """
    emailCc: str | None = None
    """
    To update this value use the /service/tickets endpoint automaticEmailCc field
    """
    hoursBilled: float | None = None
    invoiceHours: float | None = None
    hourlyCost: str | None = None
    enteredBy: str | None = None
    dateEntered: datetime | None = None
    invoice: Any | None = None
    mobileGuid: UUID | None = None
    hourlyRate: float | None = None
    """
    This field may only be Updated, it is defaulted on Create
    """
    overageRate: float | None = None
    agreementHours: float | None = None
    agreementAmount: float | None = None
    agreementAdjustment: float | None = None
    adjustment: float | None = None
    invoiceReady: int | None = None
    timeSheet: Any | None = None
    status: (
        Literal[
            'Open',
            'Rejected',
            'PendingApproval',
            'ErrorsCorrected',
            'PendingProjectApproval',
            'ApprovedByTierOne',
            'RejectBySecondTier',
            'ApprovedByTierTwo',
            'ReadyToBill',
            'Billed',
            'WrittenOff',
            'BilledAgreement',
        ]
        | None
    ) = None
    ticket: Any | None = None
    project: Any | None = None
    phase: Any | None = None
    ticketBoard: str | None = None
    ticketStatus: str | None = None
    ticketType: str | None = None
    ticketSubType: str | None = None
    invoiceFlag: bool | None = None
    extendedInvoiceAmount: float | None = None
    locationName: str | None = None
    taxCode: Any | None = None


class ExpenseEntry(SparkModel):
    id: int | None = None
    expenseReport: Any | None = None
    company: Any | None = None
    chargeToId: int | None = None
    chargeToType: (
        Literal['Company', 'ServiceTicket', 'ProjectTicket', 'ChargeCode', 'Activity']
        | None
    ) = None
    """
    Gets or sets
                company or chargeToType is required.
    """
    type: Any
    member: Any | None = None
    paymentMethod: Any | None = None
    classification: Any | None = None
    amount: float | None = Field(...)
    billableOption: Literal['Billable', 'DoNotBill', 'NoCharge', 'NoDefault'] | None = (
        None
    )
    date: datetime
    locationId: int | None = None
    businessUnitId: int | None = None
    notes: str | None = None
    agreement: Any | None = None
    invoiceAmount: float | None = None
    mobileGuid: UUID | None = None
    taxes: list[Any] | None = None
    invoice: Any | None = None
    currency: Any | None = None
    status: (
        Literal[
            'Open',
            'Rejected',
            'PendingApproval',
            'ErrorsCorrected',
            'PendingProjectApproval',
            'ApprovedByTierOne',
            'RejectBySecondTier',
            'ApprovedByTierTwo',
            'ReadyToBill',
            'Billed',
            'WrittenOff',
            'BilledAgreement',
        ]
        | None
    ) = None
    billAmount: float | None = None
    agreementAmount: float | None = None
    odometerStart: float | None = None
    odometerEnd: float | None = None
    ticket: Any | None = None
    project: Any | None = None
    phase: Any | None = None


class Invoice(SparkModel):
    id: int | None = None
    invoiceNumber: str | None = None
    """
     Max length: 15; Required On Updates;
    """
    type: (
        Literal[
            'Agreement',
            'CreditMemo',
            'DownPayment',
            'Miscellaneous',
            'Progress',
            'Standard',
        ]
        | None
    ) = Field(...)
    status: Any | None = None
    company: Any
    billToCompany: Any | None = None
    shipToCompany: Any | None = None
    accountNumber: str | None = None
    applyToType: (
        Literal['All', 'Agreement', 'Project', 'ProjectPhase', 'SalesOrder', 'Ticket']
        | None
    ) = None
    applyToId: int | None = None
    attention: str | None = None
    """
     Max length: 60;
    """
    shipToAttention: str | None = None
    """
     Max length: 60;
    """
    billingSite: Any | None = None
    billingSiteAddressLine1: str | None = None
    billingSiteAddressLine2: str | None = None
    billingSiteCity: str | None = None
    billingSiteState: str | None = None
    billingSiteZip: str | None = None
    billingSiteCountry: str | None = None
    shippingSite: Any | None = None
    shippingSiteAddressLine1: str | None = None
    shippingSiteAddressLine2: str | None = None
    shippingSiteCity: str | None = None
    shippingSiteState: str | None = None
    shippingSiteZip: str | None = None
    shippingSiteCountry: str | None = None
    billingTerms: Any | None = None
    reference: str | None = None
    """
     Max length: 50;
    """
    customerPO: str | None = None
    """
     Max length: 50;
    """
    templateSetupId: int | None = None
    """
    Can be obtained via InvoiceTemplate report.
    """
    invoiceTemplate: Any | None = None
    emailTemplateId: int | None = None
    """
    Can be obtained via InvoiceEmailTemplate report.
    """
    addToBatchEmailList: bool | None = None
    date: datetime | None = None
    restrictDownpaymentFlag: bool | None = None
    locationId: int | None = None
    """
     Required On Updates;
    """
    location: Any | None = None
    departmentId: int | None = None
    """
    departmentId is only required for special invoices.
    """
    department: Any | None = None
    territoryId: int | None = None
    territory: Any | None = None
    topComment: str | None = None
    bottomComment: str | None = None
    taxableFlag: bool | None = None
    taxCode: Any | None = None
    internalNotes: str | None = None
    downpaymentPreviouslyTaxedFlag: bool | None = None
    serviceTotal: float | None = None
    overrideDownPaymentAmountFlag: bool | None = None
    currency: Any | None = None
    dueDate: datetime | None = None
    expenseTotal: float | None = None
    productTotal: float | None = None
    previousProgressApplied: float | None = None
    serviceAdjustmentAmount: float | None = None
    agreementAmount: float | None = None
    downpaymentApplied: float | None = None
    subtotal: float | None = None
    total: float | None = None
    remainingDownpayment: float | None = None
    salesTax: float | None = None
    adjustmentReason: str | None = None
    adjustedBy: str | None = None
    closedBy: str | None = None
    payments: float | None = None
    credits: float | None = None
    balance: float | None = None
    specialInvoiceFlag: bool | None = None
    billingSetupReference: Any | None = None
    ticket: Any | None = None
    project: Any | None = None
    phase: Any | None = None
    salesOrder: Any | None = None
    agreement: Any | None = None
    glBatch: Any | None = None
    unbatchedBatch: Any | None = None


PostedInvoice = Invoice


class UnpostedInvoice(SparkModel):
    id: int | None = None
    billingLogId: int | None = None
    locationId: int | None = None
    location: Any | None = None
    departmentId: int | None = None
    department: Any | None = None
    company: Any | None = None
    accountNumber: str | None = None
    billToCompany: Any | None = None
    billToSite: Any | None = None
    shipToCompany: Any | None = None
    shipToSite: Any | None = None
    invoiceNumber: str | None = None
    invoiceDate: str | None = None
    invoiceType: (
        Literal[
            'Agreement',
            'CreditMemo',
            'DownPayment',
            'Miscellaneous',
            'Progress',
            'Standard',
        ]
        | None
    ) = None
    description: str | None = None
    billingTerms: Any | None = None
    dueDays: str | None = None
    dueDate: str | None = None
    currency: Any | None = None
    subTotal: float | None = None
    total: float | None = None
    hasTime: bool | None = None
    hasExpenses: bool | None = None
    hasProducts: bool | None = None
    invoiceTaxableFlag: bool | None = None
    taxCode: Any | None = None
    avalaraTaxFlag: bool | None = None
    """
    Used to determine if Avalara tax is enabled.
    """
    itemTaxableFlag: bool | None = None
    salesTaxAmount: float | None = None
    stateTaxFlag: bool | None = None
    """
    Set to true if transaction is taxable at the state level.
    """
    stateTaxXref: str | None = None
    stateTaxAmount: float | None = None
    countyTaxFlag: bool | None = None
    """
    Set to true if transaction is taxable at the county level.
    """
    countyTaxXref: str | None = None
    countyTaxAmount: float | None = None
    cityTaxFlag: bool | None = None
    """
    Set to true if transaction is taxable at the city level.
    """
    cityTaxXref: str | None = None
    cityTaxAmount: float | None = None
    countryTaxFlag: bool | None = None
    """
    Set to true if transaction is taxable at the country level.
    """
    countryTaxXref: str | None = None
    countryTaxAmount: float | None = None
    compositeTaxFlag: bool | None = None
    """
    Set to true if transaction is taxable at the composite level.
    """
    compositeTaxXref: str | None = None
    compositeTaxAmount: float | None = None
    levelSixTaxFlag: bool | None = None
    """
    Set to true if transaction is taxable at level six.
    """
    levelSixTaxXref: str | None = None
    levelSixTaxAmount: float | None = None
    createdBy: str | None = None
    dateClosed: str | None = None


class ProductItem(SparkModel):
    id: int | None = None
    catalogItem: Any
    description: str | None = None
    """
     Max length: 2000;
    """
    sequenceNumber: float | None = None
    quantity: float | None = None
    unitOfMeasure: Any | None = None
    price: float | None = None
    cost: float | None = None
    extPrice: float | None = None
    extCost: float | None = None
    discount: float | None = None
    margin: float | None = None
    agreementAmount: float | None = None
    priceMethod: (
        Literal[
            'FlatRateForRange',
            'PercentMarkupFromCost',
            'PercentMarkdownFromPrice',
            'PricePerUnit',
        ]
        | None
    ) = None
    billableOption: Literal['Billable', 'DoNotBill', 'NoCharge'] | None = Field(...)
    agreement: Any | None = None
    locationId: int | None = None
    """
     Required On Updates;
    """
    location: Any | None = None
    businessUnitId: int | None = None
    """
     Required On Updates;
    """
    businessUnit: Any | None = None
    vendor: Any | None = None
    vendorSku: str | None = None
    """
     Max length: 50;
    """
    taxableFlag: bool | None = None
    dropshipFlag: bool | None = None
    specialOrderFlag: bool | None = None
    phaseProductFlag: bool | None = None
    cancelledFlag: bool | None = None
    quantityCancelled: float | None = None
    cancelledReason: str | None = None
    """
     Max length: 100;
    """
    customerDescription: str | None = None
    """
     Max length: 6000; Required On Updates;
    """
    internalNotes: str | None = None
    """
     Max length: 1000;
    """
    productSuppliedFlag: bool | None = None
    subContractorShipToId: int | None = None
    subContractorAmountLimit: float | None = None
    recurring: Any | None = None
    sla: Any | None = None
    entityType: Any | None = None
    ticket: Any | None = None
    project: Any | None = None
    phase: Any | None = None
    salesOrder: Any | None = None
    opportunity: Any | None = None
    invoice: Any | None = None
    warehouseId: int | None = None
    warehouseIdObject: Any | None = None
    warehouseBinId: int | None = None
    warehouseBinIdObject: Any | None = None
    calculatedPriceFlag: bool | None = None
    calculatedCostFlag: bool | None = None
    forecastDetailId: int | None = None
    cancelledBy: int | None = None
    cancelledDate: datetime | None = None
    warehouse: str | None = None
    warehouseBin: str | None = None
    purchaseDate: datetime | None = None
    taxCode: Any | None = None
    integrationXRef: str | None = None
    listPrice: float | None = None
    serialNumberIds: list[int] | None = None
    serialNumbers: list[str] | None = None
    company: Any | None = None
    forecastStatus: Any | None = None
    productClass: (
        Literal['Agreement', 'Bundle', 'Inventory', 'NonInventory', 'Service'] | None
    ) = None
    needToPurchaseFlag: bool | None = None
    needToOrderQuantity: int | None = None
    minimumStockFlag: bool | None = None
    shipSet: str | None = None
    """
     Max length: 10;
    """
    calculatedPrice: float | None = None
    calculatedCost: float | None = None
    invoiceGrouping: Any | None = None
    poApprovedFlag: bool | None = None
    uom: str | None = None
    addComponentsFlag: bool | None = None
    ignorePricingSchedulesFlag: bool | None = None
    asioSubscriptionsID: UUID | None = None
    bypassForecastUpdate: bool | None = None
