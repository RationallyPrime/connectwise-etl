# generated by datamodel-codegen:
#   filename:  tmpf05de46_.json
#   timestamp: 2025-05-14T11:47:06+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, Literal
from uuid import UUID

from pydantic import Field
from sparkdantic import SparkModel


class ActivityReference(SparkModel):
    id: int | None = None
    name: str | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')


class SystemDepartmentReference(SparkModel):
    id: int | None = None
    identifier: str | None = None
    name: str | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')


OpportunityReference = ActivityReference


class AgreementReference(SparkModel):
    id: int | None = None
    name: str | None = None
    type: str | None = None
    chargeFirmFlag: bool | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')


CompanyReference = SystemDepartmentReference


WorkRoleReference = ActivityReference


BillingTermsReference = ActivityReference


ProjectReference = ActivityReference


ProjectPhaseReference = ActivityReference


class CustomFieldValue(SparkModel):
    id: int | None = None
    caption: str | None = None
    type: (
        Literal[
            'TextArea',
            'Button',
            'Currency',
            'Date',
            'Hyperlink',
            'IPAddress',
            'Checkbox',
            'Number',
            'Percent',
            'PhoneNumber',
            'Text',
            'Password',
        ]
        | None
    ) = None
    entryMethod: Literal['Date', 'EntryField', 'List', 'Option'] | None = None
    numberOfDecimals: int | None = None
    value: dict[str, Any] | None = None
    connectWiseId: str | None = None


TaxCodeReference = ActivityReference


class CurrencyReference(SparkModel):
    id: int | None = None
    symbol: str | None = None
    currencyCode: str | None = None
    decimalSeparator: str | None = None
    numberOfDecimals: int | None = None
    thousandsSeparator: str | None = None
    negativeParenthesesFlag: bool | None = None
    displaySymbolFlag: bool | None = None
    currencyIdentifier: str | None = None
    displayIdFlag: bool | None = None
    rightAlign: bool | None = None
    name: str | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')


SLAReference = ActivityReference


SystemLocationReference = ActivityReference


AgreementTypeReference = ActivityReference


TimeSheetReference = ActivityReference


class WorkTypeReference(SparkModel):
    id: int | None = None
    name: str | None = None
    utilizationFlag: bool | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')


ContactReference = ActivityReference


class TicketReference(SparkModel):
    id: int | None = None
    summary: str | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')


BillingCycleReference = ActivityReference


class MemberReference(SparkModel):
    id: int | None = None
    identifier: str | None = None
    name: str | None = None
    dailyCapacity: float | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')


ProjectTypeReference = ActivityReference


BillingUnitReference = ActivityReference


class InvoiceReference(SparkModel):
    id: int | None = None
    identifier: str | None = None
    billingType: str | None = None
    applyToType: str | None = None
    invoiceDate: str | None = None
    chargeFirmFlag: bool | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')


class InvoiceTemplateReference(SparkModel):
    id: int | None = None
    """
    Gets or sets invoice Template Setup Id.
    """
    name: str | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')


BatchReference = ActivityReference


OwnerLevelReference = ActivityReference


SiteReference = ActivityReference


class Agreement(SparkModel):
    id: int | None = None
    name: str
    """
     Max length: 100;
    """
    type: AgreementTypeReference
    company: CompanyReference
    contact: ContactReference
    site: SiteReference | None = None
    subContractCompany: CompanyReference | None = None
    subContractContact: ContactReference | None = None
    parentAgreement: AgreementReference | None = None
    customerPO: str | None = None
    """
     Max length: 50;
    """
    location: SystemLocationReference | None = None
    department: SystemDepartmentReference | None = None
    restrictLocationFlag: bool | None = None
    restrictDepartmentFlag: bool | None = None
    startDate: datetime | None = None
    endDate: datetime | None = None
    noEndingDateFlag: bool | None = None
    opportunity: OpportunityReference | None = None
    cancelledFlag: bool | None = None
    dateCancelled: datetime | None = None
    reasonCancelled: str | None = None
    """
     Max length: 100;
    """
    sla: SLAReference | None = None
    workOrder: str | None = None
    """
     Max length: 20;
    """
    internalNotes: str | None = None
    applicationUnits: Literal['Amount', 'Hours', 'Incidents'] | None = None
    applicationLimit: float | None = None
    applicationCycle: (
        Literal[
            'Contract2Weeks',
            'Contract4Weeks',
            'ContractYear',
            'CalendarMonth',
            'CalendarQuarter',
            'CalendarWeek',
            'ContractQuarter',
            'CalendarYear',
        ]
        | None
    ) = None
    applicationUnlimitedFlag: bool | None = None
    oneTimeFlag: bool | None = None
    coverAgreementTime: bool | None = None
    coverAgreementProduct: bool | None = None
    coverAgreementExpense: bool | None = None
    coverSalesTax: bool | None = None
    carryOverUnused: bool | None = None
    allowOverruns: bool | None = None
    expiredDays: int | None = None
    limit: int | None = None
    expireWhenZero: bool | None = None
    chargeToFirm: bool | None = None
    employeeCompRate: Literal['Actual', 'Hourly'] | None = None
    """
     Required On Updates;
    """
    employeeCompNotExceed: Literal['Billing', 'Amount', 'Percent'] | None = None
    compHourlyRate: float | None = None
    compLimitAmount: float | None = None
    billingCycle: BillingCycleReference | None = None
    billOneTimeFlag: bool | None = None
    billingTerms: BillingTermsReference | None = None
    invoicingCycle: Literal['ContractYear', 'CalendarYear'] | None = None
    """
     Required On Updates;
    """
    billToCompany: CompanyReference | None = None
    billToContact: ContactReference | None = None
    billToSite: SiteReference | None = None
    billAmount: float | None = None
    taxable: bool | None = None
    prorateFirstBill: float | None = None
    billStartDate: datetime | None = None
    taxCode: TaxCodeReference | None = None
    restrictDownPayment: bool | None = None
    prorateFlag: bool | None = None
    invoiceProratedAdditionsFlag: bool | None = None
    invoiceDescription: str | None = None
    topComment: bool | None = None
    bottomComment: bool | None = None
    workRole: WorkRoleReference | None = None
    workType: WorkTypeReference | None = None
    projectType: ProjectTypeReference | None = None
    invoiceTemplate: InvoiceTemplateReference | None = None
    billTime: Literal['Billable', 'DoNotBill', 'NoCharge', 'NoDefault'] | None = None
    """
     Required On Updates;
    """
    billExpenses: Literal['Billable', 'DoNotBill', 'NoCharge', 'NoDefault'] | None = (
        None
    )
    """
     Required On Updates;
    """
    billProducts: Literal['Billable', 'DoNotBill', 'NoCharge', 'NoDefault'] | None = (
        None
    )
    """
     Required On Updates;
    """
    billableTimeInvoice: bool | None = None
    billableExpenseInvoice: bool | None = None
    billableProductInvoice: bool | None = None
    currency: CurrencyReference | None = None
    periodType: Literal['Current', 'Future', 'Both', 'Undefined'] | None = None
    autoInvoiceFlag: bool | None = None
    nextInvoiceDate: str | None = None
    companyLocation: SystemLocationReference | None = None
    shipToCompany: CompanyReference | None = None
    shipToContact: ContactReference | None = None
    shipToSite: SiteReference | None = None
    agreementStatus: Literal['Active', 'Cancelled', 'Expired', 'Inactive'] | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')
    customFields: list[CustomFieldValue] | None = None


class TimeEntry(SparkModel):
    id: int | None = None
    company: CompanyReference | None = None
    companyType: str | None = None
    chargeToId: int | None = None
    """
    If chargeToId is not specified, we asume you enter time against the company specified
    """
    chargeToType: (
        Literal['Company', 'ServiceTicket', 'ProjectTicket', 'ChargeCode', 'Activity']
        | None
    ) = None
    """
    If chargeToId is not specified, we asume you enter time against the company specified
    """
    member: MemberReference | None = None
    locationId: int | None = None
    businessUnitId: int | None = None
    businessGroupDesc: str | None = None
    location: OwnerLevelReference | None = None
    department: BillingUnitReference | None = None
    workType: WorkTypeReference | None = None
    workRole: WorkRoleReference | None = None
    agreement: AgreementReference | None = None
    agreementType: str | None = None
    activity: ActivityReference | None = None
    opportunityRecid: int | None = None
    projectActivity: str | None = None
    territory: str | None = None
    timeStart: datetime
    timeEnd: datetime | None = None
    hoursDeduct: float | None = None
    actualHours: float | None = None
    billableOption: Literal['Billable', 'DoNotBill', 'NoCharge', 'NoDefault'] | None = (
        None
    )
    """
     Required On Updates;
    """
    notes: str | None = None
    internalNotes: str | None = None
    addToDetailDescriptionFlag: bool | None = None
    addToInternalAnalysisFlag: bool | None = None
    addToResolutionFlag: bool | None = None
    emailResourceFlag: bool | None = None
    """
    This is an action flag. To update this value use the /service/tickets endpoint automaticEmailResourceFlag field
    """
    emailContactFlag: bool | None = None
    """
    This is an action flag. To update this value use the /service/tickets endpoint automaticEmailContactFlag field
    """
    emailCcFlag: bool | None = None
    """
    This is an action flag. To update this value use the /service/tickets endpoint automaticEmailCcFlag field
    """
    emailCc: str | None = None
    """
    To update this value use the /service/tickets endpoint automaticEmailCc field
    """
    hoursBilled: float | None = None
    invoiceHours: float | None = None
    hourlyCost: str | None = None
    enteredBy: str | None = None
    dateEntered: datetime | None = None
    invoice: InvoiceReference | None = None
    mobileGuid: UUID | None = None
    hourlyRate: float | None = None
    """
    This field may only be Updated, it is defaulted on Create
    """
    overageRate: float | None = None
    agreementHours: float | None = None
    agreementAmount: float | None = None
    agreementAdjustment: float | None = None
    adjustment: float | None = None
    invoiceReady: int | None = None
    timeSheet: TimeSheetReference | None = None
    status: (
        Literal[
            'Open',
            'Rejected',
            'PendingApproval',
            'ErrorsCorrected',
            'PendingProjectApproval',
            'ApprovedByTierOne',
            'RejectBySecondTier',
            'ApprovedByTierTwo',
            'ReadyToBill',
            'Billed',
            'WrittenOff',
            'BilledAgreement',
        ]
        | None
    ) = None
    ticket: TicketReference | None = None
    project: ProjectReference | None = None
    phase: ProjectPhaseReference | None = None
    ticketBoard: str | None = None
    ticketStatus: str | None = None
    ticketType: str | None = None
    ticketSubType: str | None = None
    invoiceFlag: bool | None = None
    extendedInvoiceAmount: float | None = None
    locationName: str | None = None
    taxCode: TaxCodeReference | None = None
    field_info: dict[str, str] | None = Field(None, alias='_info')
    customFields: list[CustomFieldValue] | None = None
