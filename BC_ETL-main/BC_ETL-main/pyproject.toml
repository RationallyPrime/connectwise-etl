[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "bc_etl"
version = "0.1.0"
description = "Business Central ETL utilities"
authors = ["Wise Lausnir <your.email@example.com>"]
readme = "README.md"
packages = [{include = "bc_etl"}]

[tool.poetry.dependencies]
python = ">=3.11.0,<3.12.0"  # Match Fabric's 3.11.9 runtime
# All dependencies optional for Fabric runtime compatibility
pyspark = {version = ">=3.3.0", optional = true}
delta-spark = {version = ">=2.2.0", optional = true}
logfire = {version = ">=3.8.0", optional = true}
pyyaml = ">=6.0.0"  # Added for config loading

[tool.poetry.group.dev.dependencies]
pytest = ">=7.0.0"
ruff = ">=0.0.0"
mypy = ">=1.0.0"
types-setuptools = "*"
types-pyyaml = "*"  # Added for PyYAML type checking
basedpyright = ">=1.28.4"  # Added for type checking
pyspark = ">=3.3.0"  # For development without Fabric
delta-spark = ">=2.2.0"  # For development without Fabric
logfire = ">=0.6.0"

# Define feature groups so users can choose what to install
[tool.poetry.extras]
spark = ["pyspark", "delta-spark"]
observability = ["logfire"]  # Separate group for observability
local = ["pyspark", "delta-spark", "logfire"]  # All deps for local development
minimal = []  # Truly minimal for Fabric deployment

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W", "B", "UP", "C4", "PT", "SIM"]
ignore = ["E501"]
fixable = ["ALL"]
unfixable = []

[tool.basedpyright]
pythonVersion = "3.11"
typeCheckingMode = "basic"
reportMissingImports = true
reportUnusedImport = true
reportPrivateUsage = false
reportOptionalMemberAccess = false
reportPrivateImportUsage = false
reportUnsupportedDunderAll = false
reportConstantRedefinition = false
reportUnknownLambdaType = false
reportPossiblyUnboundVariable = false
reportCallIssue = false
reportUnknownMemberType = "none"
reportUnknownArgumentType = "none"
reportUnknownVariableType = "none"
reportAttributeAccessIssue = "none"
reportOptionalCall = "warning"

# Exclude patterns
exclude = [
    "**/node_modules",
    "**/__pycache__",
    ".git"
]

# Additional search paths
extraPaths = ["./typings"]

# Path to directory containing custom type stub files
stubPath = "typings"

# Use library implementations to extract type information when type stub is not present
useLibraryCodeForTypes = true