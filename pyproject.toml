[project]
name = "unified-etl-workspace"
version = "0.1.0"
description = "Unified ETL framework workspace root"
authors = [
    {name = "HÃ¡kon Freyr Gunnarsson", email = "hakonf@wise.is"}
]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    # Workspace packages
    "unified-etl-core",
    "unified-etl-connectwise",
    "unified-etl-businesscentral",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-mock>=3.14.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.11.9", 
    "basedpyright>=1.29.1",
    "types-pyyaml",
    "types-requests",
    "datamodel-code-generator>=0.30.1",
]

# Testing dependencies
test = [
    "pytest>=7.0.0",
    "pytest-mock>=3.14.0",
    "pytest-asyncio>=0.21.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["unified_etl_workspace"]

[tool.uv]
managed = true

[tool.uv.sources]
unified-etl-core = { workspace = true }
unified-etl-connectwise = { workspace = true }
unified-etl-businesscentral = { workspace = true }

[tool.uv.workspace]
members = ["packages/*"]

[tool.ruff]
target-version = "py311"
line-length = 100
exclude = [
    ".venv",
    "venv",
    "build",
    "dist",
    "__pycache__",
    "unified_etl/models/",  # Exclude generated models
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "N",    # naming conventions
    "RUF",  # ruff-specific rules
    "PT",   # pytest
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by formatter
    "N815",  # camelCase function and variable names
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["E402", "I001", "F821", "W293", "B018", "W291", "W292"]
"unified_etl/models/**/*.py" = ["N815", "N802", "N806", "N813"]  # Generated models may have naming issues
"unified_etl/generators/**/*.py" = ["E402"]
"unified_etl/**/*.py" = ["N802", "N806", "N813"]  # Allow camelCase function and variable names

[tool.ruff.lint.isort]
case-sensitive = true
combine-as-imports = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.basedpyright]
pythonVersion = "3.11"
pythonPlatform = "Linux"
typeCheckingMode = "standard"
include = ["packages/*/src"]
exclude = [
    "**/.venv/**",
    "**/__pycache__/**",
    "**/node_modules/**",
    "**/.git/**",
    "**/dist/**",
    "**/build/**",
    "**/models/generated.py",  # Exclude generated models from type checking
    "**/tests/**",
]
enableTypeIgnoreComments = true
useLibraryCodeForTypes = true
reportMissingTypeStubs = "none"
reportUnusedImport = "warning"
reportPrivateUsage = false
reportOptionalMemberAccess = false
reportPrivateImportUsage = false
reportUnsupportedDunderAll = false
reportConstantRedefinition = false
reportUnknownLambdaType = false
reportPossiblyUnboundVariable = false
reportCallIssue = false
reportUnknownMemberType = "none"
reportUnknownArgumentType = "none"
reportUnknownVariableType = "none"
reportAttributeAccessIssue = "none"
reportOptionalCall = "warning"

[tool.datamodel-codegen]
target-python-version = "3.11"
base-class = "sparkdantic.SparkModel"
input-file-type = "jsonschema"
output-model-type = "pydantic_v2.BaseModel"
use-standard-collections = true
use-schema-description = true
use-field-description = true
field-include-all-keys = true
field-constraints = true
strict-nullable = true
collapse-root-models = true
validate-configuration = true
use-model-config = true
capitalize-enum-members = true
use-union-operator = true

# Field handling settings - preserve camelCase
snake-case-field = false  # Preserve camelCase field names
aliased-fields = true
use-annotated = false
strip-default-none = false

# Output formatting settings
output-model-sorted = true
wrap-string-literal = false
reuse-model = true

# Enums handling
reuse-enum = true
enum-field-as-literal = "all"
use-subclass-enum = true

# Regular class generation settings
class-name = "JsonSchema"

[dependency-groups]
dev = [
    "pytest>=8.3.5",
]
