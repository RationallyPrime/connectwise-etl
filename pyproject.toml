[project]
name = "connectwise-etl"
version = "1.0.0"
description = "ConnectWise ETL framework with medallion architecture for Microsoft Fabric"
authors = [
    {name = "HÃ¡kon Freyr Gunnarsson", email = "hakonf@wise.is"}
]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "pydantic>=2.11.4",
    "sparkdantic>=1.1.1",
    "requests>=2.32.0",
    "structlog>=23.0.0",
    "pyyaml>=6.0.0",
    "tomli>=2.2.1",
]

[project.optional-dependencies]
# Development dependencies (Fabric runtime provides these, but needed for local dev)
dev = [
    "pyspark>=3.5.5",
    "pandas>=2.2.0",
    "pyarrow>=17.0.0",
    "pytest>=7.0.0",
    "pytest-mock>=3.14.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.11.9",
    "basedpyright>=1.29.1",
    "types-pyyaml",
    "types-requests",
    "datamodel-code-generator>=0.30.1",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/connectwise_etl"]

[tool.uv]
managed = true

[tool.ruff]
target-version = "py311"
line-length = 100
include = ["src/**/*.py"]  # Only Python files
extend-include = ["scripts/*.py"]
exclude = [
    ".venv",
    "venv",
    "build",
    "dist",
    "__pycache__",
    "src/connectwise_etl/models/",  # Exclude generated models
    "**/*.md",  # Exclude markdown
    "**/*_cdm_schema.py",  # Exclude CDM schema files with invalid names
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "N",    # naming conventions
    "RUF",  # ruff-specific rules
    "PT",   # pytest
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by formatter
    "N815",  # camelCase function and variable names
    "E402",  # module import not at top of file (needed for conditional imports)
    "B904",  # raise without from inside except (often verbose)
    "F403",  # star imports (used in __init__.py files)
    "F405",  # undefined from star imports
    "N812",  # lowercase imported as non-lowercase (F for functions)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["E402", "I001", "F821", "W293", "B018", "W291", "W292"]
"src/connectwise_etl/models/**/*.py" = ["N815", "N802", "N806", "N813"]  # Generated models may have naming issues
"src/connectwise_etl/generators/**/*.py" = ["E402"]
"src/connectwise_etl/**/*.py" = ["N802", "N806", "N813"]  # Allow camelCase function and variable names

[tool.ruff.lint.isort]
case-sensitive = true
combine-as-imports = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.basedpyright]
pythonVersion = "3.11"
pythonPlatform = "Linux"
typeCheckingMode = "standard"
include = ["src/**"]
exclude = [
    "**/.venv/**",
    "**/__pycache__/**",
    "**/node_modules/**",
    "**/.git/**",
    "**/dist/**",
    "**/build/**",
    "**/models/__init__.py",  # Exclude autogenerated models from type checking
    "**/tests/**",
]

# Strict typing for better code quality
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
analyzeUnannotatedFunctions = true

# Enable useful checks
enableTypeIgnoreComments = true
useLibraryCodeForTypes = true
deprecateTypingAliases = true

# Report configuration optimized for your project
reportMissingImports = "error"
reportMissingTypeStubs = "none"  # Don't complain about missing stubs
reportUnusedImport = "warning"
reportUnusedClass = "warning"
reportUnusedFunction = "warning"
reportUnusedVariable = "warning"
reportDuplicateImport = "warning"
reportOptionalCall = "warning"
reportOptionalIterable = "warning"
reportOptionalContextManager = "warning"
reportOptionalOperand = "warning"
reportTypedDictNotRequiredAccess = "warning"
reportUnnecessaryIsInstance = "warning"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
reportAssertAlwaysTrue = "warning"
reportSelfClsParameterName = "warning"
reportMatchNotExhaustive = "warning"

# Suppress noisy checks for Pydantic/SparkDantic models
reportPrivateUsage = false
reportOptionalMemberAccess = false
reportPrivateImportUsage = false
reportUnsupportedDunderAll = false
reportConstantRedefinition = false
reportUnknownLambdaType = false
reportPossiblyUnboundVariable = false
reportCallIssue = false
reportUnknownMemberType = "none"
reportUnknownArgumentType = "none"
reportUnknownVariableType = "none"
reportAttributeAccessIssue = "none"

